git clone https://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@github.com/Jedidiah-Solomon/ALX-INSPIRED-WEBSITE.git 

HOW TO DO PULL REQUEST
https://www.freecodecamp.org/news/how-to-make-your-first-pull-request-on-github-3/


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>JAVASCRIPT PRACTICE</title>
  </head>
  <body>
    


    <script type="text/javascript">
      

      
    </script>
  </body>
</html>


PROJECTS

1. Calculator: Build a calculator that can perform basic arithmetic operations like addition, subtraction, multiplication, and division.

2. Quiz application: Create a quiz application that asks users a set of questions and displays their score at the end.

3. ToDo List: Build a simple ToDo list application that allows users to add and delete tasks.

4. Weather App: Build a weather app that shows the current weather condition of a user-selected location.

5. Countdown Timer: Create a countdown timer that displays the time remaining until a specific event.

6. Pomodoro Timer: Build a Pomodoro timer that helps users manage their work and breaks.

7. Memory game: Build a memory game where users have to match pairs of images.

8. Random Quote Generator: Create an application that generates random quotes on a user's click.

9. Currency converter: Build a currency converter that allows users to convert between different currencies.

10. BMI Calculator: Create a BMI calculator that helps users calculate their body mass index based on their height and weight.

11. Quiz Game: Create a quiz game where users can answer multiple-choice questions and get feedback on their score.

12. Expense Tracker: Create an application that can track expenses and display them in a graph.

13. Music Player: Create a music player that can play and control music tracks.

14. Image Slider: Build an image slider that can display a collection of images in a slideshow format.

16. Interactive Map: Create an interactive map that can display locations and provide information on them.





ONWUBIKO JEDIDIAH SOLOMON
Thank you
You're welcome! I'm glad I could help. Don't hesitate to reach out if you have any further questions or if there's anything else I can assist you with.




Regenerate response

ChatGPT Mar 14 Version. Free Research Preview. Our goal is to make AI systems more natural and safe to interact with. Your feedback will help us improve.
New chat
Upgrade to Plus
Dark mode
Updates & FAQ
Log out









Operator	Description
+	Addition
-	Subtraction
*	Multiplication
**	Exponentiation (ES2016)
/	Division
%	Modulus (Division Remainder)
++	Increment
--	Decrement

The Assignment Operator (=) assigns a value to a variable.

Assignment Examples
let x = 10;
// Assign the value 5 to x
let x = 5;
// Assign the value 2 to y
let y = 2;
// Assign the value x + y to z:
let z = x + y;

The Addition Assignment Operator (+=) adds a value to a variable.
Assignment
let x = 10;
x += 5;
document.getElementById("demo").innerHTML = x;
This will add 5 to the orginal x value which is 10 to get 15.

<script>
let x = 5;
x++;
let z = x;
document.getElementById("demo").innerHTML = z;
</script>

let x = 5;
let z = x ** 2;
x ** y produces the same result as Math.pow(x,y):

Example
let x = 5;
let z = Math.pow(x,2);


Operator	Example	Same As
=	x = y	x = y
+=	x += y	x = x + y
-=	x -= y	x = x - y
*=	x *= y	x = x * y
/=	x /= y	x = x / y
%=	x %= y	x = x % y
**=	x **= y	x = x ** y



<script>
let text = "Hello";
text += " World";
document.getElementById("demo").innerHTML = text;
</script>

JavaScript Comparison Operators
Operator	Description
==	equal to
===	equal value and equal type
!=	not equal
!==	not equal value or not equal type
>	greater than
<	less than
>=	greater than or equal to
<=	less than or equal to
?	ternary operator

<script>
let x = 5;
document.getElementById("demo").innerHTML = (x == 5); // true
</script>

<script>
let x = 5;
document.getElementById("demo").innerHTML = (x == "5"); // true
</script>

<script>
let x = 5;
document.getElementById("demo").innerHTML = (x == 6); false
</script>

<!-----====-->
<script>
let x = 5;
document.getElementById("demo").innerHTML = (x === 5); true
</script>

<script>
let x = 5;
document.getElementById("demo").innerHTML = (x === "5");  false
</script>

Conditional (ternary) operator
The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. This operator is frequently used as an alternative to an if...else statement.

function getFee(isMember) {
  return (isMember ? '$2.00' : '$10.00');
}

console.log(getFee(true));
// Expected output: "$2.00"

console.log(getFee(false));
// Expected output: "$10.00"

console.log(getFee(null));
// Expected output: "$10.00"

---------------------------
Syntax
condition ? exprIfTrue : exprIfFalse


JavaScript Logical Operators
Operator	Description
&&	logical and
||	logical or
!	logical not

<script>
let x = 6;
let y = 3;

document.getElementById("demo").innerHTML = 
(x < 10 && y > 1) + "<br>" + 
(x < 10 && y < 1);
</script>

<script>
let x = 6;
let y = 3;

document.getElementById("demo").innerHTML = 
(x == 5 || y == 5) + "<br>" + 
(x == 6 || y == 0) + "<br>" + 
(x == 0 || y == 3) + "<br>" + 
(x == 6 || y == 3);
</script>

<script>
let x = 6;
let y = 3;

document.getElementById("demo").innerHTML = 
!(x === y) + "<br>" + 
!(x > y);
</script>

Comparing Different Types
Comparing data of different types may give unexpected results.

When comparing a string with a number, JavaScript will convert the string to a number when doing the 
comparison. An empty string converts to 0. A non-numeric string converts to NaN which is always false.
<script>
document.getElementById("demo").innerHTML = "" == 0;
</script>





The ??= Operator
The Nullish coalescing assignment operator is used between two values.
This operator returns the right-hand value if the left-hand value is null or undefined. If not null or undefined then it will return left-hand value.



let a = null;
let b = undefined;
let c = 10;

let d = a ?? b ?? c;
console.log(d); // 10 
We can rewrite a ?? b as:

(a !== null && a !== undefined) ? a : b;
If the left-side value contains anything other than null or undefined, then ?? returns the left-side value. If the left-side value is 0, NaN, or an empty-string, it is considered a valid value and ?? returns the left-side value 0.

Examples
let zero = 0;
console.log( zero ?? 1) ; // 0

let emptyString='';
console.log( emptyString ?? "non-empty") ; // ''

let nan = NaN;
console.log( nan ?? 0) ; // NaN
From the example above, we can see that ?? only returns the right-side value if the left-side value is either null or undefined.

If the first value is undefined or null, the second value is assigned.

Nullish Coalescing Assignment Example
let x = 10;
x ??= 5;

Syntax:

variable ?? default_value
Below are examples of the Nullish Coalescing Operator.

Example 1: In this example, we will see a basic function using the nullish coalescing operator

function foo(bar) {
  bar = bar ?? 55;
  console.log(bar);
}
foo(); // 55
foo(22); // 22



Output:

55
22


---------------------
The Optional Chaining Operator (?.)
The ?. operator returns undefined if an object is undefined or null (instead of throwing an error).

Example
// Create an object:
const car = {type:"Fiat", model:"500", color:"white"};
// Ask for car name:
document.getElementById("demo").innerHTML = car?.name;

Recall, this will give undefined becaus we dont have car.name key:value pair
<script type="text/javascript">
    // Create an object:
    const car = {type:"Fiat", model:"500", color:"white"};
    // Ask for car name:
    document.getElementById("demo").innerHTML = car.name;
</script>

---------------------------------
JavaScript has 8 Datatypes
1. String
2. Number
3. Bigint
4. Boolean
5. Undefined
6. Null
7. Symbol
8. Object

The Object Datatype
The object data type can contain:

1. An object
2. An array
3. A date



// Numbers:
let length = 16;
let weight = 7.5;

// Strings:
let color = "Yellow";
let lastName = "Johnson";

// Booleans
let x = true;
let y = false;

// Object:
const person = {firstName:"John", lastName:"Doe"};

// Array object:
const cars = ["Saab", "Volvo", "BMW"];

// Date object:
const date = new Date("2022-03-25");

Note
When adding a number and a string, JavaScript will treat the number as a string.

Example
let x = 16 + "Volvo";


JavaScript evaluates expressions from left to right. Different sequences can produce different results:

JavaScript:
let x = 16 + 4 + "Volvo";
Result:

20Volvo

JavaScript:
let x = "Volvo" + 16 + 4;
Result:

Volvo164

In the first example, JavaScript treats 16 and 4 as numbers, until it reaches "Volvo".

In the second example, since the first operand is a string, all operands are treated as strings.

JavaScript Numbers
All JavaScript numbers are stored as decimal numbers (floating point).

Numbers can be written with, or without decimals:

Example
// With decimals:
let x1 = 34.00;

// Without decimals:
let x2 = 34;

Exponential Notation
Extra large or extra small numbers can be written with scientific (exponential) notation:

Example
let y = 123e5;    // 12300000
let z = 123e-5;   // 0.00123
let y = 1e6;      //1000000

Javascript are always one type:
double (64-bit floating point).

JavaScript BigInt
All JavaScript numbers are stored in a a 64-bit floating-point format.

JavaScript BigInt is a new datatype (2020) that can be used to store integer values that are too big to be represented by a normal JavaScript Number.

Example
let x = BigInt("123456789012345678901234567890");

JavaScript Booleans
Booleans can only have two values: true or false.

Example
let x = 5;
let y = 5;
let z = 6;
(x == y)       // Returns true
(x == z)       // Returns false

JavaScript Arrays
JavaScript arrays are written with square brackets.

Array items are separated by commas.

The following code declares (creates) an array called cars, containing three items (car names):

Example
const cars = ["Saab", "Volvo", "BMW"];

Array indexes are zero-based, which means the first item is [0], second is [1], and so on.


JavaScript Objects
JavaScript objects are written with curly braces {}.

Object properties are written as name:value pairs, separated by commas.

Example
const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};

The typeof Operator
You can use the JavaScript typeof operator to find the type of a JavaScript variable.

The typeof operator returns the type of a variable or an expression:

Example
typeof ""             // Returns "string"
typeof "John"         // Returns "string"
typeof "John Doe"     // Returns "string"

Undefined
In JavaScript, a variable without a value, has the value undefined. The type is also undefined.

Example
let car;    // Value is undefined, type is undefined
Any variable can be emptied, by setting the value to undefined. The type will also be undefined.

Example
car = undefined;    // Value is undefined, type is undefined

Empty Values
An empty value has nothing to do with undefined.

An empty string has both a legal value and a type.

Example
let car = "";    // The value is "", the typeof is "string"




A JavaScript function is a block of code designed to perform a particular task.

A JavaScript function is executed when "something" invokes it (calls it).

JavaScript Function Syntax
function name(parameter1, parameter2, parameter3) {
  // code to be executed
}

Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).

The parentheses may include parameter names separated by commas:

Function parameters are listed inside the parentheses () in the function definition.

Function arguments are the values received by the function when it is invoked.

Inside the function, the arguments (the parameters) behave as local variables.

Function Invocation
The code inside the function will execute when "something" invokes (calls) the function:

When an event occurs (when a user clicks a button)
When it is invoked (called) from JavaScript code
Automatically (self invoked)

Function Return
When JavaScript reaches a return statement, the function will stop executing.

If the function was invoked from a statement, JavaScript will "return" to execute the code after the invoking statement.

Functions often compute a return value. The return value is "returned" back to the "caller"

NOTE:
1. caniuse.com
2. babeljs.io           //to compiler new js to older browsers


To check version of an app, use
1. node -v   or
2. node --version


In VSC, I can simply run my js file using:

1. node index.js          //in C drive
2. F:\Javascript>node "f:\Javascript\js-basics\app.js"        //in F drive

to run a file called index.js. This doesnot matter if am on cmd, powershell, Gitbash etc


Note:
1. You can declare a variable only but you can assign to many times
let x;
x = 7;
x = 9;
let y = 3;
let z = x + y;
console.log('Answer is:' + z);



Real Life Objects, Properties, and Methods
In real life, a car is an object.

A car has properties like weight and color, and methods like start and stop:

Object  Properties  Methods
  
car.name = Fiat

car.model = 500

car.weight = 850kg

car.color = white 
car.start()

car.drive()

car.brake()

car.stop()
All cars have the same properties, but the property values differ from car to car.

All cars have the same methods, but the methods are performed at different times.
Objects are variables too. But objects can contain many values.

This code assigns many values (Fiat, 500, white) to a variable named car:

const car = {type:"Fiat", model:"500", color:"white"};

e.g 
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Objects</h2>

<p id="demo"></p>

<script>
// Create an object:
const car = {type:"Fiat", model:"500", color:"white"};

// Display some data from the object:
document.getElementById("demo").innerHTML = "The car type is " + car.type;
</script>

</body>
</html>



For JavaScript Object, in order to get keys, values, and entries we use Object.keys, Object.values, and Object.entries.

Object.keys(obj) – returns all the keys of object as array
Object.values(obj) – returns all the values of the object as array
Object.entries(obj) – returns an array of [key, value]
Let’s say we have a user Object:

let user ={
    name : "Balaji",
    age : 23,
    greet : () => "Hello",
};   
Get Keys of the Object
Use Object.keys to get the keys of the Object:

let keys = Object.keys(user);
keys; //["name", "age", "greet"]
Object.keys will return the keys that are available in the object while calling the function – any new keys added after this will not be updated:

let keys = Object.keys(user);
keys; //["name", "age", "greet"]

user.weight = 65;

// weight key will not be added to keys array 
keys; //["name", "age", "greet"]
Get values of the Object
Use Object.values to get the values of the Object:

let values = Object.values(user);
values; // ["Balaji", 23, ƒ, 65]
Get the entries of the object
Use Object.entries to get the [key, value] pair of the Object:

let entries = Object.entries(user);
entries; 

// output
[ ["name", "Balaji"], ["age", 23], ["greet", ƒ], ["weight", 65] ]
You can use Object.entries to get Object key, value pair, and use array methods like map, filter, and reduce:

let user ={
    name : "Balaji",
    age : 23,
};
let entries = Object.entries(user)
let data = entries.map( ([key, val] = entry) => {
  return `The ＄{key} is ＄{val}`;
});
data; //  ["The name is Balaji", "The age is 23"]
Note:

When using the Object.keys, symbolic keys are not returned. Instead, use Reflect.ownKeys(obj) to returns all keys; or, use Object.getOwnPropertySymbols to only get symbolic keys.

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Objects</h2>

<p id="demo"></p>

<script>
let user ={
    name : "Balaji",
    age : 23,
    greet : () => "Hello",
};   
let mykeys = Object.keys(user);
document.getElementById("demo").innerHTML = mykeys;
</script>

</body>
</html>


or

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Objects</h2>

<p id="demo"></p>

<script>
let user ={
    name : "Balaji",
    age : 23,
    greet : () => "Hello",
};   

document.getElementById("demo").innerHTML = Object.keys(user);
</script>

</body>
</html>



============
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Objects</h2>

<p id="demo"></p>

<script>
let user ={
    name : "Balaji",
    age : 23,
    greet : () => "Hello",
};   
let mykeys = Object.entries(user);
document.getElementById("demo").innerHTML = mykeys;
</script>

</body>
</html>


The values are written as name:value pairs (name and value separated by a colon).

It is a common practice to declare objects with the const keyword.


Object Definition
You define (and create) a JavaScript object with an object literal:

Example
const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};

e.g
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Objects</h2>

<p id="demo"></p>

<script>
// Create an object:
const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};

// Display some data from the object:
document.getElementById("demo").innerHTML =
person.firstName + " is " + person.age + " years old.";
</script>

</body>
</html>

or

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Objects</h2>

<p id="demo"></p>

<script>
// Create an object:
const person = {
  firstName: "John",
  lastName: "Doe",
  age: 50,
  eyeColor: "blue"
};

// Display some data from the object:
document.getElementById("demo").innerHTML =
person.firstName + " is " + person.age + " years old.";
</script>

</body>
</html>


Object Properties
The name:values pairs in JavaScript objects are called properties:

Property  Property Value
firstName John
lastName  Doe
age 50
eyeColor  blue


Accessing Object Properties
You can access object properties in two ways:

objectName.propertyName
or

objectName["propertyName"]

Example1
person.lastName;

Example2
person["lastName"];

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Objects</h2>

<p>There are two different ways to access an object property.</p>

<p>You can use person.property or person["property"].</p>

<p id="demo"></p>

<script>
// Create an object:
const person = {
  firstName: "John",
  lastName : "Doe",
  id     :  5566
};

// Display some data from the object:
document.getElementById("demo").innerHTML =
person.firstName + " " + person["lastName"];
</script>

</body>
</html>


Object Methods
Objects can also have methods.

Methods are actions that can be performed on objects.

Methods are stored in properties as function definitions.

Property  Property Value
firstName John
lastName  Doe
age 50
eyeColor  blue
fullName  function() {return this.firstName + " " + this.lastName;}
A method is a function stored as a property.

Example
const person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};
In the example above, this refers to the person object.

I.E. this.firstName means the firstName property of this.

I.E. this.firstName means the firstName property of person.


What is this?
In JavaScript, the this keyword refers to an object.

Which object depends on how this is being invoked (used or called).

The this keyword refers to different objects depending on how it is used:

In an object method, this refers to the object.
Alone, this refers to the global object.
In a function, this refers to the global object.
In a function, in strict mode, this is undefined.
In an event, this refers to the element that received the event.
Methods like call(), apply(), and bind() can refer this to any object.
Note
this is not a variable. It is a keyword. You cannot change the value of this.

Accessing Object Methods
You access an object method with the following syntax:

objectName.methodName()


Do Not Declare Strings, Numbers, and Booleans as Objects!
When a JavaScript variable is declared with the keyword "new", the variable is created as an object:

x = new String();        // Declares x as a String object
y = new Number();        // Declares y as a Number object
z = new Boolean();       // Declares z as a Boolean object
Avoid String, Number, and Boolean objects. They complicate your code and slow down execution speed.

JavaScript - The Strings Object
The String object lets you work with a series of characters; it wraps Javascript's string primitive data type with a number of helper methods.

As JavaScript automatically converts between string primitives and String objects, you can call any of the helper methods of the String object on a string primitive.

Syntax
Use the following syntax to create a String object −

var val = new String(string);
The String parameter is a series of characters that has been properly encoded.

String Properties
Here is a list of the properties of String object and their description.

Sr.No.  Property & Description
1 constructor
Returns a reference to the String function that created the object.

2 length
Returns the length of the string.

3 prototype
The prototype property allows you to add properties and methods to an object.

In the following sections, we will have a few examples to demonstrate the usage of String properties.

String Methods
Here is a list of the methods available in String object along with their description.

Sr.No.  Method & Description
1 charAt()
Returns the character at the specified index.

2 charCodeAt()
Returns a number indicating the Unicode value of the character at the given index.

3 concat()
Combines the text of two strings and returns a new string.

4 indexOf()
Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.

5 lastIndexOf()
Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found.

6 localeCompare()
Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.

7 match()
Used to match a regular expression against a string.

8 replace()
Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.

9 search()
Executes the search for a match between a regular expression and a specified string.

10  slice()
Extracts a section of a string and returns a new string.

11  split()
Splits a String object into an array of strings by separating the string into substrings.

12  substr()
Returns the characters in a string beginning at the specified location through the specified number of characters.

13  substring()
Returns the characters in a string between two indexes into the string.

14  toLocaleLowerCase()
The characters within a string are converted to lower case while respecting the current locale.

15  toLocaleUpperCase()
The characters within a string are converted to upper case while respecting the current locale.

16  toLowerCase()
Returns the calling string value converted to lower case.

17  toString()
Returns a string representing the specified object.

18  toUpperCase()
Returns the calling string value converted to uppercase.

19  valueOf()
Returns the primitive value of the specified object.

String HTML Wrappers
Here is a list of the methods that return a copy of the string wrapped inside an appropriate HTML tag.

Sr.No.  Method & Description
1 anchor()
Creates an HTML anchor that is used as a hypertext target.

2 big()
Creates a string to be displayed in a big font as if it were in a <big> tag.

3 blink()
Creates a string to blink as if it were in a <blink> tag.

4 bold()
Creates a string to be displayed as bold as if it were in a <b> tag.

5 fixed()
Causes a string to be displayed in fixed-pitch font as if it were in a <tt> tag

6 fontcolor()
Causes a string to be displayed in the specified color as if it were in a <font color="color"> tag.

7 fontsize()
Causes a string to be displayed in the specified font size as if it were in a <font size="size"> tag.

8 italics()
Causes a string to be italic, as if it were in an <i> tag.

9 link()
Creates an HTML hypertext link that requests another URL.

10  small()
Causes a string to be displayed in a small font, as if it were in a <small> tag.

11  strike()
Causes a string to be displayed as struck-out text, as if it were in a <strike> tag.

12  sub()
Causes a string to be displayed as a subscript, as if it were in a <sub> tag

13  sup()
Causes a string to be displayed as a superscript, as if it were in a <sup> tag

In the following sections, we will have a few examples to demonstrate the usage of String methods.

e.g
<html>
   <head>
      <title>JavaScript String concat() Method</title>
   </head>
   
   <body>   
      <script type = "text/javascript">
         var str1 = new String( "This is string one" );
         var str2 = new String( "This is string two" );
         var str3 = str1.concat( str2 );      
         document.write("Concatenated String :"  + str3); 
      </script>      
   </body>
</html>

JavaScript String - length Property
Description
This property returns the number of characters in a string.

Syntax
Use the following syntax to find the length of a string −

string.length
Return Value
Returns the number of characters in the string.

Example
Try the following example.

 
<html>
   <head>
      <title>JavaScript String length Property</title>
   </head>
   
   <body>   
      <script type = "text/javascript">
         var str = new String( "This is string" );
         document.write("str.length is:" + str.length); 
      </script>      
   </body>
</html>
Output
str.length is:14 


JavaScript String - indexOf() Method
Description
This method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex or -1 if the value is not found.

Syntax
Use the following syntax to use the indexOf() method.

string.indexOf(searchValue[, fromIndex])
Argument Details
searchValue − A string representing the value to search for.

fromIndex − The location within the calling string to start the search from. It can be any integer between 0 and the length of the string. The default value is 0.

Return Value
Returns the index of the found occurrence, otherwise -1 if not found.

Example
Try the following example.

<html>
   <head>
      <title>JavaScript String indexOf() Method</title>
   </head>
   
   <body>      
      <script type = "text/javascript">
         var str1 = new String( "This is string one" );
         var index = str1.indexOf( "string" );
         document.write("indexOf found String :" + index ); 
         
         document.write("<br />");
         var index = str1.indexOf( "one" );
         document.write("indexOf found String :" + index ); 
      </script>  
   </body>
</html>
Output
indexOf found String :8
indexOf found String :15 

<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Strings</h1>
<h2>The indexOf() Method</h2>

<p>indexOf() returns the position of the first occurrence of a value in a string.</p>

<p>Find "welcome":</p>

<p id="demo"></p>

<script>
let text = "Hello world, welcome to the universe.";
let result = text.indexOf("welcome");

document.getElementById("demo").innerHTML = result;
</script>

</body>
</html>
 ans:13




JavaScript Events
HTML events are "things" that happen to HTML elements.

When JavaScript is used in HTML pages, JavaScript can "react" on these events.

HTML Events
An HTML event can be something the browser does, or something a user does.

Here are some examples of HTML events:

An HTML web page has finished loading
An HTML input field was changed
An HTML button was clicked
Often, when events happen, you may want to do something.

JavaScript lets you execute code when events are detected.

HTML allows event handler attributes, with JavaScript code, to be added to HTML elements.

With single quotes:

<element event='some JavaScript'>
With double quotes:

<element event="some JavaScript">
In the following example, an onclick attribute (with code), is added to a <button> element:

Example
<button onclick="document.getElementById('demo').innerHTML = Date()">The time is?</button>
e.g
<!DOCTYPE html>
<html>
<body>

<button onclick="document.getElementById('demo').innerHTML=Date()">The time is?</button>

<p id="demo"></p>

</body>
</html>
also

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript HTML Events</h2>
<button onclick="this.innerHTML=Date()">The time is?</button> //this will change the button

</body>
</html>

Common HTML Events
Here is a list of some common HTML events:

Event Description
onchange  An HTML element has been changed
onclick The user clicks an HTML element
onmouseover The user moves the mouse over an HTML element
onmouseout  The user moves the mouse away from an HTML element
onkeydown The user pushes a keyboard key
onload  The browser has finished loading the page


DOM Events allow JavaScript to add event listener or event handlers to HTML elements.
Examples
In HTML, onclick is the event listener, myFunction is the event handler:

<button onclick="myFunction()">Click me</button>


In JavaScript, click is the event, myFunction is the event handler:

button.addEventListener("click", myFunction);


Event Occurs When Belongs To
abort The loading of a media is aborted UiEvent, Event
afterprint  A page has started printing Event
animationend  A CSS animation has completed AnimationEvent
animationiteration  A CSS animation is repeated AnimationEvent
animationstart  A CSS animation has started AnimationEvent
beforeprint A page is about to be printed Event
beforeunload  Before a document is about to be unloaded UiEvent, Event
blur  An element loses focus  FocusEvent
canplay The browser can start playing a media (has buffered enough to begin)  Event
canplaythrough  The browser can play through a media without stopping for buffering Event
change  The content of a form element has changed Event
click An element is clicked on  MouseEvent
contextmenu An element is right-clicked to open a context menu  MouseEvent
copy  The content of an element is copied ClipboardEvent
cut The content of an element is cutted ClipboardEvent
dblclick  An element is double-clicked  MouseEvent
drag  An element is being dragged DragEvent
dragend Dragging of an element has ended  DragEvent
dragenter A dragged element enters the drop target  DragEvent
dragleave A dragged element leaves the drop target  DragEvent
dragover  A dragged element is over the drop target DragEvent
dragstart Dragging of an element has started  DragEvent
drop  A dragged element is dropped on the target  DragEvent
durationchange  The duration of a media is changed  Event
ended A media has reach the end ("thanks for listening")  Event
error An error has occurred while loading a file  ProgressEvent, UiEvent, Event
focus An element gets focus FocusEvent
focusin An element is about to get focus  FocusEvent
focusout  An element is about to lose focus FocusEvent
fullscreenchange  An element is displayed in fullscreen mode  Event
fullscreenerror An element can not be displayed in fullscreen mode  Event
hashchange  There has been changes to the anchor part of a URL  HashChangeEvent
input An element gets user input  InputEvent, Event
invalid An element is invalid Event
keydown A key is down KeyboardEvent
keypress  A key is pressed  KeyboardEvent
keyup A key is released KeyboardEvent
load  An object has loaded  UiEvent, Event
loadeddata  Media data is loaded  Event
loadedmetadata  Meta data (like dimensions and duration) are loaded Event
loadstart The browser starts looking for the specified media  ProgressEvent
message A message is received through the event source  Event
mousedown The mouse button is pressed over an element MouseEvent
mouseenter  The pointer is moved onto an element  MouseEvent
mouseleave  The pointer is moved out of an element  MouseEvent
mousemove The pointer is moved over an element  MouseEvent
mouseover The pointer is moved onto an element  MouseEvent
mouseout  The pointer is moved out of an element  MouseEvent
mouseup A user releases a mouse button over an element  MouseEvent
mousewheel  Deprecated. Use the wheel event instead WheelEvent
offline The browser starts working offline  Event
online  The browser starts working online Event
open  A connection with the event source is opened  Event
pagehide  User navigates away from a webpage  PageTransitionEvent
pageshow  User navigates to a webpage PageTransitionEvent
paste Some content is pasted in an element  ClipboardEvent
pause A media is paused Event
play  The media has started or is no longer paused  Event
playing The media is playing after beeing paused or buffered  Event
popstate  The window's history changes  PopStateEvent
progress  The browser is downloading media data Event
ratechange  The playing speed of a media is changed Event
resize  The document view is resized  UiEvent, Event
reset A form is reset Event
scroll  An scrollbar is being scrolled  UiEvent, Event
search  Something is written in a search field  Event
seeked  Skipping to a media position is finished  Event
seeking Skipping to a media position is started Event
select  User selects some text  UiEvent, Event
show  A <menu> element is shown as a context menu Event
stalled The browser is trying to get unavailable media data Event
storage A Web Storage area is updated StorageEvent
submit  A form is submitted Event
suspend The browser is intentionally not getting media data Event
timeupdate  The playing position has changed (the user moves to a different point in the media) Event
toggle  The user opens or closes the <details> element  Event
touchcancel The touch is interrupted  TouchEvent
touchend  A finger is removed from a touch screen TouchEvent
touchmove A finger is dragged across the screen TouchEvent
touchstart  A finger is placed on a touch screen  TouchEvent
transitionend A CSS transition has completed  TransitionEvent
unload  A page has unloaded UiEvent, Event
volumechange  The volume of a media is changed (includes muting)  Event
waiting A media is paused but is expected to resume (e.g. buffering)  Event
wheel The mouse wheel rolls up or down over an element  WheelEvent



onabort Event
Example
Call a function when the loading of a video is aborted:

<video onabort="myFunction()">

Definition and Usage
The onabort event occurs when the loading of an audio or video is aborted.

The onabort event occurs when a download is aborted, not when an error occurs.

Audio and Video Events
While loading a media, these events occur in the following order:

Event Occurs When
onloadstart The loading of a media starts, i.e Call a function when the video is starting to load
ondurationchange  The duration of a media is changed
onloadedmetadata  The meta data for a media has been loaded
onloadeddata  A media frame is loaded
onprogress  The browser is loading a media
oncanplay An element's scrollbar is being scrolled
oncanplaythrough  The browser estimates it can play a media
onplay  A media starts to play
onplaying A media starts or resumes
ontimeupdate  The indicated time is changed
onended A media has reached the end
Events that can occur while a media is loading or playing:

Event Occurs When
onabort The loading of a media is aborted
onemptied A media is empty (already loaded)
onerror An error occurs while loading a media
onpause A media is paused
onratechange  The playback rate is changed
onseeked  A user has seeked a new media position
onseeking A user start seeking a new media position
onstalled Media data is not available
onsuspend The browser is not getting the media data
onvolumechange  The volume of a media is changed
onwaiting A media is waiting for the next frame



onafterprint Event
Example
Call a function when a page starts printing:

<body onafterprint="myFunction()">
Definition and Usage
The onafterprint event occurs when a page starts printing.

The onafterprint event occurs when after the print dialogue box is closed.

Note
The browser fires onafterprint and onbeforeprint so that notes, explanations and comments can be added to the printing process.

onbeforeprint Event
Example
Call a function when a page is about to be printed:

<body onbeforeprint="myFunction()">

animationend Event
Example
Do something when a CSS animation has ended:

const div1 = document.getElementById("myDIV");

div1.addEventListener("animationend", myEndFunction);


animationiteration Event
Example
Do something when a CSS animation is repeated:

const div1 = document.getElementById("myDIV");

div1.addEventListener("animationiteration", myRepeatFunction);

animationstart Event
Example
Do something when a CSS animation starts:

const div1 = document.getElementById("myDIV");

div1.addEventListener("animationstart", myStartFunction);

Note:
Document.getElementsByTagName()
The getElementsByTagName method of Document interface returns an HTMLCollection of elements with the given tag name.

The complete document is searched, including the root node. The returned HTMLCollection is live, meaning that it updates itself automatically to stay in sync with the DOM tree without having to call document.getElementsByTagName() again.

Syntax
getElementsByTagName(name)

e.g
Get all elements with the tag name "li":
<!DOCTYPE html>
<html>
<body>

<h1>The Document Object</h1>
<h2>The getElementsByTagName() Method</h2>

<p>An unordered list:</p>
<ul>
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ul>

<p>The innerHTML of the second li element is:</p>
<p id="demo"></p>

<script>
const collection = document.getElementsByTagName("li");
document.getElementById("demo").innerHTML = collection[1].innerHTML;
</script>

</body>
</html>

Get all elements in the document:
<!DOCTYPE html>
<html>
<body>

<h1>The Document Object</h1>
<h2>The getElementsByTagName() Method</h2>

<p>An unordered list:</p>
<ul>
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ul>

<p>The tag name of all elements:</p>
<p id="demo"></p>

<script>
const collection = document.getElementsByTagName("*");
let text = ""
for (let i = 0; i < collection.length; i++) {
  text += collection[i].tagName + "<br>";
}
document.getElementById("demo").innerHTML = text;
</script>

</body>
</html>

NOTE:
text += collection[i].innerHTML + "<br>";   //Will print the content inside

so 0 means 1st element of the tag, 1 the second and so on.

<!DOCTYPE html>
<html>
<body>
<h1>HTML DOM Events</h1>
<h2>The beforeprint Event</h2>

<p>Use the HTML DOM to assign an "onbeforeprint" event to a body element.</p>

<h3>Print this document!</h3>
<p><b>Tip</b>: The keyboard shortcut Ctrl+P prints a page.</p>

<script>
document.getElementsByTagName("body")[0].onbeforeprint = function() {myFunction()};

function myFunction() {
  alert("You are about to print this document!");
}
</script>

</body>
</html>

Change the inner HTML of the first <p> element in the document:
<!DOCTYPE html>
<html>
<body>

<h1>The Document Object</h1>
<h2>The getElementsByTagName() Method</h2>

<p>This is a paragraph.</p>
<p>This is a paragraph.</p>
<p>This is a paragraph.</p>

<script>
document.getElementsByTagName("p")[0].innerHTML = "Hello World!";
</script>

</body>
</html>





=======
JavaScript Event Handlers
Event handlers can be used to handle and verify user input, user actions, and browser actions:

Things that should be done every time a page loads
Things that should be done when the page is closed
Action that should be performed when a user clicks a button
Content that should be verified when a user inputs data
And more ...
Many different methods can be used to let JavaScript work with events:

HTML event attributes can execute JavaScript code directly
HTML event attributes can call JavaScript functions
You can assign your own event handler functions to HTML elements
You can prevent events from being sent or being handled
And more ...

==========
onbeforeunload Event
Example
Call a function when the page is about to be unloaded:

<body onbeforeunload="return myFunction()">

Definition and Usage
The onbeforeunload event occurs when a document is about to be unloaded.

This event allows you to display a message in a confirmation dialog box to inform the user whether he/she wants to stay or leave the current page.

The default message that appears in the confirmation box, is different in different browsers. However, the standard message is something like "Are you sure you want to leave this page?".

This message cannot be removed, unless you call preventDefault() on the event.
============
onblur Event
Definition and Usage
The onblur event occurs when an HTML element loses focus.

The onblur event is often used on input fields.

The onblur event is often used with form validation (when the user leaves a form field).
====
onfocus Event
Example
Call a function when an input field gets focus:

====
The onfocusin is same as onfocus, the only difference is that onfocus event does not bubble. If you want to find out whether an element or its child gets the focus, you should use the onfocusin event. The onfocusin event is the opposite of the onfocusout event.
=====
oncanplay Event:
Call a function when a video is ready to start playing:

<video oncanplay="myFunction()">

Definition and Usage
The oncanplay event occurs when the browser can start playing a media.

The oncanplay event occurs when the browser has buffered enough to begin.
=============
Escape Character
Because strings must be written within quotes, JavaScript will misunderstand this string:

let text = "We are the so-called "Vikings" from the north.";
The string will be chopped to "We are the so-called ".

The solution to avoid this problem, is to use the backslash escape character.

The backslash (\) escape character turns special characters into string characters:

Code	Result	Description
\'	'	Single quote
\"	"	Double quote
\\	\	Backslash
The sequence \"  inserts a double quote in a string:

Example
let text = "We are the so-called \"Vikings\" from the north.";

=======
Six other escape sequences are valid in JavaScript:

Code	Result
\b	Backspace
\f	Form Feed
\n	New Line
\r	Carriage Return
\t	Horizontal Tabulator
\v	Vertical Tabulator
The 6 escape characters above were originally designed to control typewriters, teletypes, and fax machines. They do not make any sense in HTML.

JavaScript Strings as Objects
Normally, JavaScript strings are primitive values, created from literals:

let x = "John";
But strings can also be defined as objects with the keyword new:

let y = new String("John");

--------------
Do not create Strings objects.

The new keyword complicates the code and slows down execution speed.

String objects can produce unexpected results:

When using the == operator, x and y are equal:
<!DOCTYPE html>
<html>
<body>

<h2>Never Create Strings as Objects</h2>
<p>Strings and objects cannot be safely compared.</p>

<p id="demo"></p>

<script>
let x = "John";        // x is a string
let y = new String("John");  // y is an object
document.getElementById("demo").innerHTML = (x==y);
</script>

</body>
</html>
When using the === operator, x and y are not equal:
<!DOCTYPE html>
<html>
<body>

<h2>Never Create Strings as Objects</h2>
<p>Strings and objects cannot be safely compared.</p>

<p id="demo"></p>

<script>
let x = "John";        // x is a string
let y = new String("John");  // y is an object
document.getElementById("demo").innerHTML = (x===y);
</script>

</body>
</html>
Comparing two JavaScript objects always returns false.
===
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Strings</h2>

<p id="demo"></p>

<script>
// x is a string
let x = "John";

// y is an object
let y = new String("John");

document.getElementById("demo").innerHTML =
typeof x + "<br>" + typeof y;
</script>

</body>
</html>
======

<!DOCTYPE html>
<html>
<body>

<h1>The Document Object</h1>
<h2>The getElementsByTagName() Method</h2>

<p>An unordered list:</p>
<ul>
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ul>

<p>The tag name of all elements:</p>
<p id="demo"></p>

<script>
const collection = document.getElementsByTagName("*");
let text = ""
for (let i = 0; i < collection.length; i++) 
{
  text += collection[i].innerHTML + "<br>";
}
document.getElementById("demo").innerHTML = text;
</script>

</body>
</html>
====
<!DOCTYPE html>
<html>
<head>
  <title>JavaScript Tester Code</title>
</head>
<body>

<h2>JavaScript Tester Code Practicals by Jedybrown</h2>

<!--Test 1
<script type="text/javascript">
  let age;
  let j = ""
  let m = true
  let x = 7;
  let y = "Jedybrown";
  let z = x + y;
  let c = x + 6;
  console.log(typeof j);
  console.log(typeof m);
  console.log(typeof x);
  console.log(typeof y);
  console.log(typeof z);
  console.log(typeof c);
  console.log(typeof age);
</script>
-->

<!--Test 2 -->
<script type="text/javascript">
 let a = 7;
 let b = '9';
 b = parseInt(b,10);
 let c = b +  a;
 console.log('Answer is:' + c)


 let d = parseInt('Jedy', 10);
 console.log(d);

 let e = parseInt(10,'Jedy');
 console.log(e);


 let f = isNAN(d);
  console.log(f)
</script>




</body>
</html>
====================
JavaScript String Methods
String length
String slice()
String substring()
String substr()
String replace()
String replaceAll()
String toUpperCase()
String toLowerCase()
String concat()
String trim()
String trimStart()
String trimEnd()
String padStart()
String padEnd()
String charAt()
String charCodeAt()
String split()
=========
JavaScript String Length
The length property returns the length of a string:
<p id="demo"></p>

<script>
let text = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
document.getElementById("demo").innerHTML = text.length;
</script>
=====
Extracting String Parts
There are 3 methods for extracting a part of a string:

slice(start, end)
substring(start, end)
substr(start, length)
JavaScript String slice()
slice() extracts a part of a string and returns the extracted part in a new string.

The method takes 2 parameters: start position, and end position (end not included).

Example
Slice out a portion of a string from position 7 to position 13:

<p id="demo"></p>

<script>
let text = "Apple, Banana, Kiwi";
let part = text.slice(7,13);
document.getElementById("demo").innerHTML = part; 
</script>
====
If you omit the second parameter, the method will slice out the rest of the string.
If a parameter is negative, the position is counted from the end of the string
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Strings</h1>
<h2>The slice() Method</h2>

<p>Extract a part of a string counting from the end:</p>
<p id="demo"></p>

<script>
let text = "Apple, Banana, Kiwi";
let part = text.slice(-5); //Ans: kiwi
document.getElementById("demo").innerHTML = part;
</script>

</body>
</html>
======
JavaScript String substring()
substring() is similar to slice().

The difference is that start and end values less than 0 are treated as 0 in substring().
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript String Methods</h1>
<p>The substring() method extract a part of a string and returns the extracted parts in a new string:</p>

<p id="demo"></p>

<script>
let str = "Apple, Banana, Kiwi";
document.getElementById("demo").innerHTML = str.substring(7,13);
</script>

</body>
</html>
If you omit the second parameter, substring() will slice out the rest of the string.

JavaScript String substr()
substr() is similar to slice().

The difference is that the second parameter specifies the length of the extracted part.
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript String Methods</h1>
<p>The substr() method extract a part of a string
and returns the extracted parts in a new string:</p>

<p id="demo"></p>

<script>
let str = "Apple, Banana, Kiwi";
document.getElementById("demo").innerHTML = str.substr(7,10);
</script>

</body>
</html>


If you omit the second parameter, substr() will slice out the rest of the string.

Example
let str = "Apple, Banana, Kiwi";
let part = str.substr(7);

If the first parameter is negative, the position counts from the end of the string.

Example
let str = "Apple, Banana, Kiwi";
let part = str.substr(-4);
=====
Replacing String Content
The replace() method replaces a specified value with another value in a string
<!DOCTYPE html>
<html>

<body>

<h1>JavaScript String Methods</h1>
<p>Replace "Microsoft" with "W3Schools" in the paragraph below:</p>

<button onclick="myFunction()">Try it</button>

<p id="demo">Please visit Microsoft!</p>

<script>
function myFunction() {
  let text = document.getElementById("demo").innerHTML;
  document.getElementById("demo").innerHTML = text.replace("Microsoft","W3Schools");
}
</script>

</body>
</html>


Note
The replace() method does not change the string it is called on.

The replace() method returns a new string.

The replace() method replaces only the first match

By default, the replace() method replaces only the first match
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript String Methods</h1>
<p>Replace "Microsoft" with "W3Schools" in the paragraph below:</p>

<button onclick="myFunction()">Try it</button>

<p id="demo">Please visit Microsoft and Microsoft!</p>

<script>
function myFunction() {
  let text = document.getElementById("demo").innerHTML; 
  document.getElementById("demo").innerHTML = text.replace("Microsoft","W3Schools");
}
</script>

</body>
</html>


To replace case insensitive, use a regular expression with an /i flag (insensitive):
<script>
function myFunction() {
  let text = document.getElementById("demo").innerHTML; 
  document.getElementById("demo").innerHTML = text.replace(/MICROSOFT/i,"W3Schools");
}
</script>

Note
Regular expressions are written without quotes.

To replace all matches, use a regular expression with a /g flag (global match):
<script>
function myFunction() {
  let text = document.getElementById("demo").innerHTML; 
  document.getElementById("demo").innerHTML =
  text.replace(/Microsoft/g,"W3Schools");
}
</script>

=======
JavaScript String ReplaceAll()
<!DOCTYPE html>
<html>
<body>
<h1>JavaScript Strings</h1>
<h2>The replaceAll() Method</h2>

<p>ES2021 introduced the string method replaceAll().</p>

<p id="demo"></p>

<script>
let text = "I love cats. Cats are very easy to love. Cats are very popular."
text = text.replaceAll("Cats","Dogs");
text = text.replaceAll("cats","dogs");


document.getElementById("demo").innerHTML = text;
</script>

</body>
</html>
=====
<!DOCTYPE html>
<html>
<body>
<h1>JavaScript Strings</h1>
<h2>The replaceAll() Method</h2>

<p>ES2021 introduced the string method replaceAll().</p>

<p id="demo"></p>

<script>
let text = "I love cats. Cats are very easy to love. Cats are very popular."
text = text.replaceAll("Cats","Dogs");
text = text.replaceAll("cats","dogs");


document.getElementById("demo").innerHTML = text;
</script>

</body>
</html>
The replaceAll() method allows you to specify a regular expression instead of a string to be replaced.

If the parameter is a regular expression, the global flag (g) must be set set, otherwise a TypeError is thrown.

Example
text = text.replaceAll(/Cats/g,"Dogs");
text = text.replaceAll(/cats/g,"dogs");
Converting to Upper and Lower Case
A string is converted to upper case with toUpperCase():

A string is converted to lower case with toLowerCase():
JavaScript String concat()
concat() joins two or more strings:

Example
let text1 = "Hello";
let text2 = "World";
let text3 = text1.concat(" ", text2);
======
The concat() method can be used instead of the plus operator. These two lines do the same:

Example
text = "Hello" + " " + "World!";
text = "Hello".concat(" ", "World!");
====
JavaScript String trim()
The trim() method removes whitespace from both sides of a string:

Example
let text1 = "      Hello World!      ";
let text2 = text1.trim();
e.g
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Strings</h1>
<h2>The trim() Method</h2>

<p id="demo"></p>

<script>
let text1 = "     Hello World!     ";
let text2 = text1.trim();


document.getElementById("demo").innerHTML =
"Length text1 = " + text1.length + "<br>Length text2 = "  + text2.length;
</script>

</body>
</html>
===
JavaScript String trimStart()
ECMAScript 2019 added the String method trimStart() to JavaScript.

The trimStart() method works like trim(), but removes whitespace only from the start of a string.

Example
let text1 = "     Hello World!     ";
let text2 = text1.trimStart();

JavaScript String trimEnd()
ECMAScript 2019 added the String method trimEnd() to JavaScript.

The trimEnd() method works like trim(), but removes whitespace only from the end of a string.

Example
let text1 = "     Hello World!     ";
let text2 = text1.trimEnd();
=====
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript String Methods</h1>
<p>The padStart() method pads a string with another string:</p>

<p id="demo"></p>

<script>
let text = "5";
document.getElementById("demo").innerHTML = text.padStart(4,"x"); //Ans: is xxx5 since it says 4
</script>

</body>
</html>


Note
The padStart() method is a string method.

To pad a number, convert the number to a string first.

See the example below.

Example
let numb = 5;
let text = numb.toString();
let padded = text.padStart(4,"0");


=============
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript String Methods</h1>
<p>The padStart() method pads a string with another string:</p>

<p id="demo"></p>

<script>
let numb = 5;
let text = numb.toString();
document.getElementById("demo").innerHTML = text.padStart(4,0) + ' and the type is  ' +  typeof text;
</script>

</body>
</html>



JavaScript String padEnd()
The padEnd() method pads a string with another string:
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript String Methods</h1>
<p>The padEnd() method pads a string with another string:</p>

<p id="demo"></p>

<script>
let text = "5";
document.getElementById("demo").innerHTML = text.padEnd(4,"x");
</script>

</body>
</html>
Extracting String Characters
There are 3 methods for extracting string characters:

charAt(position)
charCodeAt(position)
Property access [ ]
JavaScript String charAt()
The charAt() method returns the character at a specified index (position) in a string:
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript String Methods</h2>

<p>The charAt() method returns the character at a given position in a string:</p>

<p id="demo"></p>

<script>
var text = "HELLO WORLD";
document.getElementById("demo").innerHTML = text.charAt(0);
</script>

</body>
</html>

JavaScript String charCodeAt()
The charCodeAt() method returns the unicode of the character at a specified index in a string:

The method returns a UTF-16 code (an integer between 0 and 65535).
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript String Methods</h2>

<p>The charCodeAt() method returns the unicode of the character at a given position in a string:</p>

<p id="demo"></p>

<script>
let text = "HELLO WORLD";
document.getElementById("demo").innerHTML = text.charCodeAt(0);
</script>

</body>
</html>

Property Access
ECMAScript 5 (2009) allows property access [ ] on strings:
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Strings</h1>
<p>Property access on strings:</p>

<p id="demo"></p>

<script>
var str = "HELLO WORLD";
document.getElementById("demo").innerHTML = str[0];
</script>
</body>
</html>

Note
Property access might be a little unpredictable:

It makes strings look like arrays (but they are not)
If no character is found, [ ] returns undefined, while charAt() returns an empty string.
It is read only. str[0] = "A" gives no error (but does not work!)
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Strings</h1>
<p>Property acces on strings are read only:</p>

<p id="demo"></p>

<script>
let text = "HELLO WORLD";

text[0] = "A";  // Does not work

document.getElementById("demo").innerHTML = text;
</script>

</body>
</html>

<!DOCTYPE html>
<html>
<body>

<h1>JavaScript String Methods</h1>
<p>Display the first array element, after a string split:</p>

<p id="demo"></p>

<script>
let text = "a,b,c,d,e,f";
const myArray = text.split(",");
document.getElementById("demo").innerHTML = myArray[0] + ' is an ' + myArray;
</script>

</body>
</html>

<!DOCTYPE html>
<html>
<body>

<h1>JavaScript String Methods</h1>
<p>Display the first array element, after a string split:</p>

<p id="demo"></p>

<script>
let text = "Jedy Brown";
const myArray = text.split(" "); //Split if you see space. so 0 is Jedy and 1 is Brown
document.getElementById("demo").innerHTML = myArray[0] + ' is in ' + myArray;
</script>

</body>
</html>

<!DOCTYPE html>
<html>
<body>

<h1>JavaScript String Methods</h1>
<p>Display the first array element, after a string split:</p>

<p id="demo"></p>

<script>
let text = "Jedy Brown";
const myArray = text.split(""); //Split if you see no  space. so 0 is J, 1 is e, 2 is d and so on. 
document.getElementById("demo").innerHTML = myArray[0] + ' is in ' + myArray;
</script>

</body>
</html>



text.split(",")    // Split on commas
text.split(" ")    // Split on spaces
text.split("|")    // Split on pipe

<!DOCTYPE html>
<html>
<body>

<h1>JavaScript String Methods</h1>
<h2>The split().Method</h2>

<p id="demo"></p>

<script>
let text = "Hello";
const myArr = text.split("");

text = "";
for (let i = 0; i < myArr.length; i++) {
  text += myArr[i] + "<br>"
}
document.getElementById("demo").innerHTML = text;
</script>

</body>
</html>
===============================
JavaScript String Search

JavaScript Search Methods
String indexOf()
String lastIndexOf()
String search()
String match()
String matchAll()
String includes()
String startsWith()
String endsWith()

==
1. JavaScript String indexOf()
The indexOf() method returns the index of (position of) the first occurrence of a string in a string.
Both indexOf(), and lastIndexOf() return -1 if the text is not found.
Both methods accept a second parameter as the starting position for the search.
The lastIndexOf() methods searches backwards (from the end to the beginning), meaning: if the second parameter is 15, the search starts at position 15, and searches to the beginning of the string.

2. JavaScript String search()
The search() method searches a string for a string (or a regular expression) and returns the position of the match. Return the position of the first occurrence of a string in a string.
Return the position of the first occurrence of a regular expression.

Did You Notice?
The two methods, indexOf() and search(), are equal?

They accept the same arguments (parameters), and return the same value?

The two methods are NOT equal. These are the differences:

The search() method cannot take a second start position argument.
The indexOf() method cannot take powerful search values (regular expressions).

3. JavaScript String match()
The match() method returns an array containing the results of matching a string against a string (or a regular expression).
Note
If a regular expression does not include the g modifier (global search), match() will return only the first match in the string.

4.JavaScript String matchAll()
The matchAll() method returns an iterator containing the results of matching a string against a string (or a regular expression).

5. JavaScript String includes()
The includes() method returns true if a string contains a specified value.

Otherwise it returns false.

6. JavaScript String startsWith()
The startsWith() method returns true if a string begins with a specified value.

Otherwise it returns false:

7. JavaScript String endsWith()
The endsWith() method returns true if a string ends with a specified value.

Otherwise it returns false


===================
JavaScript Template Literals

Synonyms:

Template Literals
Template Strings
String Templates
Back-Tics Syntax
======

Back-Tics Syntax
Template Literals use back-ticks (``) rather than the quotes ("") to define a string:
Example
let text = `Hello World!`;

Template literals use back-ticks (``) to define a string
Template literals are not supported in Internet Explorer.
e.g
<script>
let text = `Hello world!`;
document.getElementById("demo").innerHTML = text;
</script>

Quotes Inside Strings
With template literals, you can use both single and double quotes inside a string:

Example
let text = `He's often called "Johnny"`;

Multiline Strings
Template literals allows multiline strings:

Example
let text =
`The quick
brown fox
jumps over
the lazy dog`;


Interpolation
Template literals provide an easy way to interpolate variables and expressions into strings.

The method is called string interpolation.

The syntax is:

${...}

Variable Substitutions
Template literals allow variables in strings:

Example
let firstName = "John";
let lastName = "Doe";

let text = `Welcome ${firstName}, ${lastName}!`;
e.g
<script>
let firstName = "John";
let lastName = "Doe";

let text = `Welcome ${firstName}, ${lastName}!`;

document.getElementById("demo").innerHTML = text;
</script>

OR

<script>
let firstName = "John";
let lastName = "Doe";

 let text = `You are Welcome ${firstName + " " + lastName}!`;

document.getElementById("demo").innerHTML = text;
</script>




Automatic replacing of variables with real values is called string interpolation.

Expression Substitution
Template literals allow expressions in strings:

Example
let price = 10;
let VAT = 0.25;

let total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;

Automatic replacing of expressions with real values is called string interpolation.
E.G
<script>
let price = 10;
let VAT = 0.25;
let total = `Total Price to Pay is: ${(price * (1 + VAT)).toFixed(2)}`;    //.toFixed(2) rounds the num to 2decimal places

document.getElementById("demo").innerHTML = total;
</script>
Automatic replacing of expressions with real values is called string interpolation.


HTML Templates (To add HTML templates)
<script>
let header = "Templates Literals";
let tags = ["template literals", "javascript", "es6"];

let html = `<h2>${header}</h2><ul>`;

for (const x of tags) {
  html += `<li>${x}</li>`;
}

html += `</ul>`;
document.getElementById("demo").innerHTML = html;
</script>
===============
JavaScript Numbers
JavaScript has only one type of number. Numbers can be written with or without decimals.

Example
let x = 3.14;    // A number with decimals
let y = 3;       // A number without decimals

Extra large or extra small numbers can be written with scientific (exponent) notation:

Example
let x = 123e5;    // 12300000
let y = 123e-5;   // 0.00123

----------------
JavaScript Numbers are Always 64-bit Floating Point
Unlike many other programming languages, JavaScript does not define different types of numbers, like integers, short, long, floating-point etc.

JavaScript numbers are always stored as double precision floating point numbers, following the international IEEE 754 standard.

This format stores numbers in 64 bits, where the number (the fraction) is stored in bits 0 to 51, the exponent in bits 52 to 62, and the sign in bit 63:

Value (aka Fraction/Mantissa) Exponent  Sign
52 bits (0 - 51)  11 bits (52 - 62) 1 bit (63)

Integer Precision
Integers (numbers without a period or exponent notation) are accurate up to 15 digits.

Example
let x = 999999999999999;   // x will be 999999999999999
let y = 9999999999999999;  // y will be 10000000000000000

The maximum number of decimals is 17.

Floating Precision
Floating point arithmetic is not always 100% accurate:

let x = 0.2 + 0.1;

e.g 
<script>
let x = 0.2 + 0.1;
document.getElementById("demo").innerHTML = "0.2 + 0.1 = " + x; //ans: 0.2 + 0.1 = 0.30000000000000004
</script>
To solve the problem above, it helps to multiply and divide:

let x = (0.2 * 10 + 0.1 * 10) / 10;
e.g
<script>
let y = (0.2*10 + 0.1*10) / 10;
document.getElementById("demo2").innerHTML = "0.2 + 0.1 = " + y; //ans: 0.2 + 0.1 = 0.3
</script>

Adding Numbers and Strings
WARNING !!

JavaScript uses the + operator for both addition and concatenation.

Numbers are added. Strings are concatenated.

If you add two numbers, the result will be a number:

Example
let x = 10;
let y = 20;
let z = x + y; //z will be 30

If you add two strings, the result will be a string concatenation:

Example
let x = "10";
let y = "20";
let z = x + y; // z will be 1020

If you add a number and a string, the result will be a string concatenation:

Example
let x = 10;
let y = "20";
let z = x + y; //z will be 1020

If you add a string and a number, the result will be a string concatenation:

Example
let x = "10";
let y = 20;
let z = x + y;   //The result is: 1020

A common mistake is to expect this result to be 30:

Example
let x = 10;
let y = 20;
let z = "The result is: " + x + y;  //ans: 1020

A common mistake is to expect this result to be 102030:
Example
let x = 10;
let y = 20;
let z = "30";
let result = x + y + z;  //3030

Numeric Strings
JavaScript strings can have numeric content:

let x = 100;         // x is a number

let y = "100";       // y is a string
JavaScript will try to convert strings to numbers in all numeric operations:

This will work:

let x = "100";
let y = "10";
let z = x / y;
JavaScript will try to convert strings to numbers when dividing.

This will also work:

let x = "100";
let y = "10";
let z = x * y;

And this will work:

let x = "100";
let y = "10";
let z = x - y;

But this will not work:

let x = "100";
let y = "10";
let z = x + y;  
In the last example JavaScript uses the + operator to concatenate the strings.

NaN - Not a Number
NaN is a JavaScript reserved word indicating that a number is not a legal number.

Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number):

Example
let x = 100 / "Apple"; ans: NaN

However, if the string is numeric, the result will be a number:

Example
let x = 100 / "10";

You can use the global JavaScript function isNaN() to find out if a value is a not a number:

Example
let x = 100 / "Apple";
isNaN(x);

e.g <script>
let x = 100 / "Apple";
document.getElementById("demo").innerHTML = isNaN(x);
</script>


Watch out for NaN. If you use NaN in a mathematical operation, the result will also be NaN:

Example
let x = NaN;
let y = 5;
let z = x + y;

Or the result might be a concatenation like NaN5:

Example
let x = NaN;
let y = "5";
let z = x + y;

NaN is a number: typeof NaN returns number:

Example
typeof NaN;

Infinity
Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.

Example
<script>
let myNumber = 2; 
let txt = "";
while (myNumber != Infinity) {
   myNumber = myNumber * myNumber;
   txt = txt + myNumber + "<br>";
}
document.getElementById("demo").innerHTML = txt;
</script>

ans:
4
16
256
65536
4294967296
18446744073709552000
3.402823669209385e+38
1.157920892373162e+77
1.3407807929942597e+154
Infinity

Division by 0 (zero) also generates Infinity:

Example
let x =  2 / 0;
let y = -2 / 0;

<p>Division by zero generates Infinity;</p>

<p id="demo"></p>

<script>
let x = 2/0;
let y = -2/0;
document.getElementById("demo").innerHTML = x + "<br>" + y;
</script>
//ans: Infinity
//-Infinity
</body>

Infinity is a number: typeof Infinity returns number.

Example
typeof Infinity;

Hexadecimal
JavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.

Example
let x = 0xFF;

<script>
let x = 0xFF;
document.getElementById("demo").innerHTML = "0xFF = " + x; //ans: 0xFF = 255
</script>




Never write a number with a leading zero (like 07).
Some JavaScript versions interpret numbers as octal if they are written with a leading zero.

By default, JavaScript displays numbers as base 10 decimals.

But you can use the toString() method to output numbers from base 2 to base 36.

Hexadecimal is base 16. Decimal is base 10. Octal is base 8. Binary is base 2.

Example
let myNumber = 32;
myNumber.toString(32);
myNumber.toString(16);
myNumber.toString(12);
myNumber.toString(10);
myNumber.toString(8);
myNumber.toString(2);

====
<script>
let x = 15;
document.getElementById("demo").innerHTML = x.toString(16); //ans:f
</script>


JavaScript Numbers as Objects
Normally JavaScript numbers are primitive values created from literals:

let x = 123;
But numbers can also be defined as objects with the keyword new:

let y = new Number(123);
Example
let x = 123;
let y = new Number(123);

e.g
<script>
// x is a number
let x = 123;

// y is a Number object
let y = new Number(123);

document.getElementById("demo").innerHTML = typeof x + "<br>" + typeof y + "<br>" + "and the lenght is: " +  Number.length;
</script>

ans: 
number
object
and the lenght is: 1


so
Do not create Number objects.

The new keyword complicates the code and slows down execution speed.

Number Objects can produce unexpected results:

When using the == operator, x and y are equal:

let x = 500;
let y = new Number(500);

e.g
<script>
// x is a number
let x = 500;

// y is an object
let y = new Number(500);
document.getElementById("demo").innerHTML = (x==y); //ans: true
</script>

When using the === operator, x and y are not equal.
let x = 500;
let y = new Number(500);

e.g
<script>
// x is a number
let x = 500;

// y is an object
let y = new Number(500);

document.getElementById("demo").innerHTML = (x===y);
</script>


but
<script>
// x is an object
let x = new Number(500);

// y is an object
let y = new Number(500);

document.getElementById("demo").innerHTML = (x==y);  //false
</script>
JavaScript objects cannot be compared

<script>
// x is an object
let x = new Number(500);

// y is an object
let y = new Number(500);

document.getElementById("demo").innerHTML = (x===y); //false
</script>
Comparing two JavaScript objects always returns false.
=====
JavaScript BigInt variables are used to store big integer values that are too big to be represented by a normal JavaScript Number.

JavaScript Integer Accuracy
JavaScript integers are only accurate up to 15 digits:

Integer Precision
let x = 999999999999999;
let y = 9999999999999999; //this will round up to 10000000000000000

In JavaScript, all numbers are stored in a 64-bit floating-point format (IEEE 754 standard).

With this standard, large integer cannot be exactly represented and will be rounded.

Because of this, JavaScript can only safely represent integers:

Up to 9007199254740991 +(253-1)

and

Down to -9007199254740991 -(253-1).

Integer values outside this range lose precision.

How to Create a BigInt
To create a BigInt, append n to the end of an integer or call BigInt():

Examples
let x = 9999999999999999;
let y = 9999999999999999n;
let z = BigInt("999999999999999954444");

e.g 
<script>
let x = 9999999999999999; //ans: 10000000000000000
let y = BigInt("999999999999999954444"); //ans: 999999999999999954444
document.getElementById("demo").innerHTML = x + "<br>" + y;
</script>


=
const person = {
  name: 'John Doe',
  age: 30,
  email: 'john.doe@example.com',
};
console.log(person.name); // Output: 'John Doe'
console.log(person.age); // Output: 30
console.log(person['email']); // Output: 'john.doe@example.com'


// Adding a property
person.email = 'john@example.com';

// Modifying a property
person.age = 35;

// Deleting a property
delete person.address;



person.address = '123 Main St.';
console.log(person.address); // Output: '123 Main St.'

==========
JavaScript Number Methods
These number methods can be used on all JavaScript numbers:

Method  Description
toString()  Returns a number as a string
toExponential() Returns a number written in exponential notation
toFixed() Returns a number written with a number of decimals
toPrecision() Returns a number written with a specified length
ValueOf() Returns a number as a number

====
The toString() Method
The toString() method returns a number as a string.

All number methods can be used on any type of numbers (literals, variables, or expressions):

Example
let x = 123;
x.toString();
(123).toString();
(100 + 23).toString();

<script>
let x = 123;
let y = x.toString()
document.getElementById("demo").innerHTML =
  x.toString() + "<br>" +
   (123).toString() + "<br>" +
   (100 + 23).toString() + "<br>" + typeof(y);
</script>
ans:
123
123
123
string
====
The toExponential() Method
toExponential() returns a string, with a number rounded and written using exponential notation.

A parameter defines the number of characters behind the decimal point:

Example
<script>
let x = 9.656;
document.getElementById("demo").innerHTML =
  x.toExponential() + "<br>" + 
  x.toExponential(2) + "<br>" + 
  x.toExponential(4) + "<br>" + 
  x.toExponential(6);
</script>

An optional parameter defines the number of digits behind the decimal point.
ans
9.656e+0
9.66e+0
9.6560e+0
9.656000e+0
The parameter is optional. If you don't specify it, JavaScript will not round the number.

----
The toFixed() Method
toFixed() returns a string, with the number written with a specified number of decimals:

Example
<script>
let x = 9.656;
document.getElementById("demo").innerHTML =
  x.toFixed(0) + "<br>" +
  x.toFixed(2) + "<br>" +
  x.toFixed(4) + "<br>" +
  x.toFixed(6);
</script>

For working with money, toFixed(2) is perfect.
ans
10
9.66
9.6560
9.656000
=
The toPrecision() Method
toPrecision() returns a string, with a number written with a specified length:

Example
<script>
let x = 9.656;
document.getElementById("demo").innerHTML = 
  x.toPrecision() + "<br>" +
  x.toPrecision(2) + "<br>" +
  x.toPrecision(4) + "<br>" +
  x.toPrecision(6);  
</script>
ans:
9.656
9.7
9.656
9.65600
===

The valueOf() Method
valueOf() returns a number as a number.

Example
let x = 123;
x.valueOf();
(123).valueOf();
(100 + 23).valueOf();

In JavaScript, a number can be a primitive value (typeof = number) or an object (typeof = object).

The valueOf() method is used internally in JavaScript to convert Number objects to primitive values.

There is no reason to use it in your code.

All JavaScript data types have a valueOf() and a toString() method.
<script>
let x = 123;

document.getElementById("demo").innerHTML = 
  x.valueOf() + "<br>" +
  (123).valueOf() + "<br>" +
  (100 + 23).valueOf();
</script>
ans:
The valueOf() method returns a number as a number:

123
123
123

===
Converting Variables to Numbers
There are 3 JavaScript methods that can be used to convert a variable to a number:

Method  Description
Number()  Returns a number converted from its argument.
parseFloat()  Parses its argument and returns a floating point number
parseInt()  Parses its argument and returns a whole number
The methods above are not number methods. They are global JavaScript methods.

The Number() Method
The Number() method can be used to convert JavaScript variables to numbers:

Example
<script>
document.getElementById("demo").innerHTML = 
  Number(true) + "<br>" +
  Number(false) + "<br>" +
  Number("10") + "<br>" + 
  Number("  10") + "<br>" +
  Number("10  ") + "<br>" +
  Number(" 10  ") + "<br>" +
  Number("10.33") + "<br>" + 
  Number("10,33") + "<br>" +
  Number("10 33") + "<br>" +
  Number("John");
</script>
ans:
The Number() method converts variables to numbers:

1
0
10
10
10
10
10.33
NaN
NaN
NaN

If the number cannot be converted, NaN (Not a Number) is returned.

The Number() Method Used on Dates
Number() can also convert a date to a number.

Example
Number(new Date("1970-01-01"))
e.g
<script>
let x = new Date("1970-01-01");
let y = new Date("2023-03-21");
document.getElementById("demo").innerHTML = Number(x) + "<br>" + Number(y); 
</script>
ans:
0
1679356800000
Note
The Date() method returns the number of milliseconds since 1.1.1970.

The number of milliseconds between 1970-01-02 and 1970-01-01 is 86400000.

==
The parseInt() Method
parseInt() parses a string and returns a whole number. Spaces are allowed. Only the first number is returned:

Example
<script>
document.getElementById("demo").innerHTML = 
  parseInt("-10") + "<br>" +
  parseInt("-10.33") + "<br>" +
  parseInt("10") + "<br>" +
  parseInt("10.33") + "<br>" +
  parseInt("10 6") + "<br>" +  
  parseInt("10 years") + "<br>" +  
  parseInt("years 10");  
</script>
ans
The global JavaScript function parseInt() converts strings to numbers:

-10
-10
10
10
10
10
NaN


===
The parseFloat() Method
parseFloat() parses a string and returns a number i.e float number. Spaces are allowed. Only the first number is returned:

Example

<script>
document.getElementById("demo").innerHTML = 
  parseFloat("10") + "<br>" +
  parseFloat("10.33") + "<br>" +
  parseFloat("10 6") + "<br>" +  
  parseFloat("10 years") + "<br>" +
  parseFloat("years 10");    
</script>
ans
The parseFloat() method converts strings to numbers:

10
10.33
10
10
NaN

Number Object Methods
These object methods belong to the Number object:

Method  Description
Number.isInteger()  Returns true if the argument is an integer
Number.isSafeInteger()  Returns true if the argument is a safe integer
Number.parseFloat() Converts a string to a number
Number.parseInt() Converts a string to a whole number
Number Methods Cannot be Used on Variables
The number methods above belong to the JavaScript Number Object.

These methods can only be accessed like Number.isInteger().

Using X.isInteger() where X is a variable, will result in an error:

TypeError X.isInteger is not a function.

The Number.isInteger() Method
The Number.isInteger() method returns true if the argument is an integer.

Example
<script>
document.getElementById("demo").innerHTML =
Number.isInteger(10) + "<br>" + Number.isInteger(10.5);
</script>
The isInteger() method returns true if the argument is an integer.

Otherwise it returns false.
or 
<script>
let x = 10;
let y = "Hello";
document.getElementById("demo").innerHTML =
Number.isInteger(x) + "<br>" + Number.isInteger(y);
</script>
gives same ans.

-====
The Number.isSafeInteger() Method
A safe integer is an integer that can be exactly represented as a double precision number.

The Number.isSafeInteger() method returns true if the argument is a safe integer.

Example
Number.isSafeInteger(10);
Number.isSafeInteger(12345678901234567890);
e.g
<script>
document.getElementById("demo").innerHTML =
Number.isSafeInteger(10) + "<br>" + Number.isSafeInteger(12345678901234567890);
</script>
true
false
The Number.MAX_SAFE_INTEGER static data property represents the maximum safe integer in JavaScript (253 – 1).
A safe integer is an integer that can be exactly represented as an IEEE-754 double precision number: all integers from (2 power 53 - 1) to -(2power 53 - 1).
This is safe: 9007199254740991. This is not safe: 9007199254740992.
==
The Number.parseFloat() Method
Number.parseFloat() parses a string and returns a number.

Spaces are allowed. Only the first number is returned:

Example

<script>
document.getElementById("demo").innerHTML = 
Number.parseFloat("10") + "<br>" +
Number.parseFloat("10.33") + "<br>" +
Number.parseFloat("10 20 30") + "<br>" +
Number.parseFloat("10 years") + "<br>" +
Number.parseFloat("years 10");
</script>
10
10.33
10
10
NaN
Note
The Number methods Number.parseInt() and Number.parseFloat()

are the same as the

Global methods parseInt() and parseFloat().

The purpose is modularization of globals (to make it easier to use the same JavaScript code outside the browser).
The Number.parseInt() Method
Number.parseInt() parses a string and returns a whole number.

Spaces are allowed. Only the first number is returned:

Example
Number.parseInt("-10");
Number.parseInt("-10.33");
Number.parseInt("10");
Number.parseInt("10.33");
Number.parseInt("10 20 30");
Number.parseInt("10 years");
Number.parseInt("years 10");

=============
JavaScript Number Properties

Property  Description
EPSILON The difference between 1 and the smallest number > 1.
MAX_VALUE The largest number possible in JavaScript
MIN_VALUE The smallest number possible in JavaScript
MAX_SAFE_INTEGER  The maximum safe integer (253 - 1)
MIN_SAFE_INTEGER  The minimum safe integer -(253 - 1)
POSITIVE_INFINITY Infinity (returned on overflow)
NEGATIVE_INFINITY Negative infinity (returned on overflow)
NaN A "Not-a-Number" value

JavaScript EPSILON
Number.EPSILON is the difference between 1 and the smallest floating point number greater than 1.

Example
let x = Number.EPSILON;
<script>
let x = Number.EPSILON;
document.getElementById("demo").innerHTML = x;
</script>
The difference between 1 and the smallest floating point number greater than 1, in JavaScript is:

2.220446049250313e-16
The Number.EPSILON property
JavaScript uses binary floating-point representation with the result that computers fail to accurately represent numbers such as 0.1, 0.2, 0.3, and so on. When your code is executed, numbers such as 0.1 are rounded to the nearest number in that format, which results in a small rounding error. Consider this example:

console.log(0.1 + 0.2 == 0.3);console.log(0.9 - 0.8 == 0.1);console.log(0.1 + 0.2);console.log(0.9 - 0.8);
The output is as follows:

false false0.300000000000000040.09999999999999998
The Number.EPSILON property was introduced in ES6, and has a value of approximately 2-52. This value represents a reasonable margin of error when comparing floating-point numbers. Using this number, we can create a custom ...
Number.EPSILON
EPSILON is a property of the JavaScript Number object.

You can only use it as Number.EPSILON.

Using x.EPSILON, where x is a variable, will return undefined:

Example
let x = 100;
x.EPSILON;
e.g
<script>
let x = 100; 
document.getElementById("demo").innerHTML = x.EPSILON;
</script>
undefined

ALSO,
const result = Math.abs(0.2 - 0.3 + 0.1);

console.log(result);
// Expected output: 2.7755575615628914e-17

console.log(result < Number.EPSILON);
// Expected output: true
===
In JavaScript, Number.EPSILON is a small positive number that represents the difference between 1 and the smallest value greater than 1 that can be represented as a Number data type.

Number.EPSILON is useful when comparing floating-point numbers for equality, because the representation of floating-point numbers in JavaScript is not always exact. Due to the way floating-point numbers are stored in memory, small differences in the least significant digits of two numbers can result in them being considered unequal, even though they might be mathematically equal.

To avoid this issue, you can use Number.EPSILON as a tolerance value when comparing floating-point numbers. For example, you can use it in combination with the Math.abs() function to determine if two numbers are "close enough" to be considered equal:

function areEqual(a, b) {
  return Math.abs(a - b) < Number.EPSILON;
}

console.log(areEqual(0.1 + 0.2, 0.3)); // true

In this example, areEqual() uses Number.EPSILON to determine if the difference between a and b is small enough to be considered negligible.
==========
JavaScript MAX_VALUE
Number.MAX_VALUE is a constant representing the largest possible number in JavaScript.

Example
let x = Number.MAX_VALUE;
<script>
let x = Number.MAX_VALUE;
document.getElementById("demo").innerHTML = x;
</script>

Number Properties Cannot be Used on Variables
Number properties belong to the JavaScript Number Object.
The largest possible number in JavaScript is:

1.7976931348623157e+308

These properties can only be accessed as Number.MAX_VALUE.

Using x.MAX_VALUE, where x is a variable or a value, will return undefined.
===========
JavaScript MIN_VALUE
Number.MIN_VALUE is a constant representing the lowest possible number in JavaScript.

Example
let x = Number.MIN_VALUE;

ans: 5e-324
===
JavaScript MAX_SAFE_INTEGER
Number.MAX_SAFE_INTEGER represents the maximum safe integer in JavaScript.

Number.MAX_SAFE_INTEGER is (253 - 1).

Example
let x = Number.MAX_SAFE_INTEGER;
JavaScript MIN_SAFE_INTEGER
Number.MIN_SAFE_INTEGER represents the minimum safe integer in JavaScript.

Number.MIN_SAFE_INTEGER is -(253 - 1).

Example
let x = Number.MIN_SAFE_INTEGER;
Note
MAX_SAFE_INTEGER and MIN_SAFE_INTEGER are ES6 features.

They do not work in Internet Explorer.

====
JavaScript POSITIVE_INFINITY
Example
let x = Number.POSITIVE_INFINITY;
POSITIVE_INFINITY is returned on overflow:

let x = 1 / 0;
<script>
let x = Number.POSITIVE_INFINITY;
document.getElementById("demo").innerHTML = x;
</script>
<script>
let x = 1 / 0;
document.getElementById("demo").innerHTML = x;
</script>
ans: infinity
=====
JavaScript NEGATIVE_INFINITY
Example
let x = Number.NEGATIVE_INFINITY;
NEGATIVE_INFINITY is returned on overflow:

let x = -1 / 0;
<script>
let x = -1 / 0;
document.getElementById("demo").innerHTML = x;
</script>
ans: -infinity
====
JavaScript NaN - Not a Number
NaN is a JavaScript reserved word for a number that is not a legal number.

Examples
let x = Number.NaN;
Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number):

let x = 100 / "Apple";

=======
----------------------JavaScript Arrays-----------------------------

An array is a special variable, which can hold more than one value:

const cars = ["Saab", "Volvo", "BMW"];
==
<script>
const cars = ["Saab", "Volvo", "BMW"];
document.getElementById("demo").innerHTML = cars;
</script>
ans: Saab, Volvo, BMW

<script>
const cars = ["Saab", "Volvo", "BMW"];
document.getElementById("demo").innerHTML = cars[0];
</script>
ans: Saab
==
It is a common practice to declare arrays with the const keyword.
You can also create an array, and then provide the elements:

Example
const cars = [];
cars[0]= "Saab";
cars[1]= "Volvo";
cars[2]= "BMW";
Using the JavaScript Keyword new
The following example also creates an Array, and assigns values to it:

Example
const cars = new Array("Saab", "Volvo", "BMW");
The two examples above do exactly the same.

There is no need to use new Array().

For simplicity, readability and execution speed, use the array literal method.
Accessing Array Elements
You access an array element by referring to the index number:

const cars = ["Saab", "Volvo", "BMW"];
let car = cars[0];
Note: Array indexes start with 0.

[0] is the first element. [1] is the second element.
Changing an Array Element
This statement changes the value of the first element in cars:

cars[0] = "Opel";
Example
const cars = ["Saab", "Volvo", "BMW"];
cars[0] = "Opel";
Access the Full Array
With JavaScript, the full array can be accessed by referring to the array name:

Example
const cars = ["Saab", "Volvo", "BMW"];
document.getElementById("demo").innerHTML = cars;

==
Arrays are Objects
Arrays are a special type of objects. The typeof operator in JavaScript returns "object" for arrays.

But, JavaScript arrays are best described as arrays.

Arrays use numbers to access its "elements". In this example, person[0] returns John:

Array:
const person = ["John", "Doe", 46];
Objects use names to access its "members". In this example, person.firstName returns John:

Object:
const person = {firstName:"John", lastName:"Doe", age:46};

Array Elements Can Be Objects
JavaScript variables can be objects. Arrays are special kinds of objects.

Because of this, you can have variables of different types in the same Array.

You can have objects in an Array. You can have functions in an Array. You can have arrays in an Array:

myArray[0] = Date.now;
myArray[1] = myFunction;
myArray[2] = myCars;
Array Properties and Methods
The real strength of JavaScript arrays are the built-in array properties and methods:

cars.length   // Returns the number of elements
cars.sort()   // Sorts the array
Array methods are covered in the next chapters.

The length Property
The length property of an array returns the length of an array (the number of array elements).

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let length = fruits.length;
===
<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.length;
</script>
The length property is always one more than the highest array index.

Accessing the First Array Element
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits[0];

Accessing the Last Array Element
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits[fruits.length - 1];

===
Looping Array Elements
One way to loop through an array, is using a for loop:

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fLen = fruits.length;

let text = "<ul>";
for (let i = 0; i < fLen; i++) {
  text += "<li>" + fruits[i] + "</li>";
}
text += "</ul>";
===
<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fLen = fruits.length;

let text = "<ul>";
let i  ;
for (i = 0; i < fLen; i++) {
  text += "<li>" + fruits[i] + "</li>";
}
text += "</ul>";

document.getElementById("demo").innerHTML = text;
</script>

or
You can also use the Array.forEach() function:
<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];

let text = "<ul>";
fruits.forEach(myFunction);
text += "</ul>";

document.getElementById("demo").innerHTML = text;

function myFunction(value) {
  text += "<li>" + value + "</li>";
} 
</script>
==
Adding Array Elements
The easiest way to add a new element to an array is using the push() method:

Example
const fruits = ["Banana", "Orange", "Apple"];
fruits.push("Lemon");  // Adds a new element (Lemon) to fruits

New element can also be added to an array using the length property:

Example
const fruits = ["Banana", "Orange", "Apple"];
fruits[fruits.length] = "Lemon";  // Adds "Lemon" to fruits
==
WARNING !
Adding elements with high indexes can create undefined "holes" in an array:

Example
const fruits = ["Banana", "Orange", "Apple"];
fruits[6] = "Lemon";  // Creates undefined "holes" in fruits
<script>
const fruits = ["Banana", "Orange", "Apple"];
fruits[6] = "Lemon";

let fLen = fruits.length;
let text = "";
for (i = 0; i < fLen; i++) {
  text += fruits[i] + "<br>";
}

document.getElementById("demo").innerHTML = text;
</script>
==
Associative Arrays
Many programming languages support arrays with named indexes.

Arrays with named indexes are called associative arrays (or hashes).

JavaScript does not support arrays with named indexes.

In JavaScript, arrays always use numbered indexes.  

Example
const person = [];
person[0] = "John";
person[1] = "Doe";
person[2] = 46;
person.length;    // Will return 3
person[0];        // Will return "John"
WARNING !!
If you use named indexes, JavaScript will redefine the array to an object.

After that, some array methods and properties will produce incorrect results.

 Example:
const person = [];
person["firstName"] = "John";
person["lastName"] = "Doe";
person["age"] = 46;
person.length;     // Will return 0
person[0];         // Will return undefined
==

The Difference Between Arrays and Objects
In JavaScript, arrays use numbered indexes.  

In JavaScript, objects use named indexes.

Arrays are a special kind of objects, with numbered indexes.

When to Use Arrays. When to use Objects.
JavaScript does not support associative arrays.
You should use objects when you want the element names to be strings (text).
You should use arrays when you want the element names to be numbers.
JavaScript new Array()
JavaScript has a built-in array constructor new Array().

But you can safely use [] instead.

These two different statements both create a new empty array named points:

const points = new Array();
const points = [];
These two different statements both create a new array containing 6 numbers:

const points = new Array(40, 100, 1, 5, 25, 10);
const points = [40, 100, 1, 5, 25, 10];

The new keyword can produce some unexpected results:

// Create an array with three elements:
const points = new Array(40, 100, 1);
// Create an array with two elements:
const points = new Array(40, 100);

A Common Error
const points = [40];
is not the same as:

const points = new Array(40);
// Create an array with one element:
const points = [40];
ans: document.getElementById("demo").innerHTML = points[0]; is 40


// Create an array with 40 undefined elements:
const points = new Array(40); 
ans: document.getElementById("demo").innerHTML = points[0]; is undefined

==
How to Recognize an Array
A common question is: How do I know if a variable is an array?

The problem is that the JavaScript operator typeof returns "object":

const fruits = ["Banana", "Orange", "Apple"];
let type = typeof fruits;
The typeof operator returns object because a JavaScript array is an object.

Solution 1:
To solve this problem ECMAScript 5 (JavaScript 2009) defined a new method Array.isArray():

Array.isArray(fruits);

==
<script>
const fruits = ["Banana", "Orange", "Apple"];
document.getElementById("demo").innerHTML = Array.isArray(fruits);
</script>
ans: true

or
Solution 2:
The instanceof operator returns true if an object is created by a given constructor:

const fruits = ["Banana", "Orange", "Apple"];

fruits instanceof Array;
e.g
<script>
var fruits = ["Banana", "Orange", "Apple"];
document.getElementById("demo").innerHTML = fruits instanceof Array;
</script> 



================================
Converting Arrays to Strings
The JavaScript method toString() converts an array to a string of (comma separated) array values.

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();
Result:

Banana,Orange,Apple,Mango
so we will have:


<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let myFruits = fruits.toString();
document.getElementById("demo").innerHTML = fruits + "<br> " + myFruits + " " +  " typeof fruits is: " + typeof fruits + "<br>" +  "typeof myFruits is:" + typeof myFruits;
</script>
====
The join() method also joins all array elements into a string.

It behaves just like toString(), but in addition you can specify the separator:

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.join(" * ");
Result:

Banana * Orange * Apple * Mango

====
Popping and Pushing
When you work with arrays, it is easy to remove elements and add new elements.

This is what popping and pushing is:

Popping items out of an array, or pushing items into an array.

JavaScript Array pop()
The pop() method removes the last element from an array:

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.pop();
===
<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo1").innerHTML = fruits;
fruits.pop();
document.getElementById("demo2").innerHTML = fruits;
</script>

ans:
Banana,Orange,Apple,Mango

Banana,Orange,Apple
========
JavaScript Array push()
The push() method adds a new element to an array (at the end):

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.push("Kiwi");
===Shifting Elements
Shifting is equivalent to popping, but working on the first element instead of the last.

JavaScript Array shift()
The shift() method removes the first array element and "shifts" all other elements to a lower index.

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.shift();
----
<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo1").innerHTML = fruits.shift();
document.getElementById("demo2").innerHTML = fruits;
</script>
Banana

Orange,Apple,Mango
====
JavaScript Array unshift()
The unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements:

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.unshift("Lemon");
===
Changing Elements
Array elements are accessed using their index number:

Array indexes start with 0:

[0] is the first array element
[1] is the second
[2] is the third ...

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits[0] = "Kiwi";
===
JavaScript Array length
The length property provides an easy way to append a new element to an array:

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits[fruits.length] = "Kiwi";
===JavaScript Array delete()
Warning !
Array elements can be deleted using the JavaScript operator delete.

Using delete leaves undefined holes in the array.

Use pop() or shift() instead.

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
delete fruits[0];

<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];

document.getElementById("demo1").innerHTML =
"The first fruit is: " + fruits[0];

delete fruits[0];

document.getElementById("demo2").innerHTML =
"The first fruit is: " + fruits[0];
</script>
The first fruit is: Banana

The first fruit is: undefined
===
Merging (Concatenating) Arrays
The concat() method creates a new array by merging (concatenating) existing arrays:

Example (Merging Two Arrays)
const myGirls = ["Cecilie", "Lone"];
const myBoys = ["Emil", "Tobias", "Linus"];

const myChildren = myGirls.concat(myBoys);
document.getElementById("demo").innerHTML = myChildren;


The concat() method does not change the existing arrays. It always returns a new array.

The concat() method can take any number of array arguments:

Example (Merging Three Arrays)
const arr1 = ["Cecilie", "Lone"];
const arr2 = ["Emil", "Tobias", "Linus"];
const arr3 = ["Robin", "Morgan"];
const myChildren = arr1.concat(arr2, arr3);

The concat() method can also take strings as arguments:

Example (Merging an Array with Values)
const arr1 = ["Emil", "Tobias", "Linus"];
const myChildren = arr1.concat("Peter"); 

===
Flattening an Array
Flattening an array is the process of reducing the dimensionality of an array.

The flat() method creates a new array with sub-array elements concatenated to a specified depth.

Example
const myArr = [[1,2],[3,4],[5,6]];
const newArr = myArr.flat();
---
<script>
const myArr = [[1,2],[3,4],[5,6]];

const newArr = myArr.flat();
document.getElementById("demo").innerHTML = newArr;
</script>
1,2,3,4,5,6
===
Splicing and Slicing Arrays
The splice() method adds new items to an array.

The slice() method slices out a piece of an array.

JavaScript Array splice()
The splice() method can be used to add new items to an array:

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi");

<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo1").innerHTML = fruits;

fruits.splice(2, 0, "Lemon", "Kiwi");
document.getElementById("demo2").innerHTML = fruits;
</script>
Banana,Orange,Apple,Mango

Banana,Orange,Lemon,Kiwi,Apple,Mango


The first parameter (2) defines the position where new elements should be added (spliced in).

The second parameter (0) defines how many elements should be removed.

The rest of the parameters ("Lemon" , "Kiwi") define the new elements to be added.

The splice() method returns an array with the deleted items:

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 2, "Lemon", "Kiwi");



<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo1").innerHTML = "Original Array:<br> " + fruits;
let removed = fruits.splice(2, 2, "Lemon", "Kiwi"); 
document.getElementById("demo2").innerHTML = "New Array:<br>" + fruits;
document.getElementById("demo3").innerHTML = "Removed Items:<br> " + removed; 
</script>
Original Array:
Banana,Orange,Apple,Mango

New Array:
Banana,Orange,Lemon,Kiwi

Removed Items:
Apple,Mango
---
Using splice() to Remove Elements
With clever parameter setting, you can use splice() to remove elements without leaving "holes" in the array:

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(0, 1);
The first parameter (0) defines the position where new elements should be added (spliced in).

The second parameter (1) defines how many elements should be removed.

The rest of the parameters are omitted. No new elements will be added.

===============
JavaScript Array slice()
The slice() method slices out a piece of an array into a new array.

This example slices out a part of an array starting from array element 1 ("Orange"):

Example
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(1);

<script>
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(1);
document.getElementById("demo").innerHTML = fruits + "<br><br>" + citrus;
</script>
Banana,Orange,Lemon,Apple,Mango

Orange,Lemon,Apple,Mango

Note
The slice() method creates a new array.

The slice() method does not remove any elements from the source array.

This example slices out a part of an array starting from array element 3 ("Apple"):

Example
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(3);
The slice() method can take two arguments like slice(1, 3).

The method then selects elements from the start argument, and up to (but not including) the end argument.

Example
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(1, 3);
===
Automatic toString()
JavaScript automatically converts an array to a comma separated string when a primitive value is expected.

This is always the case when you try to output an array.

These two examples will produce the same result:

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits;
Note
All JavaScript objects have a toString() method.

===
JavaScript Sorting Arrays
Sorting an Array
The sort() method sorts an array alphabetically:

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.sort();
==
Reversing an Array
The reverse() method reverses the elements in an array.

You can use it to sort an array in descending order:

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.sort();
fruits.reverse();

=======
Numeric Sort
By default, the sort() function sorts values as strings.

This works well for strings ("Apple" comes before "Banana").

However, if numbers are sorted as strings, "25" is bigger than "100", because "2" is bigger than "1".

Because of this, the sort() method will produce incorrect result when sorting numbers.

You can fix this by providing a compare function:

Example
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a - b});
----
<script>
const points = [40, 100, 1, 5, 25, 10];
document.getElementById("demo1").innerHTML = points;  

points.sort(function(a, b){
return a - b
});
document.getElementById("demo2").innerHTML = points;
</script>
---
Use the same trick to sort an array descending:
<script>
const points = [40, 100, 1, 5, 25, 10];
document.getElementById("demo1").innerHTML = points;  

points.sort(function(a, b){
return b - a
});
document.getElementById("demo2").innerHTML = points;
</script>

The Compare Function
The purpose of the compare function is to define an alternative sort order.

The compare function should return a negative, zero, or positive value, depending on the arguments:

function(a, b){return a - b}
When the sort() function compares two values, it sends the values to the compare function, and sorts the values according to the returned (negative, zero, positive) value.

If the result is negative, a is sorted before b.

If the result is positive, b is sorted before a.

If the result is 0, no changes are done with the sort order of the two values.

Example:

The compare function compares all the values in the array, two values at a time (a, b).

When comparing 40 and 100, the sort() method calls the compare function(40, 100).

The function calculates 40 - 100 (a - b), and since the result is negative (-60),  the sort function will sort 40 as a value lower than 100.


--------
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array Sort</h2>

<p>Click the buttons to sort the array alphabetically or numerically.</p>

<button onclick="myFunction1()">Sort Alphabetically</button>
<button onclick="myFunction2()">Sort Numerically</button>

<p id="demo"></p>

<script>
const points = [40, 100, 1, 5, 25, 10];
document.getElementById("demo").innerHTML = points;  

function myFunction1() {
  points.sort();
  document.getElementById("demo").innerHTML = points;
}
function myFunction2() {
  points.sort(function(a, b){return a - b});
  document.getElementById("demo").innerHTML = points;
}
</script>

</body>
</html>

Ans alphabetically 1,10,100,25,40,5
Ans numerically 1,5,10,25,40,100
-=====
Sorting an Array in Random Order
Example
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(){return 0.5 - Math.random()});
--
<script>
const points = [40, 100, 1, 5, 25, 10];
document.getElementById("demo").innerHTML = points;  

function myFunction() {
  points.sort(function(){
  return 0.5 - Math.random()
  });
  document.getElementById("demo").innerHTML = points;
}
---
The Fisher Yates Method
The above example, array.sort(), is not accurate. It will favor some numbers over the others.

The most popular correct method, is called the Fisher Yates shuffle, and was introduced in data science as early as 1938!

In JavaScript the method can be translated to this:

Example
const points = [40, 100, 1, 5, 25, 10];

for (let i = points.length -1; i > 0; i--) {
  let j = Math.floor(Math.random() * (i+1));
  let k = points[i];
  points[i] = points[j];
  points[j] = k;
}

<button onclick="myFunction()">Try it</button>
<p id="demo"></p>

<script>
const points = [40, 100, 1, 5, 25, 10];
document.getElementById("demo").innerHTML = points;  

function myFunction() {
  for (let i = points.length -1; i > 0; i--) {
    let j = Math.floor(Math.random() * (i+1));
    let k = points[i];
    points[i] = points[j];
    points[j] = k;
  }
  document.getElementById("demo").innerHTML = points;
}
</script>
---
Find the Highest (or Lowest) Array Value
There are no built-in functions for finding the max or min value in an array.

However, after you have sorted an array, you can use the index to obtain the highest and lowest values.

Sorting ascending:

Example
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a - b});
// now points[0] contains the lowest value
// and points[points.length-1] contains the highest value
----
<script>
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){
return a-b}
);
document.getElementById("demo").innerHTML = points[0];
</script>

<script>
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){
return a-b}
);
document.getElementById("demo").innerHTML = points[points.length-1];
</script>
----
Sorting a whole array is a very inefficient method if you only want to find the highest (or lowest) value.

Using Math.max() on an Array
You can use Math.max.apply to find the highest number in an array:

Example
function myArrayMax(arr) {
  return Math.max.apply(null, arr);
}

<script>
const points = [40, 100, 1, 5, 25, 10];
document.getElementById("demo").innerHTML = myArrayMax(points);

function myArrayMax(arr) {
  return Math.max.apply(null, arr);
}
</script>

--
Math.max.apply(null, [1, 2, 3]) is equivalent to Math.max(1, 2, 3).

Using Math.min() on an Array
You can use Math.min.apply to find the lowest number in an array:

Example
function myArrayMin(arr) {
  return Math.min.apply(null, arr);
}
---

<p>The lowest number is <span id="demo"></span>.</p>

<script>
const points = [40, 100, 1, 5, 25, 10];
document.getElementById("demo").innerHTML = myArrayMin(points);

function myArrayMin(arr) {
  return Math.min.apply(null, arr);
}
</script>

Note: if you dont use null, it will return infinity

Math.min.apply(null, [1, 2, 3]) is equivalent to Math.min(1, 2, 3).
--
My Min / Max JavaScript Methods
The fastest solution is to use a "home made" method.

This function loops through an array comparing each value with the highest value found:

Example (Find Max)
function myArrayMax(arr) {
  let len = arr.length;
  let max = -Infinity;
  while (len--) {
    if (arr[len] > max) {
      max = arr[len];
    }
  }
  return max;
}

<script>
const points = [40, 100, 1, 5, 25, 10];
document.getElementById("demo").innerHTML = myArrayMax(points);

function myArrayMax(arr) {
  let len = arr.length;
  let max = -Infinity;
  while (len--) {
    if (arr[len] > max) {
      max = arr[len];
    }
  }
  return max;
}
</script>

This function loops through an array comparing each value with the lowest value found:

Example (Find Min)
function myArrayMin(arr) {
  let len = arr.length;
  let min = Infinity;
  while (len--) {
    if (arr[len] < min) {
      min = arr[len];
    }
  }
  return min;
}
---==
Sorting Object Arrays
JavaScript arrays often contain objects:

Example
const cars = [
  {type:"Volvo", year:2016},
  {type:"Saab", year:2001},
  {type:"BMW", year:2010}
];
Even if objects have properties of different data types, the sort() method can be used to sort the array.

The solution is to write a compare function to compare the property values:

Example
cars.sort(function(a, b){return a.year - b.year});

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array Sort</h2>
<p>Sort car objects on age:</p>

<p id="demo"></p>

<script>
const cars = [
  {type:"Volvo", year:2016},
  {type:"Saab", year:2001},
  {type:"BMW", year:2010}
];

displayCars();

cars.sort(function(a, b){return a.year - b.year});
displayCars();

function displayCars() {
  document.getElementById("demo").innerHTML =
  cars[0].type + " " + cars[0].year + "<br>" +
  cars[1].type + " " + cars[1].year + "<br>" +
  cars[2].type + " " + cars[2].year;
}
</script>

</body>
</html>

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array Sort</h2>
<p>Click the buttons to sort car objects on type.</p>

<button onclick="myFunction()">Sort</button>
<p id="demo"></p>

<script>
const cars = [
  {type:"Volvo", year:2016},
  {type:"Saab", year:2001},
  {type:"BMW", year:2010}
];

displayCars();

function myFunction() {
  cars.sort(function(a, b){
    let x = a.type.toLowerCase();
    let y = b.type.toLowerCase();
    if (x < y) {return -1;}
    if (x > y) {return 1;}
    return 0;
  });
  displayCars();
}

function displayCars() {
  document.getElementById("demo").innerHTML =
  cars[0].type + " " + cars[0].year + "<br>" +
  cars[1].type + " " + cars[1].year + "<br>" +
  cars[2].type + " " + cars[2].year;
}
</script>

</body>
</html>


<!DOCTYPE html>
<html>
<body>
<h1>JavaScript Strings</h1>

<p>From ES2019, browsers must use a stable sorting algorithm.</p>
<p>When sorting elements on a key, the elements must keep their relative position to other objects with the same key.</p>

<p id="demo"></p>

<script>

const myArr = [
  {name:"X00",price:100 },
  {name:"X01",price:100 },
  {name:"X02",price:100 },
  {name:"X03",price:100 },
  {name:"X04",price:110 },
  {name:"X05",price:110 },
  {name:"X06",price:110 },
  {name:"X07",price:110 },
  {name:"X08",price:120 },
  {name:"X09",price:120 },
  {name:"X10",price:120 },
  {name:"X11",price:120 },
  {name:"X12",price:130 },
  {name:"X13",price:130 },
  {name:"X14",price:130 },
  {name:"X15",price:130 },
  {name:"X16",price:140 },
  {name:"X17",price:140 },
  {name:"X18",price:140 },
  {name:"X19",price:140 }
];

myArr.sort( (p1, p2) => {
  if (p1.price < p2.price) return -1;
  if (p1.price > p2.price) return 1;
  return 0;
});

let txt = "";
myArr.forEach(myFunction);

function myFunction(value) {
  txt += value.name + " " + value.price + "<br>"; 
}
document.getElementById("demo").innerHTML = txt;
</script>

</body>
</html>


In the example above, when sorting on price, the result is not allowed to come out with the names in an other relelative position like like this:

X01 100
X03 100
X00 100
X03 100
X05 110
X04 110
X06 110
X07 110

=====
JavaScript Array Iteration
Array iteration methods operate on every array item.

JavaScript Array forEach()
The forEach() method calls a function (a callback function) once for each array element.

Example
const numbers = [45, 4, 9, 16, 25];
let txt = "";
numbers.forEach(myFunction);

function myFunction(value, index, array) {
  txt += value + "<br>";
}


<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array.forEach()</h2>
<p>Calls a function once for each array element.</p>

<p id="demo"></p>

<script>
const numbers = [45, 4, 9, 16, 25];

let txt = "";
numbers.forEach(myFunction);
document.getElementById("demo").innerHTML = txt;

function myFunction(value, index, array) {
  txt += value + "<br>"; 
}
</script>

</body>
</html>
45
4
9
16
25

Note that the function takes 3 arguments:

The item value
The item index
The array itself
The example above uses only the value parameter. The example can be rewritten to:

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array.forEach()</h2>
<p>Calls a function once for each array element.</p>

<p id="demo"></p>

<script>
const numbers = [45, 4, 9, 16, 25];

let txt = "";
numbers.forEach(myFunction);
document.getElementById("demo").innerHTML = txt;

function myFunction(value) {
  txt += value + "<br>"; 
}
</script>

</body>
</html>

----
JavaScript Array map()
The map() method creates a new array by performing a function on each array element.

The map() method does not execute the function for array elements without values.

The map() method does not change the original array.

This example multiplies each array value by 2:

Example
const numbers1 = [45, 4, 9, 16, 25];
const numbers2 = numbers1.map(myFunction);

function myFunction(value, index, array) {
  return value * 2;
}

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array.map()</h2>
<p>Creates a new array by performing a function on each array element.</p>

<p id="demo"></p>

<script>
const numbers1 = [45, 4, 9, 16, 25];
const numbers2 = numbers1.map(myFunction);

document.getElementById("demo").innerHTML = numbers2;

function myFunction(value, index, array) {
  return value * 2;
}
</script>

</body>
</html>

Note that the function takes 3 arguments:

The item value
The item index
The array itself
When a callback function uses only the value parameter, the index and array parameters can be omitted:

Example
const numbers1 = [45, 4, 9, 16, 25];
const numbers2 = numbers1.map(myFunction);

function myFunction(value) {
  return value * 2;
}
--==
avaScript Array flatMap()
ES2019 added the Array flatMap() method to JavaScript.

The flatMap() method first maps all elements of an array and then creates a new array by flattening the array.

Example
const myArr = [1, 2, 3, 4, 5, 6];
const newArr = myArr.flatMap((x) => x * 2);


<!DOCTYPE html>
<html>
<body>
<h1>JavaScript Arrays</h1>
<h2>The flatMap() Method</h2>

<p id="demo"></p>

<script>
const myArr = [1, 2, 3, 4, 5,6];
const newArr = myArr.flatMap((x) => x * 2);
document.getElementById("demo").innerHTML = newArr;
</script>

</body>
</html>


===
JavaScript Array filter()
The filter() method creates a new array with array elements that pass a test.

This example creates a new array from elements with a value larger than 18:

Example
const numbers = [45, 4, 9, 16, 25];
const over18 = numbers.filter(myFunction);

function myFunction(value, index, array) {
  return value > 18;
}

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array.filter()</h2>
<p>Creates a new array with all array elements that passes a test.</p>

<p id="demo"></p>

<script>
const numbers = [45, 4, 9, 16, 25];
const over18 = numbers.filter(myFunction);

document.getElementById("demo").innerHTML = over18;

function myFunction(value, index, array) {
  return value > 18;
}
</script>

</body>
</html>


Note that the function takes 3 arguments:

The item value
The item index
The array itself
In the example above, the callback function does not use the index and array parameters, so they can be omitted:

Example
const numbers = [45, 4, 9, 16, 25];
const over18 = numbers.filter(myFunction);

function myFunction(value) {
  return value > 18;
}
====
JavaScript Array reduce()
The reduce() method runs a function on each array element to produce (reduce it to) a single value.

The reduce() method works from left-to-right in the array. See also reduceRight().

The reduce() method does not reduce the original array.

This example finds the sum of all numbers in an array:

Example
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction);

function myFunction(total, value, index, array) {
  return total + value;
}


<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array.reduce()</h2>
<p>This example finds the sum of all numbers in an array:</p>

<p id="demo"></p>

<script>
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction);

document.getElementById("demo").innerHTML = "The sum is " + sum;

function myFunction(total, value, index, array) {
  return total + value;
}
</script>

</body>
</html>


Note that the function takes 4 arguments:

The total (the initial value / previously returned value)
The item value
The item index
The array itself
The example above does not use the index and array parameters. It can be rewritten to:

Example
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction);

function myFunction(total, value) {
  return total + value;
}
The reduce() method can accept an initial value:

Example
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction, 100);

function myFunction(total, value) {
  return total + value;
}


<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array.reduce()</h2>
<p>This example finds the sum of all numbers in an array:</p>

<p id="demo"></p>

<script>
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction, 100);

document.getElementById("demo").innerHTML = "The sum is " + sum;

function myFunction(total, value) {
  return total + value;
}
</script>

</body>
</html>

---
JavaScript Array reduceRight()
The reduceRight() method runs a function on each array element to produce (reduce it to) a single value.

The reduceRight() works from right-to-left in the array. See also reduce().

The reduceRight() method does not reduce the original array.

This example finds the sum of all numbers in an array:

Example
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduceRight(myFunction);

function myFunction(total, value, index, array) {
  return total + value;
}

Note that the function takes 4 arguments:

The total (the initial value / previously returned value)
The item value
The item index
The array itself
The example above does not use the index and array parameters. It can be rewritten to:

Example
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduceRight(myFunction);

function myFunction(total, value) {
  return total + value;
}

-==
JavaScript Array every()
The every() method checks if all array values pass a test.

This example checks if all array values are larger than 18:

Example
const numbers = [45, 4, 9, 16, 25];
let allOver18 = numbers.every(myFunction);

function myFunction(value, index, array) {
  return value > 18;
}
Note that the function takes 3 arguments:

The item value
The item index
The array itself
When a callback function uses the first parameter only (value), the other parameters can be omitted:

Example
const numbers = [45, 4, 9, 16, 25];
let allOver18 = numbers.every(myFunction);

function myFunction(value) {
  return value > 18;
}

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array.every()</h2>
<p>The every() method checks if all array values pass a test.</p>

<p id="demo"></p>

<script>
const numbers = [45, 4, 9, 16, 25];
let allOver18 = numbers.every(myFunction);

document.getElementById("demo").innerHTML = "All over 18 is " + allOver18;

function myFunction(value) {
  return value > 18;
}
</script>

</body>
</html>
//ANS: All over 18 is false

---==
JavaScript Array some()
The some() method checks if some array values pass a test.

This example checks if some array values are larger than 18:

Example
const numbers = [45, 4, 9, 16, 25];
let someOver18 = numbers.some(myFunction);

function myFunction(value, index, array) {
  return value > 18;
}

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array.some()</h2>
<p>The some() method checks if some array values pass a test.</p>

<p id="demo"></p>

<script>
const numbers = [45, 4, 9, 16, 25];
let someOver18 = numbers.some(myFunction);

document.getElementById("demo").innerHTML = "Some over 18 is " + someOver18;

function myFunction(value, index, array) {
  return value > 18;
}
</script>

</body>
</html>
//ANS: Some over 18 is true


---------
JavaScript Array indexOf()
The indexOf() method searches an array for an element value and returns its position.

Note: The first item has position 0, the second item has position 1, and so on.

Example
Search an array for the item "Apple":

const fruits = ["Apple", "Orange", "Apple", "Mango"];
let position = fruits.indexOf("Apple") + 1;

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array.indexOf()</h2>

<p id="demo"></p>

<script>
const fruits = ["Apple", "Orange", "Apple", "Mango"];
let position = fruits.indexOf("Apple") + 1;

document.getElementById("demo").innerHTML = "Apple is found in position " + position;
<
ANS: Apple is found in position 1/script>

</body>
</html>

Syntax
array.indexOf(item, start)
item  Required. The item to search for.
start Optional. Where to start the search. Negative values will start at the given position counting from the end, and search to the end.
Array.indexOf() returns -1 if the item is not found.

If the item is present more than once, it returns the position of the first occurrence.

JavaScript Array lastIndexOf()
Array.lastIndexOf() is the same as Array.indexOf(), but returns the position of the last occurrence of the specified element.

Example
Search an array for the item "Apple":

const fruits = ["Apple", "Orange", "Apple", "Mango"];
let position = fruits.lastIndexOf("Apple") + 1;
Syntax
array.lastIndexOf(item, start)
item  Required. The item to search for
start Optional. Where to start the search. Negative values will start at the given position counting from the end, and search to the beginning

-=========

JavaScript Array find()
The find() method returns the value of the first array element that passes a test function.

This example finds (returns the value of) the first element that is larger than 18:

Example
const numbers = [4, 9, 16, 25, 29];
let first = numbers.find(myFunction);

function myFunction(value, index, array) {
  return value > 18;
}

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array.find()</h2>
<p id="demo"></p>

<script>
const numbers = [4, 9, 16, 25, 29];
let first = numbers.find(myFunction);

document.getElementById("demo").innerHTML = "First number over 18 is " + first;

function myFunction(value, index, array) {
  return value > 18;
}
</script>

</body>
</html>


find() is not supported in Internet Explorer.

JavaScript Array findIndex()
The findIndex() method returns the index of the first array element that passes a test function.

This example finds the index of the first element that is larger than 18:

Example
const numbers = [4, 9, 16, 25, 29];
let first = numbers.findIndex(myFunction);

function myFunction(value, index, array) {
  return value > 18;
}


==
JavaScript Array.from()
The Array.from() method returns an Array object from any object with a length property or any iterable object.

Example
Create an Array from a String:

Array.from("ABCDEFG");

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Arrays</h2>

<p>The Array.from() method returns an Array object from any object with a length property or any iterable object.</p>

<p id="demo"></p>

<script>
const myArr = Array.from("ABCDEFG");
document.getElementById("demo").innerHTML = myArr;
</script>

<p>The Array.from() method is not supported in Internet Explorer.</p>

</body>
</html>


===from() is not supported in Internet Explorer.

JavaScript Array Keys()
The Array.keys() method returns an Array Iterator object with the keys of an array.

Example
Create an Array Iterator object, containing the keys of the array:

const fruits = ["Banana", "Orange", "Apple", "Mango"];
const keys = fruits.keys();

for (let x of keys) {
  text += x + "<br>";
}

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Arrays</h2>

<p>The Array.keys() method returns an Array Iterator object with the keys of the array.</p>

<p id="demo"></p>

<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];
const keys = fruits.keys();

let text = "";
for (let x of keys) {
  text += x + "<br>";
}

document.getElementById("demo").innerHTML = text;
</script>

<p>Array.keys() is not supported in Internet Explorer.</p>

</body>
</html>


---
JavaScript Array entries()
Example
Create an Array Iterator, and then iterate over the key/value pairs:

const fruits = ["Banana", "Orange", "Apple", "Mango"];
const f = fruits.entries();

for (let x of f) {
  document.getElementById("demo").innerHTML += x;
}

<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Arrays</h1>
<h2>The entries() method</h2>

<p>entries() returns an Array Iterator object with key/value pairs:</p>

<p id="demo"></p>

<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];
const f = fruits.entries();

for (let x of f) {
  document.getElementById("demo").innerHTML += x + "<br>";
}
</script>

<p>The entries() method is not supported in Internet Explorer 11 (or earlier).</p>

</body>
</html>


--==
JavaScript Array includes()
ECMAScript 2016 introduced Array.includes() to arrays. This allows us to check if an element is present in an array (including NaN, unlike indexOf).

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];

fruits.includes("Mango"); // is true


<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.includes("Mango");
</script>

===
JavaScript Array Spread (...)
The ... operator expands an iterable (like an array) into more elements:

Example
const q1 = ["Jan", "Feb", "Mar"];
const q2 = ["Apr", "May", "Jun"];
const q3 = ["Jul", "Aug", "Sep"];
const q4 = ["Oct", "Nov", "May"];

const year = [...q1, ...q2, ...q3, ...q4];


<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Operators</h1>
<h2>The ... Operator</h2>

<p>The "spread" operator spreads elements of iterable objects:</p>

<p id="demo"></p>

<script>
const q1 = ["Jan", "Feb", "Mar"];
const q2 = ["Apr", "May", "Jun"];
const q3 = ["Jul", "Aug", "Sep"];
const q4 = ["Oct", "Nov", "May"];

const year = [...q1, ...q2, ...q3, ...q4];
document.getElementById("demo").innerHTML = year; 
</script>

</body>
</html>


<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Operators</h1>
<h2>The ... Operator</h2>

<p>The "spread" operator spreads elements of iterable objects:</p>

<p id="demo"></p>

<script>
const q1 = ["Jan", "Feb", "Mar"];
const q2 = ["Apr", "May", "Jun"];
const q3 = ["Jul", "Aug", "Sep"];
const q4 = ["Oct", "Nov", "May"];

const year = [...q1, ...q2, ...q3, ...q4];
document.getElementById("demo").innerHTML = year; 
</script>

</body>
</html>

===
JavaScript Array Const
ECMAScript 2015 (ES6)
In 2015, JavaScript introduced an important new keyword: const.

It has become a common practice to declare arrays using const:

Example
const cars = ["Saab", "Volvo", "BMW"];
Cannot be Reassigned
An array declared with const cannot be reassigned:

Example
const cars = ["Saab", "Volvo", "BMW"];
cars = ["Toyota", "Volvo", "Audi"];    // ERROR


Arrays are Not Constants
The keyword const is a little misleading.

It does NOT define a constant array. It defines a constant reference to an array.

Because of this, we can still change the elements of a constant array.

Elements Can be Reassigned
You can change the elements of a constant array:

Example
// You can create a constant array:
const cars = ["Saab", "Volvo", "BMW"];

// You can change an element:
cars[0] = "Toyota";

// You can add an element:
cars.push("Audi");

Assigned when Declared
JavaScript const variables must be assigned a value when they are declared:

Meaning: An array declared with const must be initialized when it is declared.

Using const without initializing the array is a syntax error:

Example
This will not work:

const cars;
cars = ["Saab", "Volvo", "BMW"];
Arrays declared with var can be initialized at any time.

You can even use the array before it is declared:

Example
This is OK:

cars = ["Saab", "Volvo", "BMW"];
var cars;

Const Block Scope
An array declared with const has Block Scope.

An array declared in a block is not the same as an array declared outside the block:

Example
const cars = ["Saab", "Volvo", "BMW"];
// Here cars[0] is "Saab"
{
  const cars = ["Toyota", "Volvo", "BMW"];
  // Here cars[0] is "Toyota"
}
// Here cars[0] is "Saab"
An array declared with var does not have block scope:

Example
var cars = ["Saab", "Volvo", "BMW"];
// Here cars[0] is "Saab"
{
  var cars = ["Toyota", "Volvo", "BMW"];
  // Here cars[0] is "Toyota"
}
// Here cars[0] is "Toyota"

Redeclaring Arrays
Redeclaring an array declared with var is allowed anywhere in a program:

Example
var cars = ["Volvo", "BMW"];   // Allowed
var cars = ["Toyota", "BMW"];  // Allowed
cars = ["Volvo", "Saab"];      // Allowed
Redeclaring or reassigning an array to const, in the same scope, or in the same block, is not allowed:

Example
var cars = ["Volvo", "BMW"];     // Allowed
const cars = ["Volvo", "BMW"];   // Not allowed
{
  var cars = ["Volvo", "BMW"];   // Allowed
  const cars = ["Volvo", "BMW"]; // Not allowed
}
Redeclaring or reassigning an existing const array, in the same scope, or in the same block, is not allowed:

Example
const cars = ["Volvo", "BMW"];   // Allowed
const cars = ["Volvo", "BMW"];   // Not allowed
var cars = ["Volvo", "BMW"];     // Not allowed
cars = ["Volvo", "BMW"];         // Not allowed

{
  const cars = ["Volvo", "BMW"]; // Allowed
  const cars = ["Volvo", "BMW"]; // Not allowed
  var cars = ["Volvo", "BMW"];   // Not allowed
  cars = ["Volvo", "BMW"];       // Not allowed
}
Redeclaring an array with const, in another scope, or in another block, is allowed:

Example
const cars = ["Volvo", "BMW"];   // Allowed
{
  const cars = ["Volvo", "BMW"]; // Allowed
}
{
  const cars = ["Volvo", "BMW"]; // Allowed
}

======
JavaScript Date Objects
JavaScript Date Objects let us work with dates:

Examples
const d = new Date();
const d = new Date("2022-03-25");
----
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Dates</h1>
<h2>Using new Date()</h2>
<p>new Date() without arguments, creates a date object with the current date and time:</p>

<p id="demo"></p>

<script>
const d = new Date();
document.getElementById("demo").innerHTML = d;
</script>
ANS: Since i typed this on 30-03-2023
it is Thu Mar 30 2023 22:27:06 GMT+0100 (West Africa Standard Time)
</body>
</html>
---

<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Dates</h1>
<h2>Using new Date()</h2>

<p id="demo"></p>

<script>
const d = new Date("2023-03-29");
document.getElementById("demo").innerHTML = d;
</script>
ans: Wed Mar 29 2023 01:00:00 GMT+0100 (West Africa Standard Time)
</body>
</html>
---
Note
Date objects are static. The "clock" is not "running".

The computer clock is ticking, date objects are not.

--------
Creating Date Objects
Date objects are created with the new Date() constructor.

There are 9 ways to create a new date object:

new Date()
new Date(date string)

new Date(year,month)
new Date(year,month,day)
new Date(year,month,day,hours)
new Date(year,month,day,hours,minutes)
new Date(year,month,day,hours,minutes,seconds)
new Date(year,month,day,hours,minutes,seconds,ms)

new Date(milliseconds)
============
JavaScript new Date()
new Date() creates a date object with the current date and time:

Example
const d = new Date();
-----------------
new Date(date string)
new Date(date string) creates a date object from a date string:

Examples
const d = new Date("October 13, 2014 11:13:00");
const d = new Date("2022-03-25");
const d = new Date ("2023-03-30 11:10:10");
const d = new Date ("13 October, 2023");
const d = new Date(2018, 3, 24, 10, 33, 30, 0);
Avoid using trailing zeros for like moths not having 2-digits e.g 06 is an error, so use 6
-----
new Date(year, month, ...)
new Date(year, month, ...) creates a date object with a specified date and time.

7 numbers specify year, month, day, hour, minute, second, and millisecond (in that order):

Example
const d = new Date(2018, 11, 24, 10, 33, 30, 0);
====
Note
JavaScript counts months from 0 to 11:

January = 0.

December = 11.

Specifying a month higher than 11, will not result in an error but add the overflow to the next year:

Specifying:

const d = new Date(2018, 15, 24, 10, 33, 30);
Is the same as:

const d = new Date(2019, 3, 24, 10, 33, 30);

Specifying a day higher than max, will not result in an error but add the overflow to the next month:

Specifying:

const d = new Date(2018, 5, 35, 10, 33, 30);
Is the same as:

const d = new Date(2018, 6, 5, 10, 33, 30);
===
Using 6, 4, 3, or 2 Numbers
6 numbers specify year, month, day, hour, minute, second:

Example
const d = new Date(2018, 11, 24, 10, 33, 30);
5 numbers specify year, month, day, hour, and minute:

Example
const d = new Date(2018, 11, 24, 10, 33);
4 numbers specify year, month, day, and hour:

Example
const d = new Date(2018, 11, 24, 10);
3 numbers specify year, month, and day:

Example
const d = new Date(2018, 11, 24);
2 numbers specify year and month:

Example
const d = new Date(2018, 11);
You cannot omit month. If you supply only one parameter it will be treated as milliseconds.

Example
const d = new Date(2018);
=====
Previous Century
One and two digit years will be interpreted as 19xx:

Example
const d = new Date(99, 11, 24); ans: dec 24, 1999
Example
const d = new Date(9, 11, 24); ans: dec 24, 1909
====
JavaScript Stores Dates as Milliseconds
JavaScript stores dates as number of milliseconds since January 01, 1970.

Zero time is January 01, 1970 00:00:00 UTC.

One day (24 hours) is 86 400 000 milliseconds.

Now the time is: 1680211275825 milliseconds past January 01, 1970

so,
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Dates</h1>
<h2>Using new Date()</h2>

<p>100,000,000,000 milliseconds from January 01 1970 UTC is:</p>
<p id="demo"></p>

<script>
const d = new Date(100000000000);
document.getElementById("demo").innerHTML = d;
</script>
ans on 30-03-2023 is : Sat Mar 03 1973 10:46:40 GMT+0100 (West Africa Standard Time)
</body>
</html>
---
January 01 1970 minus 100 000 000 000 milliseconds is:

const d = new Date(-100000000000);
January 01 1970 plus 24 hours is:

const d = new Date(24 * 60 * 60 * 1000);
// or
const d = new Date(86400000);
01 January 1970 plus 0 milliseconds is:

const d = new Date(0);

------
Date Methods
When a date object is created, a number of methods allow you to operate on it.

Date methods allow you to get (GET) and set(SET) the year, month, day, hour, minute, second, and millisecond of date objects, using either local time or UTC (universal, or GMT) time.
----
Displaying Dates
JavaScript will (by default) output dates in full text string format:

Example
<script>
const d = new Date();
document.getElementById("demo").innerHTML = d;
</script>
ans: Thu Mar 30 2023 22:21:15 GMT+0100 (West Africa Standard Time)
----
When you display a date object in HTML, it is automatically converted to a string, with the toString() method.

Example
const d = new Date();
d.toString();
<script>
const d = new Date();
document.getElementById("demo").innerHTML = d.toString();
</script>
Ans; Thu Mar 30 2023 23:00:18 GMT+0100 (West Africa Standard Time)

----
The toDateString() method converts a date to a more readable format:
<script>
const d = new Date();
document.getElementById("demo").innerHTML = d.toDateString();
</script>
ans: Thu Mar 30 2023
----
The toUTCString() method converts a date to a string using the UTC standard:

Example
<script>
const d = new Date();
document.getElementById("demo").innerHTML = d.toUTCString();
</script>
ans: Thu, 30 Mar 2023 22:02:47 GMT
-----

The toISOString() method converts a date to a string using the ISO standard:
<script>
const d = new Date();
document.getElementById("demo").innerHTML = d.toISOString();
</script>
ans: 2023-03-30T22:04:04.635Z
-----
JavaScript Date constructor
Example
Get the Date constructor:

const d = new Date();
let text = d.constructor;
Definition and Usage
The constructor property returns the function that created the Date prototype.

For JavaScript dates the constructor property returns:

function Date() { [native code] }

Syntax
Date.constructor
Return Value
function Date() { [native code] }

---......
<script>
const d = new Date();
let text = d.constructor;

document.getElementById("demo").innerHTML = text;
</script>
ans: function Date() { [native code] } 
--------------
JavaScript Date getDate()
getDate() returns the day of the month (from 1 to 31) of a date.

Examples
Get the day of the month:
const d = new Date();
let day = d.getDate();

Get the day of a specific date:
const d = new Date("July 21, 1983 01:15:00");
let day = d.getDate();
..........
<script>
const d = new Date();
let day = d.getDate();
document.getElementById("demo").innerHTML = day;
</script>
ans today is: 30
-----
JavaScript Date getDay()
Examples
Get the day of the week:

const d = new Date();
let day = d.getDay();
Get the day of the week of a specific date:

const d = new Date("July 21, 1983 01:15:00");
let day = d.getDay();
More examples below.

Definition and Usage
The getDay() method returns the day of the week (0 to 6) of a date.

Sunday = 0, Monday = 1, 
-...
<script>
const d = new Date();
let day = d.getDay()
document.getElementById("demo").innerHTML = day;
</script>
ANS: 5 (BC IT IS FRIDAY 31 MARCH)
----
JavaScript Date getFullYear()
getFullYear() returns the full year (4 digits) of a date.

<script>
const d = new Date();
let year = d.getFullYear();
document.getElementById("demo").innerHTML = year;
</script>
ANS; 2023
----
JavaScript Date getHours()
getHours() returns the hour (0 to 23) of a date.
---
getMilliseconds() returns the milliseconds (0 to 999) of a date.
---
getMinutes() returns the minutes (0 to 59) of a date.
---
getMonth() returns the month (0 to 11) of a date.

January =0, February = 1,
----
getSeconds() returns the seconds (0 to 59) of a date.
<script>
const d = new Date();
let seconds = d.getSeconds();
document.getElementById("demo").innerHTML = seconds;
</script>........
............
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Dates</h1>

<p>Add zeros and colons to display the time:</p>

<p id="demo"></p>

<script>
function addZero(i) {
  if (i < 10) {
  i = "0" + i
  }
  return i;
}

const d = new Date();
let h = addZero(d.getHours());
let m = addZero(d.getMinutes());
let s = addZero(d.getSeconds());
let time = h + ":" + m + ":" + s;
document.getElementById("demo").innerHTML = time;
</script>

</body>
</html>
ans: 00:35:56
----
JavaScript Date getTime()
Examples
Get the time:

<script>
const d = new Date();
let time = d.getTime();
document.getElementById("demo").innerHTML = time;
</script>
ans: 1680219723086




Calculate the number of years since January 1, 1970:

<script>
// Calculate milliseconds in a year
//const second = 1000 * 1//
const minute = 1000 * 60;
const hour = minute * 60;
const day = hour * 24;
const year = day * 365;

// Divide Time with a year
const d = new Date();
let years = Math.round(d.getTime() / year); //if no roundup, it gives decimal

document.getElementById("demo").innerHTML = years;
</script>

Definition and Usage
getTime() returns the number of milliseconds since January 1, 1970 00:00:00.
============
JavaScript Date getTimezoneOffset()
Definition and Usage
getTimezoneOffset() returns the difference between UTC time and local time.

getTimezoneOffset() returns the difference in minutes.

For example, if your time zone is GMT+1 like Nigeria, -60 will be returned.

Notes
The value is not constant because of varying Daylight Saving Time.

The Universal Time Coordinated (UTC) is the time set by the World Time Standard.

UTC time is the same as GMT (Greenwich Mean Time).

----
JavaScript Date getUTCDate()
Examples
Get the UTC day:

const d = new Date();
let day = d.getUTCDate();
Get the UTC day of the month from a specific, local date-time:

const d = new Date("July 21, 1983 01:15:00");
let day = d.getUTCDate();

Definition and Usage
getUTCDate() returns the day of the month (1 to 31) of a date object.

getUTCDate() returns the day according to UTC.

Notes
UTC (Universal Time Coordinated) is the time set by the World Time Standard.

UTC time is the same as GMT time (Greenwich Mean Time).

All JavaScript getUTC methods assume that the date is of local time.

Note: WAT = UTC + 1
===
JavaScript Date getUTCDay()
Definition and Usage
getUTCDay() returns the day of the week (0 to 6) of a date.

getUTCDay() returns the day of the week according to universal time.

Sunday = 0, Monday = 1

SO,
<script>
const weekday = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];

const d = new Date();
let day = weekday[d.getUTCDay()];
document.getElementById("demo").innerHTML = day;
</script>
-----
Definition and Usage
getUTCFullYear() returns the year of a date.

getUTCFullYear() returns the year according to UTC.

getUTCFullYear() returns four digits for years between 1000 and 9999.=
-=--
Definition and Usage
getUTCHours() returns the hour (0 to 23) of a date.

getUTCHours() returns the hour according to UTC.
-----
Definition and Usage
getUTCMilliseconds() returns the milliseconds (0 to 999) of a date.

getUTCMilliseconds() returns the milliseconds according to UTC.
----
Definition and Usage
getUTCMinutes() returns the minutes (0 to 59) of a date.

getUTCMinutes() returns the minutes according to UTC.
-----
Definition and Usage
getUTCMonth() returns the month (0 to 11) of a date.

getUTCMonth() returns the month according to UTC.

January = 0, February = 1, ... (See below):
----
Definition and Usage
getUTCSeconds() returns the seconds (0 to 59) of a date.

getUTCSeconds() returns the seconds according to UTC
----
Definition and Usage
Date.now() returns the number of milliseconds since January 1, 1970.

Notes
Date.now() is a static method of the Date object.

You cannot use it on a date like myDate.now()

The syntax is always Date.now().

<script>
let ms = Date.now();
document.getElementById("demo").innerHTML = ms;
</script>
===
JavaScript Date parse()

Definition and Usage
parse() parses a date string and returns the time difference since January 1, 1970.

parse() returns the time difference in milliseconds.
Calculate the number of years between January 1, 1970 to March 21, 2012:

// Calculate milliseconds in a year
const minute = 1000 * 60;
const hour = minute * 60;
const day = hour * 24;
const year = day * 365;

// Compute years
const d = Date.parse("March 21, 2012");
let years = Math.round(d / year);
====
JavaScript Date prototype

Definition and Usage
prototype allows you to add new properties and methods to dates.

prototype is a property available with all JavaScript objects.

Example
Make a new date method that gives the date object a month-name property called myName:

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Dates</h2>

<p>The prototype constructor allows you to add new properties and methods to the Date() object.</p>

<p>Create a myMonth() method, returning the the month's name:</p>

<p id="demo"></p>

<script>
Date.prototype.myMonth = function() {
  if (this.getMonth() == 0) {return "January"};
  if (this.getMonth() == 1) {return "February"};
  if (this.getMonth() == 2) {return "March"};
  if (this.getMonth() == 3) {return "April"};
  if (this.getMonth() == 4) {return "May"};
  if (this.getMonth() == 5) {return "June"};
  if (this.getMonth() == 6) {return "July"};
  if (this.getMonth() == 7) {return "August"};
  if (this.getMonth() == 8) {return "September"};
  if (this.getMonth() == 9) {return "October"};
  if (this.getMonth() == 10) {return "November"};
  if (this.getMonth() == 11) {return "December"};
};

const d = new Date();
document.getElementById("demo").innerHTML = d.myMonth();
</script>

</body>
</html>

----
Warning
You are not advised to change the prototype of an object that you do not control.

You should not change the prototype of built in JavaScript datatypes like:

Numbers
Strings
Arrays
Dates
Booleans
Function
Objects
Only change the prototype of your own objects.

The prototype Property
The JavaScript prototype property allows you to add new properties to objects:

Example
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Objects</h1>
<h2>The prototype Property</h2>

<p id="demo"></p>

<script>
function Person(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.eyeColor = eye;
}
const myFather = new Person("John", "Doe", "blue");
const myMother = new Person("Sally", "Rally", "green");

Person.prototype.nationality = "English";

document.getElementById("demo").innerHTML =
"My father is " + myFather.nationality + "<br>" +
"My mother is " + myMother.nationality;
</script>

</body>
</html>
ans: My father is English
My mother is English
=================================
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Dates</h1>
<h2>Using new Date()</h2>

<p id="demo"></p>
<p id="demo1"></p>
<p id="demo2"></p>

<script>
  // Create prototype function for names of months
Date.prototype.myMonth = function() {
  if (this.getMonth() == 0) {return "January"};
  if (this.getMonth() == 1) {return "February"};
  if (this.getMonth() == 2) {return "March"};
  if (this.getMonth() == 3) {return "April"};
  if (this.getMonth() == 4) {return "May"};
  if (this.getMonth() == 5) {return "June"};
  if (this.getMonth() == 6) {return "July"};
  if (this.getMonth() == 7) {return "August"};
  if (this.getMonth() == 8) {return "September"};
  if (this.getMonth() == 9) {return "October"};
  if (this.getMonth() == 10) {return "November"};
  if (this.getMonth() == 11) {return "December"};
};

// Create prototype function for days of the week names
Date.prototype.myDay = myDayFunction;

//Create the function separate
function myDayFunction() {
  if (this.getDay() == 0) {return "Sunday"};
  if (this.getDay() == 1) {return "Monday"};
  if (this.getDay() == 2) {return "Tuesday"};
  if (this.getDay() == 3) {return "Wednesday"};
  if (this.getDay() == 4) {return "Thursday"};
  if (this.getDay() == 5) {return "Friday"};
  if (this.getDay() == 6) {return "Saturday"};
};


const d = new Date();
document.getElementById("demo").innerHTML = d.myMonth();
document.getElementById("demo1").innerHTML = d.myDay();
document.getElementById("demo2").innerHTML = "Today's date is: " + d.myDay() + " " + d.myMonth() + " " + d.getDate() + ", " + d.getFullYear() + ".";
</script>

</body>
</html>
===============
JavaScript Date setDate()

<script>
const d = new Date();
d.setDate(15);
document.getElementById("demo").innerHTML = d;
</script>
This will set the date using 1 to 31 instaed of returning that day
--
Set the day of the month to the last day of the previous month:

const d = new Date();
d.setDate(0);
will give 28 of Feb since am in March
while 
<script>
const d = new Date();
d.setDate(-1);
document.getElementById("demo").innerHTML = d;
</script>
will give 27th of Feb

--
Parameters
day An integer representing the day (1 to 31).
Higher and lower values are handeled with date maths:

0 gives the last day of the previous month
-1 gives the day before the last day of the previous month
32 gives the first day of the next month (if 31 days)
41 gives the tenth day of the next month (if 31 days)
--
JavaScript Date setFullYear()
Example 1
const d = new Date();
d.setFullYear(2020);

Definition and Usage
setFullYear() sets the year of a date.

setFullYear() can also set month and day.

Example 2
const d = new Date();
d.setFullYear(2020, 10, 3); ANS: Nov 3, 2020
--
Set the date to six months ago:

const d = new Date();
d.setFullYear(d.getFullYear(), d.getMonth() - 6);
--
JavaScript Date setHours()
Example 1
const d = new Date();
d.setHours(15);

setHours() sets the hour of a date.

setHours() can also set minutes, seconds and milliseconds.

Example 2
Set the time to 15:35:01

const d = new Date();
d.setHours(15, 35, 1);

Set the time to 48 hours ago:

const d = new Date();
d.setHours(d.getHours() - 48);
----
JavaScript Date setMilliseconds()
Example
const d = new Date();
d.setMilliseconds(192);
Definition and Usage
setMilliseconds() sets the milliseconds of a date.
---
JavaScript Date setMinutes()
Example 1
Set the minutes to 17:

const d = new Date();
d.setMinutes(17);

setMinutes() sets the minutes of a date.

This method can also be used to set the seconds and milliseconds.

Example 2
Set the date time to be 90 minutes ago:

const d = new Date();
d.setMinutes(d.getMinutes() - 90);
---
JavaScript Date setMonth()
Example
Set the month to 4 (May):

const d = new Date();
d.setMonth(4);
---
JavaScript Date setSeconds()
Example
Set the seconds to 35:

const d = new Date();
d.setSeconds(35);

The setSeconds() method sets the seconds of a date object.

This method can also be used to set the milliseconds.
---
JavaScript Date setTime()
Example
Add 1332403882588 milliseconds to January 1, 1970:

const d = new Date();
d.setTime(1332403882588); ANS: Thu Mar 22 2012 09:11:22 GMT+0100 (West Africa Standard Time)
The setTime() method sets a date and time by adding or subtracting a specified number of milliseconds to/from midnight January 1, 1970.

---
JavaScript Date setUTCDate()
Example
Set the day of the month, according to UTC:

const d = new Date();
d.setUTCDate(15); ANS: Wed Mar 15 2023 15:17:18 GMT+0100 (West Africa Standard Time)
-------
OTHERS INCLUDE
1. setUTCFullYear()
2. setUTCHours()
3. setUTCMilliSeconds()
4. setUTCMinutes()
5. setUTCMonth()
6. setUTCSeconds()

-----
JavaScript toDateString() Method
The toDateString() method returns the date (not the time) of a date object as a string.
<script>
const d = new Date();
let text = d.toDateString();
document.getElementById("demo").innerHTML = text;
</script>
Fri Mar 31 2023
====
JavaScript Date toISOString()
The toISOString() method returns a date object as a string, using the ISO standard.

The standard is called ISO-8601 and the format is: YYYY-MM-DDTHH:mm:ss.sssZ

<script>
const d = new Date();
let text = d.toISOString();
document.getElementById("demo").innerHTML = text;
</script>
2023-03-31T14:23:03.111Z
====
JavaScript Date toJSON()
The toJSON() method returns a date object as a string, formatted as a JSON date.

JSON dates have the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ

<script>
const d = new Date();
let text = d.toJSON();
document.getElementById("demo").innerHTML = text;
</script>
2023-03-31T14:25:25.686Z
====
JavaScript Date toLocaleDateString()
The toLocaleDateString() method returns the date (not the time) of a date object as a string, using locale conventions.
<script>
const d = new Date();
let text = d.toLocaleDateString();
document.getElementById("demo").innerHTML = text;
</script>
31/03/2023
---
JavaScript Date toLocaleTimeString()
The toLocaleTimeString() method returns the time portion of a date object as a string, using locale conventions.

<script>
const d = new Date();
let text = d.toLocaleTimeString();
document.getElementById("demo").innerHTML = text;
</script>
15:27:34
====
JavaScript Date toLocaleString()
The toLocaleString() method returns a Date object as a string, using locale settings.

The default language depends on the locale setup on your computer.
<script>
const d = new Date();
let text = d.toLocaleString();
document.getElementById("demo").innerHTML = text;
</script>
31/03/2023, 15:28:40
===
JavaScript Date toTimeString()
Example
Get the time portion of a date object as a string:

const d = new Date();
let text = d.toTimeString();ans: 15:29:29 GMT+0100 (West Africa Standard Time)
====
JavaScript Date toUTCString()
The toUTCString() method returns a date object as a string, according to UTC.

Tip: The Universal Coordinated Time (UTC) is the time set by the World Time Standard.

Note: UTC time is the same as GMT time. This is WAT-1
===
JavaScript Date.UTC()
The Date.UTC() method returns the number of milliseconds between a specified date and midnight of January 1, 1970, according to UTC.

<script>
let ms = Date.UTC(2020, 02, 30);
document.getElementById("demo").innerHTML = ms;
</script>
1585526400000
===
JavaScript Date valueOf()
The valueOf() method returns the primitive value of a date object.

Note: The primitive value is returned as the number of millisecond since midnight January 1, 1970 UTC.

<script>
const d = new Date();
let ms = d.valueOf();
document.getElementById("demo").innerHTML = ms;
</script>

====================================================

JavaScript Date Input
There are generally 3 types of JavaScript date input formats:

Type  Example
ISO Date  "2015-03-25" (The International Standard)
Short Date  "03/25/2015"
Long Date "Mar 25 2015" or "25 Mar 2015"
The ISO format follows a strict standard in JavaScript.

The other formats are not so well defined and might be browser specific.
JavaScript Date Output
Independent of input format, JavaScript will (by default) output dates in full text string format:

Sun Apr 02 2023 14:27:15 GMT+0100 (West Africa Standard Time)
JavaScript ISO Dates
ISO 8601 is the international standard for the representation of dates and times.

The ISO 8601 syntax (YYYY-MM-DD) is also the preferred JavaScript date format:

Example (Complete date)
const d = new Date("2015-03-25");


ISO Dates (Year and Month)
ISO dates can be written without specifying the day (YYYY-MM):

Example
const d = new Date("2015-03");
Time zones will vary the result above between February 28 and March 01.

ISO Dates (Only Year)
ISO dates can be written without month and day (YYYY):

Example
const d = new Date("2015");
Time zones will vary the result above between December 31 2014 and January 01 2015.

-----
ISO Dates (Date-Time)
ISO dates can be written with added hours, minutes, and seconds (YYYY-MM-DDTHH:MM:SSZ):

Example
const d = new Date("2015-03-25T12:00:00Z");
Date and time is separated with a capital T.

UTC time is defined with a capital letter Z.

If you want to modify the time relative to UTC, remove the Z and add +HH:MM or -HH:MM instead:

Example
const d = new Date("2015-03-25T12:00:00-06:30");
Modify the time relative to UTC by adding +HH:MM or subtraction -HH:MM to the time.
---
JavaScript Short Dates.
Short dates are written with an "MM/DD/YYYY" syntax like this:

Example
const d = new Date("03/25/2015");
WARNINGS !
In some browsers, months or days with no leading zeroes may produce an error:

const d = new Date("2015-3-25");
The behavior of "YYYY/MM/DD" is undefined.
Some browsers will try to guess the format. Some will return NaN.

const d = new Date("2015/03/25");
The behavior of  "DD-MM-YYYY" is also undefined.
Some browsers will try to guess the format. Some will return NaN.

const d = new Date("25-03-2015");
JavaScript Long Dates.
Long dates are most often written with a "MMM DD YYYY" syntax like this:

Example
const d = new Date("Mar 25 2015");
Month and day can be in any order:

Example
const d = new Date("25 Mar 2015");
And, month can be written in full (January), or abbreviated (Jan):

Example
const d = new Date("January 25 2015");
Example
const d = new Date("Jan 25 2015");
Commas are ignored. Names are case insensitive:

Example
const d = new Date("JANUARY, 25, 2015");

---
You can use an array of names to return the month as a name:

Examples
const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

const d = new Date("2021-03-25");
let month = months[d.getMonth()];
const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

const d = new Date();
let month = months[d.getMonth()];
----
Compare Dates
Dates can easily be compared.

The following example compares today's date with January 14, 2100:



<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>

<script>
let text;
const today = new Date();
const someday = new Date();
someday.setFullYear(2100, 0, 14);

if (someday > today) {
  text = "Today is before January 14, 2100.";
} else {
  text = "Today is after January 14, 2100.";
}

document.getElementById("demo").innerHTML = text;
</script>

</body>
</html>
===============
<!DOCTYPE html>
<html>
<head>
  <style type="text/css">
    h1 {
      text-align: center;
    }

  </style>
</head>
<body>

<h1>Timer till December 2023, 11:59pm before New Year</h1>

<!--Timer Counter Begins-->
<p id="newYearTimer" class="newYearTimer"><span class="timerDays"></span><span class="timerHours"></span><span class="timerMinutes"></span><span class="timerSeconds"></span></p>



  <script type="text/javascript">
    const countDownDate = new Date("Dec 31,2023")
    document.getElementById("newYearTimer").innerHTML = countDownDate.getFullYear();
  </script>

  <script type="text/javascript">
    const countDownDate = new Date("Dec 31,2023 11:59:00")
    document.getElementById("newYearTimer").innerHTML = countDownDate;
  </script>

  <script type="text/javascript">
    const countDownDate = new Date("Dec 31,2023 11:59:00").getTime();
    document.getElementById("newYearTimer").innerHTML = countDownDate;
  </script>

  <script type="text/javascript">
    const countDownDate = new Date("Dec 31,2023 11:59:00").getTime();
    document.getElementById("demo").innerHTML =           countDownDate;
    
    const now = new Date();
    document.getElementById("demo1").innerHTML = now.getTime();
  </script>

</body>
</html>

Note: 
In JavaScript, Math.floor() is a built-in function that rounds a number down to the nearest integer. It takes one argument, the number to be rounded down, and returns the result.

For example, Math.floor(5.6) will return 5, because 5 is the nearest integer that is less than or equal to 5.6. Similarly, Math.floor(-3.2) will return -4, because -4 is the nearest integer that is less than or equal to -3.2.

The Math.floor() function is often used in conjunction with other math functions or calculations, such as in the code you posted earlier for calculating time intervals.


In JavaScript, Math.round() is another built-in function that rounds a number to the nearest integer. However, unlike Math.floor(), it rounds up or down to the nearest integer, depending on whether the fractional part of the number is greater than or equal to 0.5 or less than 0.5, respectively.

For example, Math.round(5.6) will return 6, because 6 is the nearest integer to 5.6. Similarly, Math.round(-3.2) will return -3, because -3 is the nearest integer to -3.2.

In addition to rounding to the nearest integer, Math.round() can also be used to round to a specified number of decimal places. For example, Math.round(3.14159 * 100) / 100 will round the number 3.14159 to two decimal places, resulting in 3.14.

Like Math.floor(), Math.round() is often used in calculations that involve numbers or data manipulation.


The code setInterval(updateTimerFunction, 1000) sets up a timer that calls the updateTimerFunction function every 1000 milliseconds (1 second) and returns a unique ID for that timer.


so,   // Update the count down every 1 second
    const updateTimer = setInterval(updateTimerFunction, 1000);
    
The setInterval() method repeatedly calls a function or executes a code snippet with a fixed time delay between each call. In this case, the updateTimerFunction function will be called every 1 second to update the countdown timer.

The ID returned by the setInterval() method can be used to stop the timer using the clearInterval() method, which takes the timer ID as an argument.
===================
DEBUGGING WITH VISUAL STUDIO CODE

Visual Studio Code provides a built-in debugging feature that allows you to debug your JavaScript code directly from the editor. Here are the steps to use it:

Open your JavaScript file in Visual Studio Code.
Set a breakpoint in your code by clicking on the left margin of the editor or by pressing F9 on the line you want to debug.
Open the Debug panel by clicking on the Debug icon in the left sidebar or by pressing Ctrl+Shift+D.
Click on the "Create a launch.json file" link, which will create a new launch.json file in your workspace.
Choose the environment you want to debug in (such as Node.js or Chrome).
Modify the configuration in the launch.json file to match your project setup, including the entry point of your application and any command-line arguments or environment variables.
Start debugging by clicking on the Run button in the Debug panel, or by pressing F5.
While debugging, you can step through your code line-by-line, inspect variables, and watch expressions. You can also pause and resume the execution of your code, as well as control the flow of your program using features like "Step Into", "Step Over", and "Step Out".

Visual Studio Code's debugging feature is highly customizable, so you can tailor it to your specific needs. You can also use it to debug other languages and platforms, not just JavaScript.


EXAMPLE: 
function greet(name) {
  console.log("Hello, " name);
}

greet("Alice");
greet("Bob");
greet("Charlie");



---====---The error in this code is a missing plus sign (+) between the string and the variable in the console.log statement.

To debug this code using Visual Studio Code:

Open the file in Visual Studio Code.
Add a breakpoint by clicking on the left side of the line with the console.log statement.
Open the Debug panel (Ctrl+Shift+D).
Click on the "Create a launch.json file" link and choose "Node.js" as the environment.
Modify the generated launch.json file to include "program": "${workspaceFolder}/your_file_name.js" and save the changes.
Click the "Run" button in the Debug panel.
The code execution should stop at the breakpoint you set.
To continue executing the code line by line, click on the "Step Over" button in the Debug panel.
You will see an error message in the console output that will point out the mistake in the code.
Fix the error by adding the missing plus sign (+) in the console.log statement.
Run the code again to verify that the error has been fixed.
I hope this helps you get started with debugging in Visual Studio Code!





NOTE: 
You should add the "program": "${workspaceFolder}/your_file_name.js" line in the configurations array, inside the object that corresponds to the configuration you are using. For example, if you are using the "Launch Program" configuration in the code you provided, you should modify it like this:

{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Launch Program",
            "skipFiles": [
                "<node_internals>/**"
            ],
            "program": "${file}"
        }
    ]
}

-----------------
SO IT WILL BE

{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Launch Program",
            "skipFiles": [
                "<node_internals>/**"
            ],
            "program": "${workspaceFolder}/your_file_name.js"
        }
    ]
}

-----
Make sure to replace "your_file_name.js" with the name of the actual JavaScript file you want to debug.

This will tell Visual Studio Code which file to run when you start the debugger.

====
The Math Object
Unlike other objects, the Math object has no constructor.

The Math object is static.

All methods and properties can be used without creating a Math object first.

-------------------------
1. <script>
document.getElementById("demo").innerHTML = Math.PI;
</script>
2.Math Properties (Constants)
The syntax for any Math property is : Math.property.

JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example
Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

----------------------
JavaScript Math Constants
Math.E: 2.718281828459045

Math.PI: 3.141592653589793

Math.SQRT2: 1.4142135623730951

Math.SQRT1_2: 0.7071067811865476

Math.LN2: 0.6931471805599453

Math.LN10: 2.302585092994046

Math.LOG2E: 1.4426950408889634

Math.Log10E: 0.4342944819032518
-----------------
Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x) Returns x rounded to its nearest integer
Math.ceil(x)  Returns x rounded up to its nearest integer
Math.floor(x) Returns x rounded down to its nearest integer
Math.trunc(x) Returns the integer part of x (new in ES6)
Math.sign()

---------------
Math.sign()
The Math.sign() method retuns whether a number is negative, positive or zero.

If the number is positive, this method returns 1.
If the number is negative, it returns -1.
If the number is zero, it returns 0.

console.log(Math.sign(3));
// Expected output: 1

console.log(Math.sign(-3));
// Expected output: -1

console.log(Math.sign(0));
// Expected output: 0

console.log(Math.sign('-3'));
// Expected output: -1

A Number, representing the sign of the specified number:
If the number is positive, it returns 1
If the number is negative, it returns -1
If the number is positive zero, it returns 0
If the number is negative zero, it returns -0
If the number is not a number, it returns NaN
----
Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example
Math.pow(8, 2); //ANS: 64
----
Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example
Math.sqrt(64); ANS: 8
----
Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example
Math.abs(-4.7);ANS:4.7
------
Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).

If you want to use degrees instead of radians, you have to convert degrees to radians:

Angle in radians = Angle in degrees x PI / 180.
1 RADIAN = 57.2958 DEGREES

Angle in Degrees = Angle in Radians × 180°/π 

Example
Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).

If you want to use degrees instead of radians, you have to convert degrees to radians:

Angle in radians = Angle in degrees x PI / 180.

Example
Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

----
Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example
Math.min(0, 150, 30, 20, -8, -200);
Math.max(0, 150, 30, 20, -8, -200);
-------------
Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 (exclusive):

Example
Math.random();
----------------
The Math.log() Method
Math.log(x) returns the natural logarithm of x.

The natural logarithm returns the time needed to reach a certain level of growth:

Examples
Math.log(1);

------------
Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);
---
The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8); ANS: 3

The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000); ANS: 3
==============
JavaScript Math Methods
Method  Description
abs(x)  Returns the absolute value of x
acos(x) Returns the arccosine of x, in radians
acosh(x)  Returns the hyperbolic arccosine of x
asin(x) Returns the arcsine of x, in radians
asinh(x)  Returns the hyperbolic arcsine of x
atan(x) Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
atan2(y, x) Returns the arctangent of the quotient of its arguments
atanh(x)  Returns the hyperbolic arctangent of x
cbrt(x) Returns the cubic root of x
ceil(x) Returns x, rounded upwards to the nearest integer
cos(x)  Returns the cosine of x (x is in radians)
cosh(x) Returns the hyperbolic cosine of x
exp(x)  Returns the value of Ex
floor(x)  Returns x, rounded downwards to the nearest integer
log(x)  Returns the natural logarithm (base E) of x
max(x, y, z, ..., n)  Returns the number with the highest value
min(x, y, z, ..., n)  Returns the number with the lowest value
pow(x, y) Returns the value of x to the power of y
random()  Returns a random number between 0 and 1
round(x)  Rounds x to the nearest integer
sign(x) Returns if x is negative, null or positive (-1, 0, 1)
sin(x)  Returns the sine of x (x is in radians)
sinh(x) Returns the hyperbolic sine of x
sqrt(x) Returns the square root of x
tan(x)  Returns the tangent of an angle
tanh(x) Returns the hyperbolic tangent of a number
trunc(x)  Returns the integer part of a number (x)
=========
Example
// Returns a random integer from 0 to 9:
Math.floor(Math.random() * 10);

// Returns a random integer from 0 to 10:
Math.floor(Math.random() * 11);

// Returns a random integer from 1 to 10:
Math.floor(Math.random() * 10) + 1;
--------------
This below gives integer between 10 and 20 but not 20
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Math.random()</h2>

<p>Every time you click the button, getRndInteger(min, max) returns a random number between 0 
and 9 (both included):</p>

<button onclick="document.getElementById('demo').innerHTML = getRndInteger(0,10)">Click Me</button>

<p id="demo"></p>

<script>
function getRndInteger(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}
</script>

</body>
</html>

Note: This JavaScript function always returns a random number between min and max (both included):

Example
function getRndInteger(min, max) {
  return Math.floor(Math.random() * (max - min + 1) ) + min;
}

------------------------------
The Boolean() Function
You can use the Boolean() function to find out if an expression (or a variable) is true:

Example
Boolean(10 > 9)

e.g <script>
document.getElementById("demo").innerHTML = Boolean(10 > 9);
</script>
ans: true

Or even easier:
<script>
document.getElementById("demo").innerHTML = 10 > 9;
</script>
Note: The Boolean value of an expression is the basis for all JavaScript comparisons and conditions.

<script>
document.getElementById("demo").innerHTML =
"100 is " + Boolean(100) + "<br>" +
"3.14 is " + Boolean(3.14) + "<br>" +
"-15 is " + Boolean(-15) + "<br>" +
"Any (not empty) string is " + Boolean("Hello") + "<br>" + "Empty string is " + 
Boolean("") + "<br>" +
"Even the string 'false' is " + Boolean('false') + "<br>" +
"Any expression (except zero) is " + Boolean(1 + 7 + 3.14) + "<br>"  + "Zero is  " + Boolean(0);
</script>

ANS:
100 is true
3.14 is true
-15 is true
Any (not empty) string is true
Empty string is false
Even the string 'false' is true
Any expression (except zero) is true
Zero is false

=====
The Boolean value of -0 (minus zero) is false:

let x = -0;
Boolean(x);

The Boolean value of undefined is false:

let x;
Boolean(x);
The Boolean value of null is false:

let x = null;
Boolean(x);
The Boolean value of false is (you guessed it) false:

let x = false;
Boolean(x);
The Boolean value of NaN is false:

let x = 10 / "Hallo";
Boolean(x);
----------------------
JavaScript Booleans as Objects
Normally JavaScript booleans are primitive values created from literals:

let x = false;
But booleans can also be defined as objects with the keyword new:

let y = new Boolean(false);
Example
let x = false;
let y = new Boolean(false);

// typeof x returns boolean
// typeof y returns object
Do not create Boolean objects.

The new keyword complicates the code and slows down execution speed.

Boolean objects can produce unexpected results:

----------
When using the == operator, x and y are equal:

let x = false;
let y = new Boolean(false);
document.getElementById("demo").innerHTML = (x==y);



When using the === operator, x and y are not equal:

let x = false;
let y = new Boolean(false);
document.getElementById("demo").innerHTML = (x===y);
==========================================================
JavaScript Comparison and Logical Operators

Comparison Operators
Comparison operators are used in logical statements to determine equality or difference between variables or values.

Given that x = 5, the table below explains the comparison operators:

Operator  Description Comparing Returns Try it
==  equal to  x == 8  false 
x == 5  true  
x == "5"  true  
=== equal value and equal type  x === 5 true  
x === "5" false 
!=  not equal x != 8  true  
!== not equal value or not equal type x !== 5 false 
x !== "5" true  
x !== 8 true  
> greater than  x > 8 false 
< less than x < 8 true  
>=  greater than or equal to  x >= 8  false 
<=  less than or equal to x <= 8  true  
======---------------------------------------------------------------------

Window setInterval()

Definition and Usage
The setInterval() method calls a function at specified intervals (in milliseconds).

The setInterval() method continues calling the function until clearInterval() is called, or the window is closed.

1 second = 1000 milliseconds.

Note
To execute the function only once, use the setTimeout() method instead.

To clear an interval, use the id returned from setInterval():

myInterval = setInterval(function, milliseconds);
Then you can to stop the execution by calling clearInterval():

clearInterval(myInterval);

EXAMPLES:
Say hello jedy every one second

1.
<!DOCTYPE html>
<html>
<body>

<h1>The Window Object</h1>
<h2>The setInterval() Method</h2>

<p id="demo"></p>

<script>
const element = document.getElementById("demo");
setInterval(sayHello, 1000);

function sayHello() {
  element.innerHTML += "Hello Jedy" + " ";
}
</script>

</body>
</html>

2. Display time in locale string
<!DOCTYPE html>
<html>
<body>

<h1>The Window Object</h1>
<h2>The setInterval() Method</h2>

<p id="demo"></p>

<script>
setInterval(myTimer, 1000);

function myTimer() {
  const date = new Date();
  document.getElementById("demo").innerHTML = date.toLocaleTimeString();
}
</script>

</body>
</html>

3.
<!DOCTYPE html>
<html>
<body>

<h1>The Window Object</h1>
<h2>The setInterval() and clearInterval() Methods</h2>

<p id="demo"></p>

<button onclick="myStopFunction()">Stop time</button>

<script>
const myInterval = setInterval(myTimer, 1000);

function myTimer() {
  const date = new Date();
  document.getElementById("demo").innerHTML = date.toLocaleTimeString();
}

function myStopFunction() {
  clearInterval(myInterval);
}
</script>

</body>
</html>

4. Progress bar: The width moves from 0 to 100% incrementing by 1% every 100milliseccond


<!DOCTYPE html>
<html>
<style>
#myProgress {
  width: 100%;
  height: 30px;
  position: relative;
  background-color: #ddd;
}

#myBar {
  background-color: #4CAF50;
  width: 10px;
  height: 30px;
  position: absolute;
}
</style>
<body>

<h1>JavaScript Progress Bar</h1>

<div id="myProgress">
  <div id="myBar"></div>
</div>

<br>
<button onclick="move()">Click Me</button> 

<script>
function move() {
  const element = document.getElementById("myBar");   
  let width = 0;
  const id = setInterval(frame, 100);
  function frame() {
    if (width == 100) {
      clearInterval(id);
    } 
    else {
      width++; 
      element.style.width = width + '%'; 
    }
  }
}
</script>

</body>
</html>

5. Change bg color

<!DOCTYPE html>
<html>
<body>

<h1>The Window Object</h1>
<h2>The setInterval() and clearInterval() Methods</h2>

<p>In this example, the setInterval() method executes the setColor() function once every 500 milliseconds
to toggle between two background colors.</p>

<button onclick="stopColor()">Stop Toggling</button>

<script>
myInterval = setInterval(setColor, 800);
 
function setColor() {
  let x = document.body;
  x.style.backgroundColor = x.style.backgroundColor == "yellow" ? "pink" : "yellow";
}
 
function stopColor() {
  clearInterval(myInterval);
}
</script>

</body>
</html>


6. Parameters passed:
Syntax
setInterval(function, milliseconds, param1, param2, ...)


<!DOCTYPE html>
<html>
<body>

<h1>The Window Object</h1>
<h2>The setInterval() Method</h2>

<p>In this example, we display the parameters passed to mytFunc() (does not work in IE9 and earlier).</p>

<p id="demo1"></p>

<p id="demo2" style="color:red"></p>

<script>
setInterval(myFunc, 2000, "param1", "param2");

function myFunc(p1, p2) {
  document.getElementById("demo1").innerHTML += "Hello";
  document.getElementById("demo2").innerHTML = "Parameters passed: " + p1 + " " + p2;
}
</script>

</body>
</html>

However, if you use an anonymous function it works in all browsers:

setInterval(function() {myFunc("param1", "param2")}, 2000);


--------=======
Window setTimeout()

The setTimeout() method calls a function after a number of milliseconds.

1 second = 1000 milliseconds.

Notes
The setTimeout() is executed only once.

If you need repeated executions, use setInterval() instead.

Use the clearTimeout() method to prevent the function from starting.

To clear a timeout, use the id returned from setTimeout():

myTimeout = setTimeout(function, milliseconds);
Then you can to stop the execution by calling clearTimeout():

clearTimeout(myTimeout);




examples:

<!DOCTYPE html>
<html>
<body>

<h1>The Window Object</h1>
<h2>The setTimeout() Method</h2>

<p>Wait 5 seconds for the greeting:</p>

<h2 id="demo"></h2>

<script>
const myTimeout = setTimeout(myGreeting, 5000);

function myGreeting() {
  document.getElementById("demo").innerHTML = "Happy Birthday!"
}
</script>

</body>
</html>

<!DOCTYPE html>
<html>
<body>

<h1>The Window Object</h1>
<h2>The setTimeout() and clearTimeout() Methods</h2>

<p>Click "Stop" to prevent myGreeting() to execute. (You have 5 seconds)</p>

<button onclick="myStopFunction()">Stop!</button>

<h2 id="demo"></h2>

<script>
const myTimeout = setTimeout(myGreeting, 5000);

function myGreeting() {
  document.getElementById("demo").innerHTML = "Happy Birthday!"
}

function myStopFunction() {
  clearTimeout(myTimeout);
}
</script>

</body>
</html>
=======================================
JavaScript if, else, and else if
Conditional statements are used to perform different actions based on different conditions.

Conditional Statements
Very often when you write code, you want to perform different actions for different decisions.

You can use conditional statements in your code to do this.

In JavaScript we have the following conditional statements:

Use if to specify a block of code to be executed, if a specified condition is true
Use else to specify a block of code to be executed, if the same condition is false
Use else if to specify a new condition to test, if the first condition is false
Use switch to specify many alternative blocks of code to be executed

-----------
The if Statement
Use the if statement to specify a block of JavaScript code to be executed if a condition is true.

Syntax
if (condition) {
  //  block of code to be executed if the condition is true
}
Note that if is in lowercase letters. Uppercase letters (If or IF) will generate a JavaScript error.

---------------
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript if</h2>

<p>Display "Good day!" if the hour is less than 18:00 or still retain the Good Evening:</p>

<p id="demo">Good Evening!</p>

<script>
if (new Date().getHours() > 18) {
  document.getElementById("demo").innerHTML = "Good day!";
}
</script>

</body>
</html>

-------------
The else Statement
Use the else statement to specify a block of code to be executed if the condition is false.

if (condition) {
  //  block of code to be executed if the condition is true
} else {
  //  block of code to be executed if the condition is false
}
Example
If the hour is less than 18, create a "Good day" greeting, otherwise "Good evening":

if (hour < 18) {
  greeting = "Good day";
} 
else {
  greeting = "Good evening";
}
=============
The else if Statement
Use the else if statement to specify a new condition if the first condition is false.

Syntax
if (condition1) {
  //  block of code to be executed if condition1 is true
} 
else if (condition2) {
  //  block of code to be executed if the condition1 is false and condition2 is true
} 
else {
  //  block of code to be executed if the condition1 is false and condition2 is false
}
Example
If time is less than 10:00, create a "Good morning" greeting, if not, but time is less than 20:00, create a "Good day" greeting, otherwise a "Good evening":

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript if .. else</h2>

<p>A time-based greeting:</p>

<p id="demo"></p>

<script>
const time = new Date().getHours();
let greeting;
if (time < 10) {
  greeting = "Good morning";
} 
else if (time < 20) {
  greeting = "Good day";
} 
else {
  greeting = "Good evening";
}
document.getElementById("demo").innerHTML = greeting;
</script>

</body>
</html>

==================
In JavaScript, the classList property of an HTML element provides a way to manipulate the classes of that element. The classList property returns an object that contains several methods that can be used to add, remove, toggle, or check the existence of CSS classes on the element.

Here are some of the most commonly used methods of the classList object:

1. add(className): Adds a CSS class to the element.

2. remove(className): Removes a CSS class from the element.

3. toggle(className): Toggles the presence of a CSS class on the element. If the class is present, it is removed. If the class is not present, it is added.

4. contains(className): Returns a Boolean value indicating whether the element has the specified CSS class.
You can use these methods to dynamically change the appearance or behavior of an element based on user interactions or other events. For example, you might use classList to change the background color of a button when it is clicked, or to show or hide a dropdown menu when a user hovers over a navigation link.

Here's an example that demonstrates how to use classList to add and remove a CSS class on an element:

<!DOCTYPE html>
<html>
<head>
  <style>
    .highlight {
      background-color: yellow;
      font-size: 24px;
    }
  </style>
</head>
<body>
  <button id="myButton">Click me</button>

  <script>
    let button = document.getElementById("myButton");

    // Add a CSS class when the button is clicked
    button.addEventListener("click", function() {
      button.classList.add("highlight");
    });

    // Remove the CSS class when the mouse leaves the button
    button.addEventListener("mouseleave", removeFunction);

     function removeFunction() {
      button.classList.remove("highlight");
     }
      
    
  </script>
</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <style>
    .highlight {
      background-color: yellow;
    }
  </style>
</head>
<body>
  <button id="myButton">Toggle highlight</button>
  <div id="myDiv">This is some text.</div>

  <script>
    let button = document.getElementById("myButton");
    let div = document.getElementById("myDiv");

    button.addEventListener("click", function() {
      div.classList.toggle("highlight");
    });
  </script>
</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <style>
    .highlight {
      background-color: yellow;
    }
  </style>
</head>
<body>
  <div id="myDiv" class="highlight">This is some text.</div>

  <script>
    let div = document.getElementById("myDiv");

    if (div.classList.contains("highlight")) {
      console.log("The 'highlight' class is present on the 'myDiv' element.");
    } 
    else {
      console.log("The 'highlight' class is not present on the 'myDiv' element.");
    }
  </script>
</body>
</html>


--------------------------------
JavaScript Switch Statement

The switch statement is used to perform different actions based on different conditions.

The JavaScript Switch Statement
Use the switch statement to select one of many code blocks to be executed.

Syntax
switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}
This is how it works:

The switch expression is evaluated once.
The value of the expression is compared with the values of each case.
If there is a match, the associated block of code is executed.
If there is no match, the default code block is executed.


<!DOCTYPE html>
<html>
<style>
.demo1 {
  background-color: yellow;
  font-size: 2.5rem;
  text-align: center;
}
</style>
<body>

<p id="demo"></p>


<script>
let today = new Date().getHours();
let greetings = "Good";

switch (today) {
case 1:
  greetings += " Morning Now";
  break;

case  10:
  greetings += " Morning Then";
  break;

case 17:
  greetings += " Morning Tomorrow";
  break;
  
default:
  greetings += " Morning Bye";
  break;
}
document.getElementById('demo').innerHTML = greetings;
document.getElementById('demo').classList.add("demo1"); 



</script>

</body>
</html>
----------
The default case does not have to be the last case in a switch block:

Example
switch (new Date().getDay()) {
  default:
    text = "Looking forward to the Weekend";
    break;
  case 6:
    text = "Today is Saturday";
    break;
  case 0:
    text = "Today is Sunday";
}
If default is not the last case in the switch block, remember to end the default case with a break.

-----------------
<!DOCTYPE html>
<html>
<style>
.demo1 {
  background-color: yellow;
  font-size: 2.5rem;
  text-align: center;
  a
}
</style>
<body>

<p id="demo"></p>


<script>
let today = new Date().getHours();
let greetings = "Good";

switch (today) {
  case 1:
    greetings += " Morning Now";
    break;
  case 2:
  case 3:
  case 4:
  case 5:
  case 6:
  case 7:
  case 8:
  case 9:
  case 10:
  case 11:
  case 12:
  case 13:
    greetings += " Morning Then";
    break;
  case 14:
  case 15:
  case 16:
  case 17:
  case 18:
  case 19:
  case 20:
  case 21:
  case 22:
    greetings += " Morning Tomorrow";
    break;
  default:
    greetings += " Morning Bye";
    break;
}
document.getElementById('demo').innerHTML = greetings;
document.getElementById('demo').classList.add("demo1");

//Note: You can't use the > and < operators directly in a case statement. Instead, you need to use separate case statements for each range of values you want to compare.
</script>

</body>
</html>
-------------
Switching Details
If multiple cases matches a case value, the first case is selected.

If no matching cases are found, the program continues to the default label.

If no default label is found, the program continues to the statement(s) after the switch.

Strict Comparison
Switch cases use strict comparison (===).

The values must be of the same type to match.

A strict comparison can only be true if the operands are of the same type.

Strict Comparison
Switch cases use strict comparison (===).

The values must be of the same type to match.

A strict comparison can only be true if the operands are of the same type.

In this example there will be no match for x:

Example
let x = "0";
switch (x) {
  case 0:
    text = "Off";
    break;
  case 1:
    text = "On";
    break;
  default:
    text = "No value found";
}

----------------------------------------------

JavaScript For Loop

JavaScript Loops
Loops are handy, if you want to run the same code over and over again, each time with a different value.

Often this is the case when working with arrays:

Instead of writing:

<script>
const cars = ["BMW", "Volvo", "Saab", "Ford", "Fiat", "Audi"];

let text = " ";
text += cars[0] + "<br>";
text += cars[1] + "<br>";
text += cars[2] + "<br>";
text += cars[3] + "<br>";
text += cars[4] + "<br>";
text += cars[5] + "<br>";


document.getElementById("demo").innerHTML = text;
</script>



You can write: 

<script>
const cars = ["BMW", "Volvo", "Saab", "Ford", "Fiat", "Audi"];

let text = "";
let i;
for (i = 0; i < cars.length; i++) {
  text += cars[i] + "<br>";
}

document.getElementById("demo").innerHTML = text;
</script>

Different Kinds of Loops
JavaScript supports different kinds of loops:

for - loops through a block of code a number of times
for/in - loops through the properties of an object
for/of - loops through the values of an iterable object
while - loops through a block of code while a specified condition is true
do/while - also loops through a block of code while a specified condition is true

1. The For Loop
The for statement creates a loop with 3 optional expressions:

for (expression 1; expression 2; expression 3) {
  // code block to be executed
}
Expression 1 is executed (one time) before the execution of the code block.

Expression 2 defines the condition for executing the code block.

Expression 3 is executed (every time) after the code block has been executed.

Example
for (let i = 0; i < 5; i++) {
  text += "The number is " + i + "<br>";
}

Expression 1
Normally you will use expression 1 to initialize the variable used in the loop (let i = 0).

This is not always the case. JavaScript doesn't care. Expression 1 is optional.

You can initiate many values in expression 1 (separated by comma):

Example
for (let i = 0, len = cars.length, text = ""; i < len; i++) {
  text += cars[i] + "<br>";
}
And you can omit expression 1 (like when your values are set before the loop starts):

Example
<script>
let text = "";

for (let i = 0; i < 5; i++) {
  text += "The number is " + i + "<br>";
}

document.getElementById("demo").innerHTML = text;
</script>

And you can omit expression 1 (like when your values are set before the loop starts):
<script>
const cars = ["BMW", "Volvo", "Saab", "Ford"];
let i = 2;
let len = cars.length;
let text = "";

for (; i < len; i++) {
  text += cars[i] + "<br>";
}

document.getElementById("demo").innerHTML = text;
</script>


Expression 2
Often expression 2 is used to evaluate the condition of the initial variable.

This is not always the case. JavaScript doesn't care. Expression 2 is also optional.

If expression 2 returns true, the loop will start over again. If it returns false, the loop will end.

If you omit expression 2, you must provide a break inside the loop. Otherwise the loop will never end. This will crash your browser.

Expression 3
Often expression 3 increments the value of the initial variable.

This is not always the case. JavaScript doesn't care. Expression 3 is optional.

Expression 3 can do anything like negative increment (i--), positive increment (i = i + 15), or anything else.

Expression 3 can also be omitted (like when you increment your values inside the loop):

Example
let i = 0;
let len = cars.length;
let text = "";
for (; i < len; ) {
  text += cars[i] + "<br>";
  i++;
}




Loop Scope
Using var in a loop:

Example
<script>
var i = 5;
for (var i = 0; i < 10; i++) {
  // some statements
}
document.getElementById("demo").innerHTML = i;
</script>

// Here i is 10


Using let in a loop:
Example
<script>
let i = 5;
for (let i = 0; i < 10; i++) {
  // some statements
}
document.getElementById("demo").innerHTML = i;
</script>

// Here i is 5
In the first example, using var, the variable declared in the loop redeclares the variable outside the loop.

In the second example, using let, the variable declared in the loop does not redeclare the variable outside the loop.

When let is used to declare the i variable in a loop, the i variable will only be visible within the loop.

=============================
The For In Loop
The JavaScript for in statement loops through the properties of an Object:

Syntax
for (key in object) {
  // code block to be executed
}

Example
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript For In Loop</h2>
<p>The for in statement loops through the properties of an object:</p>

<p id="demo"></p>

<script>
const person = {fname:"John", lname:"Doe", age:25}; 

let txt = "";
for (let x in person) {
  txt += person[x] + " ";
}

document.getElementById("demo").innerHTML = txt;

//ans: John Doe 25
</script>

</body>
</html>


For In Over Arrays
The JavaScript for in statement can also loop over the properties of an Array:

Syntax
for (variable in array) {
  code
}

<script>
const numbers = [45, 4, 9, 16, 25];

let txt = "";
for (let x in numbers) {
  txt += numbers[x] + "<br>"; 
}

document.getElementById("demo").innerHTML = txt;
</script>

Do not use for in over an Array if the index order is important.

The index order is implementation-dependent, and array values may not be accessed in the order you expect.

It is better to use a for loop, a for of loop, or Array.forEach() when the order is important.

Array.forEach()
The forEach() method calls a function (a callback function) once for each array element.

<script>
const numbers = [45, 4, 9, 16, 25];

let txt = "";
numbers.forEach(myFunction);
document.getElementById("demo").innerHTML = txt;

function myFunction(value, index, array) {
  txt += value + "<br>"; 
}
</script>

ans: 
45
4
9
16
25

Note that the function takes 3 arguments:

The item value
The item index
The array itself
The example above uses only the value parameter. It can be rewritten to:

Example
const numbers = [45, 4, 9, 16, 25];

let txt = "";
numbers.forEach(myFunction);

function myFunction(value) {
  txt += value;
}

ans: 
45
4
9
16
25

but
<script>
const numbers = [45, 4, 9, 16, 25];

let txt = "";
numbers.forEach(myFunction);
document.getElementById("demo").innerHTML = txt;

function myFunction(value, index, array) {
  txt += index + "<br>"; //Using index gives
}
</script>
ans:
0
1
2
3
4

and 
<script>
const numbers = [45, 4, 9, 16, 25];

let txt = "";
numbers.forEach(myFunction);
document.getElementById("demo").innerHTML = txt;

function myFunction(value, index, array) {
  txt += array + "<br>"; 
}
</script>
ans:
45,4,9,16,25
45,4,9,16,25
45,4,9,16,25
45,4,9,16,25
45,4,9,16,25


The forEach() method is used to execute a provided function once for each element in an array. The function takes up to three arguments:

Current Value (required): The value of the current element being processed in the array.
Index (optional): The index of the current element being processed in the array.
Array (optional): The array that forEach() is being called upon.
Here is an example usage of forEach() method with a function that takes three arguments:

const numbers = [1, 2, 3];

numbers.forEach(function(currentValue, index, array) {
  console.log("Current Value: " + currentValue + ", Index: " + index + ", Array: " + array);
});

ANS:
Current Value: 1, Index: 0, Array: 1,2,3
Current Value: 2, Index: 1, Array: 1,2,3
Current Value: 3, Index: 2, Array: 1,2,3



In this example, the forEach() method is called on the numbers array and passed a function with three arguments. The function logs the current value, index, and array for each element in the numbers array.


Note I can decide to name them anything e.g
const numbers = [1, 2, 3];

numbers.forEach(function(myValue, myIndex, myArray) {
  console.log("Current Value: " + myValue + ", myIndex: " + index + ", Array: " + myArray);
});


=====================
JavaScript For Of
The For Of Loop
The JavaScript for of statement loops through the values of an iterable object.

It lets you loop over iterable data structures such as Arrays, Strings, Maps, NodeLists, and more:

Syntax
for (variable of iterable) {
  // code block to be executed
}
variable - For every iteration the value of the next property is assigned to the variable. Variable can be declared with const, let, or var.

iterable - An object that has iterable properties.

e.g
Looping over an Array
<script>
const cars = ["BMW", "Volvo", "Mini"];

let text = "";
for (let x of cars) {
  text += x + "<br>";
}

document.getElementById("demo").innerHTML = text;
</script>
ans
BMW
Volvo
Mini


Looping over a String


<script>
let language = "JavaScript";

let text = "";
for (let x of language) {
  text += x + "<br>";
}

document.getElementById("demo").innerHTML = text;
</script>
ans
J
a
v
a
S
c
r
i
p
t


An iterable object is any object that implements the iteration protocol by providing a method called Symbol.iterator. This method returns an iterator object, which allows the object to be iterated through using a for...of loop or other iterable methods like forEach(), map(), and reduce().

In JavaScript, the following built-in objects are iterable:

Arrays
Strings
Maps
Sets
TypedArrays
Arguments object (available inside functions)
In addition, many other objects in JavaScript can be made iterable by implementing the Symbol.iterator method. For example, you can create your own iterable object by defining a Symbol.iterator method on a custom object.

Here's an example of an iterable object that can be iterated through using a for...of loop:

const myIterable = {
  [Symbol.iterator]() {
    let i = 0;
    const items = ['foo', 'bar', 'baz'];
    return {
      next() {
        const value = items[i++];
        const done = i > items.length;
        return { value, done };
      }
    };
  }
};

for (const item of myIterable) {
  console.log(item);
}

ans
foo
bar
baz

In this example, we define an object myIterable with a Symbol.iterator method that returns an iterator object. This iterator object has a next() method that returns an object with two properties: value and done. The value property represents the next value in the iteration, and done indicates whether the iteration is complete.

We can then iterate through myIterable using a for...of loop, and each iteration will log the next value in the iteration to the console.

================================================================================
JavaScript While Loop
Loops can execute a block of code as long as a specified condition is true.

The While Loop
The while loop loops through a block of code as long as a specified condition is true.

Syntax
while (condition) {
  // code block to be executed
}


Example
In the following example, the code in the loop will run, over and over again, as long as a variable (i) is less than 10:

Example

<script>
let text = "";
let i = 0;
while (i < 10) {
  text += "<br>The number is " + i;
  i++;
}
document.getElementById("demo").innerHTML = text;
</script>
ans
The number is 0
The number is 1
The number is 2
The number is 3
The number is 4
The number is 5
The number is 6
The number is 7
The number is 8
The number is 9

If you forget to increase the variable used in the condition, the loop will never end. This will crash your browser.

The Do While Loop
The do while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.

Syntax
do {
  // code block to be executed
}
while (condition);

<script>
let text = ""
let i = 0;

do {
  text += "<br>The number is " + i;
  i++;
}
while (i < 10);  

document.getElementById("demo").innerHTML = text;
</script>

-------------------------------------
JavaScript Break and Continue
The break statement "jumps out" of a loop.

The continue statement "jumps over" one iteration in the loop.

The Break Statement
You have already seen the break statement used in an earlier chapter of this tutorial. It was used to "jump out" of a switch() statement.

The break statement can also be used to jump out of a loop:

<script>
let text = "";
for (let i = 0; i < 10; i++) {
  if (i === 3) { 
  break;
  }
  text += "The number is " + i + "<br>";
}
document.getElementById("demo").innerHTML = text;
</script>

ANS
The number is 0
The number is 1
The number is 2



The Continue Statement
The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.

This example skips the value of 3:
<script>
let text = "";
for (let i = 0; i < 10; i++) {
  if (i === 3) {
  continue;
  }
  text += "The number is " + i + "<br>";
}
document.getElementById("demo").innerHTML = text;
</script>
ANS
The number is 0
The number is 1
The number is 2
The number is 4
The number is 5
The number is 6
The number is 7
The number is 8
The number is 9




JavaScript Labels
To label JavaScript statements you precede the statements with a label name and a colon:

label:
statements
The break and the continue statements are the only JavaScript statements that can "jump out of" a code block.

Syntax:

break labelname;

continue labelname;
The continue statement (with or without a label reference) can only be used to skip one loop iteration.

The break statement, without a label reference, can only be used to jump out of a loop or a switch.

With a label reference, the break statement can be used to jump out of any code block:

Example
const cars = ["BMW", "Volvo", "Saab", "Ford"];
list: {
  text += cars[0] + "<br>";
  text += cars[1] + "<br>";
  break list;
  text += cars[2] + "<br>";
  text += cars[3] + "<br>";
}

ANS:
BMW
Volvo


A code block is a block of code between { and }.


<script>
  
         document.write("Entering the loop!<br /> ");

         outerloop: // This is the label name
            for (let i = 0; i < 5; i++) {
               document.write("Outerloop: " + i + "<br />");

               innerloop:
                  for (let j = 0; j < 5; j++) {
                     if (j > 3 ) break ; // Quit the innermost loop
                     if (i == 2) break innerloop; // Do the same thing
                     if (i == 4) break outerloop; // Quit the outer loop
                     document.write("Innerloop: " + j + " <br />");
                  }
            }
            document.write("<br /> Exiting the loop!<br /> ");

</script>

ans
Outerloop: 0
Innerloop: 0
Innerloop: 1
Innerloop: 2
Innerloop: 3
Outerloop: 1
Innerloop: 0
Innerloop: 1
Innerloop: 2
Innerloop: 3
Outerloop: 2
Outerloop: 3
Innerloop: 0
Innerloop: 1
Innerloop: 2
Innerloop: 3
Outerloop: 4

The code is using nested loops with a labeled break statement to control the flow of the program. Here is how the code works:

The outer loop runs five times, with the loop variable i starting at 0 and increasing by 1 each time until it reaches 4.
For each iteration of the outer loop, the inner loop runs five times, with the loop variable j starting at 0 and increasing by 1 each time until it reaches 4.
The inner loop has three conditions inside it: the first one checks if j is greater than 3, and if it is, the inner loop is exited immediately. This means that the loop will only run up to the third iteration.
The second condition checks if i is equal to 2, and if it is, the innerloop label is used to break out of the inner loop only. This means that the outer loop will continue to run.
The third condition checks if i is equal to 4, and if it is, the outerloop label is used to break out of the outer loop. This means that the entire loop will be exited, and the program will move on to the next statement after the loop.
Therefore, the output shows that the outer loop runs from 0 to 4, and for each iteration of the outer loop, the inner loop runs from 0 to 3 (because of the first condition). The output shows that the loop runs as expected, printing out the values of i and j for each iteration. When i is equal to 2, the inner loop is exited early, so the output skips the last iteration of the inner loop for that value of i. When i is equal to 4, the outer loop is exited early, so the output skips the last two iterations of the outer loop. Finally, the output shows that the loop has completed with the message "Exiting the loop!" printed at the end.



NOTE: the condition "if (i == 2) break innerloop;" is there to break out of the inner loop when i is equal to 2. However, in the output you provided, we do not see the inner loop continue past j = 3 when i = 2. This is because the "if (j > 3 ) break ;" condition is also present, which causes the inner loop to exit when j is greater than 3.

So when i is equal to 2, the inner loop will exit after printing Innerloop: 0, Innerloop: 1, Innerloop: 2, and Innerloop: 3, and will not continue to execute the rest of the inner loop statements, including the "document.write("Entering the loop!<br /> ");" statement.














The main difference between these two code snippets is the scope of the variable i.


In the first example,  var i = 5; declares a variable var with a value of 5 in the outer scope of the script. Inside the for loop, a new variable i is declared with the var keyword, which is function-scoped. This means that any changes made to i inside the loop are reflected outside of the loop. Therefore, when document.getElementById("demo").innerHTML = i; is executed outside the loop, it will display the final value of i, which is 10.

In the second  example, let i = 5; declares a variable i with a value of 5 in the outer scope of the script. Then, inside the for loop, a new variable i is declared with the let keyword, which is block-scoped to the loop body. This means that any changes made to i inside the loop are not reflected outside of the loop. Therefore, when document.getElementById("demo").innerHTML = i; is executed outside the loop, it will display the original value of i, which is 5.


It's worth noting that using var can sometimes lead to unexpected behavior and make it harder to reason about the code. It's generally recommended to use let and const instead, as they have block scope and are more predictable.


In the first example, i is initialized to 0 and the loop continues as long as i < 10. Since the loop runs 10 times, i will take on the values 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9, and then on the 11th iteration, the loop will exit because i is no longer less than 10.

After the loop, the value of i is 10, which is then assigned to the innerHTML property of the demo element using the statement document.getElementById("demo").innerHTML = i;. Therefore, the value displayed on the webpage will be 10.

I apologize for the confusion earlier, and thank you for bringing this to my attention.
==================
JavaScript HTML DOM Events 

onchange - This event occurs when the value of an input element has been changed and focus is lost.
Example: <input type="text" onchange="myFunction()">

oninput - This event occurs when the value of an input element is being changed.
Example: <input type="text" oninput="myFunction()">

onfocus - This event occurs when an input element gets focus.
Example: <input type="text" onfocus="myFunction()">

onblur - This event occurs when an input element loses focus.
Example: <input type="text" onblur="myFunction()">

onkeydown - This event occurs when a key is pressed down while the input element is in focus.
Example: <input type="text" onkeydown="myFunction()">

onkeyup - This event occurs when a key is released while the input element is in focus.
Example: <input type="text" onkeyup="myFunction()">

onkeypress - This event occurs when a key is pressed while the input element is in focus.
Example: <input type="text" onkeypress="myFunction()">

onsubmit
<form onsubmit="myFunction()">
  <input type="text" name="username" placeholder="Enter username">
  <input type="submit" value="Submit">
</form>

<script>
function myFunction() {
  alert("The form was submitted!");
}
</script>

onreset
<form onreset="myFunction()">
  <input type="text" name="username" placeholder="Enter username">
  <input type="reset" value="Reset">
</form>

<script>
function myFunction() {
  alert("The form was reset!");
}
</script>


MOUSE EVENTS
onclick
document.getElementById("myButton").addEventListener("click", function() {
  alert("Button clicked!");
});

oncontextmenu
ondblclick
document.getElementById("myElement").addEventListener("dblclick", function() {
  alert("Element double-clicked!");
});

onmousedown
document.getElementById("myElement").addEventListener("mousedown", function() {
  console.log("Mouse button down!");
});

onmouseenter
onmouseleave
onmousemove
onmouseover
document.getElementById("myElement").addEventListener("mouseover", function() {
  this.style.backgroundColor = "red";
});

onmouseout
document.getElementById("myElement").addEventListener("mouseout", function() {
  this.style.backgroundColor = "white";
});

onmouseup

ALSO
<!DOCTYPE html>
<html>
<head>
<script>
function writeText(txt) {
  document.getElementById("desc").innerHTML = txt;
}
</script>
</head>

<body>
<img src ="planets.gif" width ="145" height ="126" alt="Planets" usemap="#planetmap" />

<map name="planetmap">
<area shape ="rect" coords ="0,0,82,126"
onmouseover="writeText('The Sun and the gas giant planets like Jupiter are by far the largest objects in our Solar System.')"
href ="sun.htm" target ="_blank" alt="Sun" />

<area shape ="circle" coords ="90,58,3"
onmouseover="writeText('The planet Mercury is very difficult to study from the Earth because it is always so close to the Sun.')"
href ="mercur.htm" target ="_blank" alt="Mercury" />

<area shape ="circle" coords ="124,58,8"
onmouseover="writeText('Until the 1960s, Venus was often considered a twin sister to the Earth because Venus is the nearest planet to us, and because the two planets seem to share many characteristics.')"
href ="venus.htm" target ="_blank" alt="Venus" />
</map> 

<p id="desc">Mouse over the sun and the planets and see the different descriptions.</p>

</body>
</html>


LOAD EVENTS
1. window.onload: This event fires when the entire web page has finished loading, including all its resources such as images, stylesheets, and scripts.
Example:
window.onload = function() {
   // Code to execute after the page has finished loading
};

2. document.onload: This event fires when the HTML document has finished loading, but not necessarily all the external resources.
document.onload = function() {
   // Code to execute after the document has finished loading
};

3. image.onload: This event fires when an image has finished loading.
Example:
var myImage = document.getElementById("myImage");
myImage.onload = function() {
   // Code to execute after the image has finished loading
};

4. script.onload: This event fires when a JavaScript file has finished loading.
Example:
var myScript = document.createElement("script");
myScript.src = "myScript.js";
myScript.onload = function() {
   // Code to execute after the script has finished loading
};
document.body.appendChild(myScript);


5. style.onload: This event fires when a stylesheet has finished loading.
Example:


var myStyle = document.createElement("link");
myStyle.rel = "stylesheet";
myStyle.href = "myStyle.css";
myStyle.onload = function() {
   // Code to execute after the stylesheet has finished loading
};
document.head.appendChild(myStyle);

6. onerror:This is triggered if an error occurs
<!DOCTYPE html>
<html>
<head>
<script>
function imgError() {
  alert('The image could not be loaded.');
}
</script>
</head>
<body>

<img src="image.gif" onerror="imgError()">
<p>A function is triggered if an error occurs when loading the image. The function shows an alert box with a text.
In this example we refer to an image that does not exist, therefore the onerror event occurs.</p>

</body>
</html>

7. unload: when the browser closes the document

<!DOCTYPE html>
<html>
<head>
<script>
function myFunction() {
  alert("Thank you for visiting W3Schools!");
}
</script>
</head>
<body onunload="myFunction()">

<h2>Welcome to my Home Page</h2>
<p>Close this window or press F5 to reload the page.</p>

</body>
</html>

<!DOCTYPE html>
<html>
  <head>
    <title>Unload event example</title>
  </head>
  <body>
    <h1>Example Page</h1>
    <p>Try navigating away from this page.</p>
    <script>
      window.addEventListener('unload', function(event) {
        event.preventDefault();
        event.returnValue = ''; // Required for Chrome
        alert('Are you sure you want to leave this page?');
      });
    </script>
  </body>
</html>

<!DOCTYPE html>
<html>
  <head>
    <title>Example Page</title>
  </head>
  <body>
    <h1>Example Page</h1>
    <p>Click the button below to try to leave this page:</p>
    <button id="myButton">Leave Page</button>
    <script>
      // add a listener for the beforeunload event
      window.addEventListener('beforeunload', function(event) {
        // Cancel the event
        event.preventDefault();
        // Chrome requires returnValue to be set
        event.returnValue = '';
      });

      // add a click listener for the button
      const button = document.getElementById('myButton');
      button.addEventListener('click', function() {
        alert('You clicked the button and want to leave!');
      });
    </script>
  </body>
</html>


<!DOCTYPE html>
<html>
  <head>
    <title>Example Page</title>
  </head>
  <body>
    <h1>Example Page</h1>
    <p>This page has unsaved changes.</p>
    <script>
      window.addEventListener('beforeunload', function (e) {
        // Cancel the event
        e.preventDefault();
        // Chrome requires returnValue to be set
        e.returnValue = '';
      });
    </script>
  </body>
</html>



<!DOCTYPE html>
<html>
  <head>
    <title>Beforeunload Example</title>
    <script>
      window.addEventListener('beforeunload', function(event) {
        // Cancel the event
        event.preventDefault();
        // Chrome requires returnValue to be set
        event.returnValue = '';
      });
    </script>
  </head>
  <body>
    <h1>Beforeunload Example</h1>
    <p>Click the button below to leave the page:</p>
    <button onclick="window.location.href = 'https://www.google.com';">Leave Page</button>
    <button onclick="alert('You chose to stay on the page.');">Stay on Page</button>
  </body>
</html>

This code will show two buttons, one to leave the page and another to stay on the page. When the user tries to leave the page, a confirmation dialog box will be displayed with two buttons - "Leave" and "Stay". If the user clicks the "Leave" button, the page will be unloaded and the user will be redirected to the specified URL. If the user clicks the "Stay" button, an alert message will be displayed and the user will remain on the current page.

Note that the unload event is not supported in some modern browsers, and the use of this event may not be appropriate for all situations. It's generally better to use other techniques, such as the beforeunload event, to prompt the user before leaving a page.


8. onresize: The onresize event is fired when the size of the browser window is changed. This event can be used to perform actions when the user resizes the window, such as adjusting the layout or content of the page.

<!DOCTYPE html>
<html>
<head>
<script>
function myFunction() {
  var w = window.outerWidth;
  var h = window.outerHeight;
  var txt = "Window size: width = " + w + ", height = " + h;
  document.getElementById("demo").innerHTML = txt;
}
</script>
</head>

<body onresize="myFunction()">

<p>Try to resize the browser window.</p>

<p id="demo"></p>

<p>Note: this example will not work properly in IE8 and earlier. IE8 and earlier do not support the outerWidth/outerHeight propery of the window object. It shows you the size asyou keep resizing</p>

</body>
</html>

and

<!DOCTYPE html>
<html>
  <head>
    <title>onresize Example</title>
  </head>
  <body onresize="resizeHandler()">
    <h1>Resize the browser window to see the effect!</h1>
    <p id="demo"></p>

    <script>
      function resizeHandler() {
        const screenWidth = window.innerWidth;
        const screenHeight = window.innerHeight;
        document.getElementById("demo").innerHTML = "Window size: " + screenWidth + " x " + screenHeight;
      }
    </script>
  </body>
</html>

Note:
window.innerWidth and window.outerWidth are properties of the window object in JavaScript that are used to get the width of the browser window.

window.innerWidth returns the width of the viewport (i.e., the part of the browser window that displays the web page content) in pixels, excluding the width of the vertical scrollbar if it is displayed. This property is read-only.

window.outerWidth returns the width of the entire browser window in pixels, including the width of the vertical scrollbar (if any) and any other elements such as the address bar, bookmarks bar, and other toolbars. This property is also read-only.

So, the main difference between window.innerWidth and window.outerWidth is that innerWidth gives you the width of the viewport while outerWidth gives you the width of the entire browser window.

Here's an example:

Suppose you have a browser window with a viewport width of 800 pixels and a scrollbar width of 20 pixels, and the address bar and other toolbars have a total width of 100 pixels. In this case, window.innerWidth would return 800 pixels (excluding the scrollbar), and window.outerWidth would return 920 pixels (including the scrollbar and the toolbars).

NOTE: The load event is fired when the whole page has loaded, including all dependent resources such as stylesheets, scripts, iframes, and images. This is in contrast to DOMContentLoaded , which is fired as soon as the page DOM has been loaded, without waiting for resources to finish loading.






NOTE:
SO WE HAVE 
1. document.head.appendChild(myStyle);
2. document.body.appendChild(myScript);

e.g This will add the div after the script tag
 <!DOCTYPE html>
<html>
  <head>
    <title>Append div to body</title>
  </head>
  <body>
    <h1>Example Page</h1>

    
    <script>
      // create a new div element
      const newDiv = document.createElement('div');

      // add some text to the div
      const newText = document.createTextNode('This is a new div!');
      newDiv.appendChild(newText);

      // append the div to the end of the document body
      document.body.append(newDiv);
    </script>
  </body>
</html>

so to place the div before the script tag, us:
<!DOCTYPE html>
<html>
  <head>
    <title>Append div to body</title>
  </head>
  <body>
    <h1>Example Page</h1>
    <div id="newDiv"></div>
    <script>
      // create a new div element
      const newDiv = document.createElement('div');
      //Add a class to it
      newDiv.classList.add('myDivJed');

      // add some text to the div
      const newText = document.createTextNode('This is a new div!');
      newDiv.appendChild(newText);

      // insert the div before the script tag
      const scriptTag = document.querySelector('script');
      document.body.insertBefore(newDiv, scriptTag);
    </script>
  </body>
</html>


==============================

JavaScript Iterables

Iterables are iterable objects (like Arrays).

Iterables can be accessed with simple and efficient code.

Iterables can be iterated over with for..of loops

The For Of Loop
The JavaScript for..of statement loops through the elements of an iterable object.

Syntax
for (variable of iterable) {
  // code block to be executed
}
Iterating
Iterating is easy to understand.

It simply means looping over a sequence of elements.

Here are some easy examples:

Iterating over a String
Iterating over an Array
Iterating Over a String
You can use a for..of loop to iterate over the elements of a string:

Example
const name = "W3Schools";

for (const x of name) {
  // code block to be executed
}

<script>
// Create a String
const name = "W3Schools";

// List all Elements
let text = ""
for (const x of name) {
  text += x + "<br>";
}

document.getElementById("demo").innerHTML = text;
</script>

Iterating Over an Array
You can use a for..of loop to iterate over the elements of an Array:
<script>
// Create aa Array
const letters = ["a","b","c"];

// List all Elements
let text = "";
for (const x of letters) {
  text += x + "<br>";
}

document.getElementById("demo").innerHTML = text;
</script>

Iterating Over a Set
You can use a for..of loop to iterate over the elements of a Set:
<script>
// Create a Set
const letters = new Set(["a","b","c"]);

// List all Elements
let text = "";
for (const x of letters) {
  text += x + "<br>";
}

document.getElementById("demo").innerHTML = text;
</script>

Iterating Over a Map
You can use a for..of loop to iterate over the elements of a Map:
<script>
// Create a Map
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);

// List all entries
let text = "";
for (const x of fruits) {
  text += x + "<br>";
}

document.getElementById("demo").innerHTML = text;
</script>

============================

JavaScript Sets
In JavaScript, a Set is a built-in data structure that allows you to store a collection of unique values. It is similar to an array, but it only stores unique values and does not allow duplicates.


A JavaScript Set is a collection of unique values.

Each value can only occur once in a Set.

Essential Set Methods
Method  Description
new Set() Creates a new Set
add() Adds a new element to the Set
delete()  Removes an element from a Set
has() Returns true if a value exists in the Set
forEach() Invokes a callback for each element in the Set
values()  Returns an iterator with all the values in a Set
Property  Description
size  Returns the number of elements in a Set


How to Create a Set
You can create a JavaScript Set by:

Passing an Array to new Set()
Create a new Set and use add() to add values
Create a new Set and use add() to add variables
The new Set() Method
Pass an Array to the new Set() constructor:

Example
// Create a Set
const letters = new Set(["a","b","c"]);

e.g
<!DOCTYPE html>
<html>
<body>
<h2>JavaScript Sets</h2>
<p>Create a Set from an Array:</p>

<p id="demo"></p>

<script>
// Create a Set
const letters = new Set(["a","b","c", "c", "d"]);

// Display set.size
document.getElementById("demo").innerHTML = letters.size;
</script>
ans: 4 not 5
</body>
</html>


To create a Set, you can use the Set() constructor function, like this:


let mySet = new Set();
You can also pass an iterable object, such as an array or a string, to the Set() constructor to initialize the set with some values:

let mySet = new Set([1, 2, 3]);

Once you have created a Set, you can add elements to it using the add() method:
If you add equal elements, only the first will be saved:


mySet.add(4);

You can also remove elements from a Set using the delete() method:
mySet.delete(4);

To check if a Set contains a certain element, you can use the has() method:
mySet.has(3); // returns true
mySet.has(4); // returns false

You can get the size of a Set using the size property:
mySet.size; // returns 3



so,
<script>
// Create a Set
const letters = new Set(["a","b","c"]);
lettersNow = letters.add('d');

// Display set.size
document.getElementById("demo").innerHTML = lettersNow;
console.log(lettersNow);
</script>
ans:
[object Set]
(["a","b","c", "d"]);



To iterate over the elements of a Set, you can use the forEach() method or use the for...of loop:


mySet.forEach(function(element) {
  console.log(element);
});

for(let element of mySet) {
  console.log(element);
}

Note that Set objects do not have indexed positions, so you cannot access elements by their position or use array methods such as push() or pop() on them.

<script>
// Create a Set
const letters = new Set(["a","b","c"]);

let jed = "";
for(let element of letters) {
  console.log(element);
  jed+=element + "<br>"; //same result as in console.log above
}

document.getElementById("demo").innerHTML = jed;
</script>



Create a Set and add values:

Example
// Create a Set
const letters = new Set();

// Add Values to the Set
letters.add("a");
letters.add("b");
letters.add("c");

Create a Set and add variables:

Example
// Create a Set
const letters = new Set();

// Create Variables
const a = "a";
const b = "b";
const c = "c";

// Add Variables to the Set
letters.add(a);
letters.add(b);
letters.add(c);


The forEach() Method
The forEach() method invokes (calls) a function for each Set element:

Example
// Create a Set
const letters = new Set(["a","b","c"]);

// List all Elements
let text = "";
letters.forEach (function(value) {
  text += value;
})

The values() Method
The values() method returns a new iterator object containing all the values in a Set:

Example
<script>
// Create a Set
const letters = new Set(["a","b","c"]);

// Display set.size
document.getElementById("demo").innerHTML = letters.values();
</script>
ans
[object Set Iterator]

Now you can use the Iterator object to access the elements:
<script>
// Create a Set
const letters = new Set(["a","b","c"]);

// List all Elements
let text = "";
for (const x of letters.values()) {
  text += x + "<br>";
}

document.getElementById("demo").innerHTML = text;
</script>
ans:
a
b
c


WHEN TO USE SET

You can use a Set in JavaScript whenever you need to store a collection of unique values. Some common use cases for a Set include:

1.Removing duplicates from an array: You can convert an array to a Set to remove any duplicate values, and then convert it back to an array if needed. 
For example:
let myArray = [1, 2, 2, 3, 3, 3];
let mySet = new Set(myArray);
let uniqueArray = Array.from(mySet); // [1, 2, 3]

e.g

<script>
let myArray = [1, 2, 2, 3, 3, 3];
let mySet = new Set(myArray);
let uniqueArray = Array.from(mySet); // [1, 2, 3]

// Display set.size
document.getElementById("demo").innerHTML = "The array before is: " +myArray + " The array now is: " + uniqueArray;
</script>
Ans
The array before is: 1,2,2,3,3,3 The array now is: 1,2,3


2. Checking if a value exists in a collection: You can use the has() method to quickly check if a value exists in a Set. This is much faster than looping through an array to search for a value. For example:

let mySet = new Set([1, 2, 3]);
mySet.has(2); // returns true
mySet.has(4); // returns false

e.g 
<script>
let mySet = new Set([1, 2, 3]);
mySet.has(2); // returns true
mySet.has(4); // returns false

// Display set
document.getElementById("demo").innerHTML ="mySet.has(2) is " + mySet.has(2) + " mySet.has(4) is " + mySet.has(4);
</script>
Ans
mySet.has(2) is true mySet.has(4) is false


3. Performing set operations: Set objects support various set operations such as union, intersection, and difference. For example, you can use the Set methods to find the unique values in two arrays or to find the common values between two arrays. Here's an example of finding the unique values in two arrays:

let array1 = [1, 2, 3];
let array2 = [2, 3, 4];
let set1 = new Set(array1);
let set2 = new Set(array2);
let unionSet = new Set([...set1, ...set2]); // [1, 2, 3, 4]


4. Storing keys without values: Set objects can also be used to store a collection of keys without associated values. This can be useful when you need to keep track of a list of unique identifiers. For example:

let mySet = new Set();
mySet.add("a");
mySet.add("b");
mySet.add("c");
mySet.has("a"); // returns true
mySet.delete("b");
mySet.size; // returns 2


In summary, you can use a Set in JavaScript whenever you need to store a collection of unique values, perform set operations, or keep track of a list of unique identifiers.



===================================================================================
JavaScript Maps
A Map holds key-value pairs where the keys can be any datatype.

A Map remembers the original insertion order of the keys.

Essential Map Methods
Method  Description
new Map() Creates a new Map
set() Sets the value for a key in a Map
get() Gets the value for a key in a Map
delete()  Removes a Map element specified by the key
has() Returns true if a key exists in a Map
forEach() Calls a function for each key/value pair in a Map
entries() Returns an iterator with the [key, value] pairs in a Map
Property  Description
size  Returns the number of elements in a Map
How to Create a Map
You can create a JavaScript Map by:

Passing an Array to new Map()
Create a Map and use Map.set()
The new Map() Method
You can create a Map by passing an Array to the new Map() constructor:

Example
// Create a Map
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);

document.getElementById("demo").innerHTML = fruits.get("apples");
document.getElementById("demo").innerHTML = fruits.size;
</script>
ans: 
500
3


The set() Method
You can add elements to a Map with the set() method:

Example
// Create a Map
const fruits = new Map();

// Set Map Values
fruits.set("apples", 500);
fruits.set("bananas", 300);
fruits.set("oranges", 200);
document.getElementById("demo").innerHTML = fruits.get("apples");


JavaScript's Map and Object are both used for storing collections of data. However, there are some differences between them:

Keys: The keys in a Map can be any data type (including objects and functions) whereas the keys in an Object are always strings or symbols.

Order: The keys in a Map are ordered whereas the keys in an Object are not. This means that if you iterate over the keys of a Map, they will always be returned in the same order that they were added, whereas the order of the keys in an Object is implementation-dependent.

Size: A Map can store an unlimited number of key/value pairs, whereas an Object has a maximum size of 4,294,967,295 key/value pairs.

Methods: Map has built-in methods for getting the size of the map, adding and removing items, iterating over the keys and values, and more. Object has similar methods, but they are not as extensive as the methods provided by Map.

In summary, Map is generally used when you need to store an ordered collection of key/value pairs where the keys can be any data type, while Object is best used when you need a simple collection of key/value pairs where the keys are always strings or symbols.




Wht do you mean by object can store a symbol, show me  sample?
Sure! In JavaScript, symbols are a primitive data type that can be used as keys in an object. Here's an example of an object that uses a symbol as a key:


const mySymbol = Symbol('my symbol');
const myObj = {};

myObj[mySymbol] = 'some value';

console.log(myObj[mySymbol]); // Output: 'some value'
console.log(myObj);  // {Symbol(my symbol): 'some value'}


In the example above, we define a new symbol mySymbol using the Symbol constructor. We then create an empty object myObj, and set the value associated with the mySymbol key in the object using square bracket notation.

Note that symbols are always unique, so even if you create another symbol with the same description ('my symbol'), it will not be equal to mySymbol.


Sure, here's an example of an object that uses a string as a key:

const myObj = {};

myObj['myString'] = 'some value';

console.log(myObj['myString']); // Output: 'some value'
In the example above, we create an empty object myObj, and set the value associated with the 'myString' key in the object using square bracket notation. Since 'myString' is a string, it can be used as a key in the object. When we log the value associated with the 'myString' key, we get the value 'some value'.


<script>
   const myObj = {};

  myObj['myString'] = 'some value';
  myObj['myNumber'] = 150;
  

  console.log(myObj['myString']); // Output: 'some value'
  console.log(myObj['myNumber']); // Output: 150
  console.log(myObj) //{myString: 'some value', myNumber: 150}

// Display some data from the map:
document.getElementById("demo").innerHTML = myObj.myString + " " + myObj.myNumber; // some value 150
</script>


The set() method can also be used to change existing Map values:

Example
<script>
// Create a Map
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);

fruits.set("apples", 200);

document.getElementById("demo").innerHTML = fruits.get("apples");
</script>

The get() Method
The get() method gets the value of a key in a Map:

Example
fruits.get("apples");    // Returns 500

The size Property
The size property returns the number of elements in a Map:

Example
<script>
// Create a Map
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);

document.getElementById("demo").innerHTML = fruits.size; // 3
</script>

The delete() Method
The delete() method removes a Map element:

Example
<script>
// Create a Map
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);

// Delete an Element
fruits.delete("apples");

document.getElementById("demo").innerHTML = fruits.size; //2
</script>

The has() Method
The has() method returns true if a key exists in a Map:

Example
<script>
// Create a Map
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);

document.getElementById("demo").innerHTML = fruits.has("apples"); //true
</script>

JavaScript Objects vs Maps
Differences between JavaScript Objects and Maps:
Object  Map
Iterable  Not directly iterable Directly iterable
Size  Do not have a size property Have a size property
Key Types Keys must be Strings (or Symbols) Keys can be any datatype
Key Order Keys are not well ordered Keys are ordered by insertion
Defaults  Have default keys Do not have default keys


forEach() Method
The forEach() method calls a function for each key/value pair in a Map:

<script>
// Create a Map
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);

let text = "";
fruits.forEach (function(value, key) {
  text += key + ' = ' + value + "<br>"
})

document.getElementById("demo").innerHTML = text;
</script>

ans
apples = 500
bananas = 300
oranges = 200

The order of the key and value parameters does matter, as it affects how the keys and values are accessed in the forEach function. 

so its (value, key) not (key, value)

The entries() Method
The entries() method returns an iterator object with the [key, values] in a Map:
<script>
// Create a Map
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);

let text = "";
for (const x of fruits.entries()) {
  text += x + "<br>";
}

document.getElementById("demo").innerHTML = text;
</script>




----------------------------------------------------------------

HTML Web Storage API

HTML web storage; better than cookies.

What is HTML Web Storage?
With web storage, web applications can store data locally within the user's browser.

Before HTML5, application data had to be stored in cookies, included in every server request. Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance.

Unlike cookies, the storage limit is far larger (at least 5MB) and information is never transferred to the server.

Web storage is per origin (per domain and protocol). All pages, from one origin, can store and access the same data.

HTML Web Storage Objects
HTML web storage provides two objects for storing data on the client:

window.localStorage - stores data with no expiration date
window.sessionStorage - stores data for one session (data is lost when the browser tab is closed)
Before using web storage, check browser support for localStorage and sessionStorage:

if (typeof(Storage) !== "undefined") {
  // Code for localStorage/sessionStorage.
} else {
  // Sorry! No Web Storage support..
}

e.g
 <script>
   if (typeof(Storage) !== "undefined") {
  // Code for localStorage/sessionStorage.
    document.getElementById('demo').innerText = 'Your browser supports web storage';
   } 
   else {
      // Sorry! No Web Storage support..
      document.getElementById('demo').innerText = 'Your browser does not supports web storage';

   }
  </script>

  HTML Web Storage, also known as Local Storage, is a way for web pages to store data locally in the user's browser. This data can be retrieved and used later, even if the user closes their browser or navigates away from the website.

There are two types of storage objects in HTML Web Storage: localStorage and sessionStorage. 
1. localStorage stores data permanently, while 
2. sessionStorage stores data for the duration of the user's session, which means the data will be lost once the user closes their browser.

Syntax

window.sessionStorage
Or just:
sessionStorage

Save Data to Session Storage
sessionStorage.setItem("key", "value");

Read Data from Session Storage
let lastname = sessionStorage.getItem("key");

Remove Data from Session Storage
sessionStorage.removeItem("key");

Remove All (Clear session Storage)
sessionStorage.clear();

Note:
sessionStorage.removeItem("userCount") removes the userCount key and its corresponding value from the sessionStorage object. So if you only want to remove a specific item from sessionStorage, you should use removeItem().

On the other hand, sessionStorage.clear() removes all key-value pairs from the sessionStorage object. So if you want to clear the entire sessionStorage, you should use clear().


Here's an example of how to use localStorage to store and retrieve data:


// Store data in local storage
localStorage.setItem('name', 'John');

// Retrieve data from local storage
var name = localStorage.getItem('name');
console.log(name); // Output: "John"


In this example, we first use the setItem() method to store the value "John" under the key "name" in localStorage. We can then retrieve this value using the getItem() method and store it in a variable called name.

Here's another example that shows how to use sessionStorage:


// Store data in session storage
sessionStorage.setItem('age', '25');

// Retrieve data from session storage
var age = sessionStorage.getItem('age');
console.log(age); // Output: "25"


In this example, we use the setItem() method to store the value "25" under the key "age" in sessionStorage. We then retrieve this value using the getItem() method and store it in a variable called age.

It's important to note that data stored in HTML Web Storage is specific to the domain and protocol of the website that stored it. This means that data stored by one website cannot be accessed by another website, even if they are on the same domain.

A domain is the name of a website, such as "google.com" or "facebook.com". Here are some examples of how HTML Web Storage works within the context of domains:

Let's say you visit a website called "example.com" and that website stores some data in localStorage. The data will only be accessible by scripts running on pages within the "example.com" domain. If you visit another website, such as "google.com", scripts on that website will not be able to access the data stored by "example.com".

If you visit a website called "subdomain.example.com", any data stored in localStorage by that website will also be accessible by scripts on pages within the "example.com" domain, but not by scripts on pages from other domains, such as "google.com".

If you visit a website that is served over a different protocol, such as "https://" instead of "http://", that website will be considered a different domain for the purposes of HTML Web Storage. This means that data stored by a website served over "http://" will not be accessible by a website served over "https://", even if they have the same domain name.


The localStorage Object
The localStorage object stores the data with no expiration date. The data will not be deleted when the browser is closed, and will be available the next day, week, or year.

Example
// Store
localStorage.setItem("lastname", "Smith");

// Retrieve
document.getElementById("result").innerHTML = localStorage.getItem("lastname");

e.g

<!DOCTYPE html>
<html>
<body>

<div id="result"></div>

<script>
// Check browser support
if (typeof(Storage) !== "undefined") {
  // Store
  localStorage.setItem("lastname", "Smith");
  // Retrieve
  document.getElementById("result").innerHTML = localStorage.getItem("lastname");
} 
else {
  document.getElementById("result").innerHTML = "Sorry, your browser does not support Web Storage...";
}
</script>

</body>
</html>


The example above could also be written like this:

// Store
localStorage.lastname = "Smith";
// Retrieve
document.getElementById("result").innerHTML = localStorage.lastname;


The syntax for removing the "lastname" localStorage item is as follows:

localStorage.removeItem("lastname");


Note: Name/value pairs are always stored as strings. Remember to convert them to another format when needed!

The following example counts the number of times a user has clicked a button. In this code the value string is converted to a number to be able to increase the counter:

Example
if (localStorage.clickcount) {
  localStorage.clickcount = Number(localStorage.clickcount) + 1;
} else {
  localStorage.clickcount = 1;
}
document.getElementById("result").innerHTML = "You have clicked the button " +
localStorage.clickcount + " time(s).";

e.g

<!DOCTYPE html>
<html>
<head>

</head>
<body>

<p><button onclick="clickCounter()" type="button">Click me!</button></p>
<div id="result"></div>
<p>Click the button to see the counter increase.</p>
<p>Close the browser tab (or window), and try again, and the counter will continue to count (is not reset).</p>

<script>
function clickCounter() {
  if (typeof(Storage) !== "undefined") {
    if (localStorage.clickcount) {
      localStorage.clickcount = Number(localStorage.clickcount)+1;
    } 
    else {
      localStorage.clickcount = 1;
    }
    document.getElementById("result").innerHTML = "You have clicked the button " + localStorage.clickcount + " time(s).";
  } 
  else {
    document.getElementById("result").innerHTML = "Sorry, your browser does not support web storage...";
  }
}
</script>
</body>
</html>

Note: if you click this button say 4 times and refresh this page, and come back, it will start from 4 because you used localStorage.

unlike sessionStorage which will clean if you close the browser or tab:

<!DOCTYPE html>
<html>
<head>

</head>
<body>

<p><button onclick="clickCounter()" type="button">Click me!</button></p>
<div id="result"></div>
<p>Click the button to see the counter increase.</p>
<p>Close the browser tab (or window), and try again, and the counter will continue to count (is not reset).</p>

<script>
function clickCounter() {
  if (typeof(Storage) !== "undefined") {
    if (sessionStorage.clickcount) {
      sessionStorage.clickcount = Number(sessionStorage.clickcount)+1;
    } 
    else {
      sessionStorage.clickcount = 1;
    }
    document.getElementById("result").innerHTML = "You have clicked the button " + sessionStorage.clickcount + " time(s).";
  } 
  else {
    document.getElementById("result").innerHTML = "Sorry, your browser does not support web storage...";
  }
}
</script>
</body>
</html>


Note: we can use the increment ++ or use +1 as used above. Also, clickCount can be any name of choice to represent the key.

<!DOCTYPE html>
<html>
<head>

</head>
<body>

<p><button onclick="clickCounter()" type="button">Click me!</button></p>
<div id="result"></div>
<p>Click the button to see the counter increase.</p>
<p>Close the browser tab (or window), and try again, and the counter will continue to count (is not reset).</p>

<script>
function clickCounter() {
  if (typeof(Storage) !== "undefined") {
    if (sessionStorage.userCount) {
      sessionStorage.userCount++;
    } 
    else {
      sessionStorage.userCount = 1;
    }
    document.getElementById("result").innerHTML = "You have clicked the button " + sessionStorage.userCount + " time(s).";
  } 
  else {
    document.getElementById("result").innerHTML = "Sorry, your browser does not support web storage...";
  }
}
</script>
</body>
</html>



<!DOCTYPE html>
<html>
<head>

</head>
<body>

<p><button onclick="clickCounter()" type="button">Click me!</button></p>
<div id="result"></div>
<p>Click the button to see the counter increase.</p>
<p>Close the browser tab (or window), and try again, and the counter will continue to count (is not reset).</p>

<script>
function clickCounter() {
  if (typeof(Storage) !== "undefined") {
    if (!sessionStorage.userCount) {
      sessionStorage.userCount = 1;
    } 
    else {
      sessionStorage.userCount++;
    }
    document.getElementById("result").innerHTML = "You have clicked the button " + sessionStorage.userCount + " time(s).";
  } 
  else {
    document.getElementById("result").innerHTML = "Sorry, your browser does not support web storage...";
  }
}
</script>
</body>
</html>


The exclamation mark ! in the if statement if (!sessionStorage.userCount) is a logical NOT operator. It is used to negate the value of the sessionStorage.userCount variable.

In JavaScript, an undefined variable evaluates to false in a boolean context. Therefore, the !sessionStorage.userCount expression evaluates to true when the sessionStorage.userCount variable is undefined. When the ! operator is used, it negates the boolean value of the expression. So, !true is false, and !false is true.

In the modified code, the if statement checks if the sessionStorage.userCount variable is undefined by using the ! operator to negate its value. If it is undefined, the code sets the value of sessionStorage.userCount to 1. If it is not undefined, the code increments its value by 1.

using removeItem

<!DOCTYPE html>
<html>
<head>

</head>
<body>

<p><button onclick="clickCounter()" type="button">Click me!</button></p>
<div id="result"></div>
<p>Click the button to see the counter increase.</p>
<p>Close the browser tab (or window), and try again, and the counter will continue to count (is not reset).</p>

<script>
function clickCounter() {
  if (typeof(Storage) !== "undefined") {
    if (!sessionStorage.userCount) {
      sessionStorage.userCount = 1;
    } 
    else {
      sessionStorage.userCount++;
    }
    document.getElementById("result").innerHTML = "You have clicked the button " + sessionStorage.userCount + " time(s).";
    if (sessionStorage.userCount >= 10) {
      sessionStorage.removeItem("userCount");
      document.getElementById("result").innerHTML = "Counter removed from session storage.";
    }
  } 
  else {
    document.getElementById("result").innerHTML = "Sorry, your browser does not support web storage...";
  }
}
</script>
</body>
</html>


To remove the session storage when the button is clicked and prevent further storage on this page, you can modify the clickCounter() function to remove the userCount item from the session storage and then disable the button.


<!DOCTYPE html>
<html>
<head>

</head>
<body>

<p><button onclick="clickCounter()" type="button">Click me!</button></p>
<div id="result"></div>
<p>Click the button to see the counter increase.</p>
<p>Close the browser tab (or window), and try again, and the counter will continue to count (is not reset).</p>

<script>
function clickCounter() {
  if (typeof(Storage) !== "undefined") {
    if (!sessionStorage.userCount) {
      sessionStorage.userCount = 1;
    } 
    else {
      sessionStorage.userCount++;
    }
    document.getElementById("result").innerHTML = "You have clicked the button " + sessionStorage.userCount + " time(s).";
    if (sessionStorage.userCount >= 10) {
      sessionStorage.removeItem("userCount");
      document.getElementById("result").innerHTML = "Counter removed from session storage.";
      document.getElementsByTagName("button")[0].disabled = true;
    }
  } 
  else {
    document.getElementById("result").innerHTML = "Sorry, your browser does not support web storage...";
  }
}
</script>
</body>
</html>

You can view the data stored in local and session storage in the developer tools of your web browser.

To view the data stored in local storage, follow these steps:

Open your web page in a web browser.
Open the developer tools by pressing F12 or right-clicking on the page and selecting "Inspect".
Select the "Application" tab in the developer tools.
In the left-hand panel, expand the "Local Storage" section to see the key-value pairs stored in local storage.
To view the data stored in session storage, follow the same steps as above, but select the "Session Storage" section in the left-hand panel instead of the "Local Storage" section.

In both cases, you should see a list of the key-value pairs stored in storage for your web page. You can click on a key-value pair to see the details, including the key name, value, and data type. You can also delete a key-value pair by selecting it and clicking the "Delete" button.




You can use web storage in your website for various purposes such as:

Storing user preferences: You can use local storage to store user preferences like theme, language, font-size, etc., so that the website can load the user's preferences next time they visit the website.

Storing user inputs: You can use local storage to temporarily store user inputs like form data, search queries, etc., so that if the user accidentally navigates away from the page, their inputs are not lost.
Note: Note that storing sensitive information such as passwords in localStorage or cookies is not recommended. You should use a secure server-side database to store user information instead.

Storing shopping cart data: You can use local storage to store shopping cart data so that if the user leaves the website and comes back later, their shopping cart items are still there.

Storing user session data: You can use session storage to store temporary session data like login information, user authentication tokens, etc., so that the user remains logged in across multiple pages on the website.

Storing website performance data: You can use local storage to store website performance data like page load times, user interactions, etc., for website analytics purposes.



E.g

<!DOCTYPE html>
<html>
<head>
  <title>Local Storage for User Input Details</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/water.css@2/out/dark.css">

</head>
<body>
  <form action="config.php" method="post">
  <label for="name">Name:</label>
  <input type="text" id="name" name="name"><br><br>

  <label for="email">Email:</label>
  <input type="email" id="email" name="email"><br><br>

  <label for="message">Message:</label><br>
  <textarea id="message" name="message"></textarea><br><br>

  <button type="submit" onclick="storeInputs()">Submit</button>
</form>




<script>
    function retrieveStoredInputs() {
      if (localStorage.name) {
        document.getElementById('name').value = localStorage.name;
      }
      if (localStorage.email) {
        document.getElementById('email').value = localStorage.email;
      }
      if (localStorage.message) {
        document.getElementById('message').value = localStorage.message;
      }
    }

    function storeInputs() {
      localStorage.name = document.getElementById('name').value;
      localStorage.email = document.getElementById('email').value;
      localStorage.message = document.getElementById('message').value;
    }

    window.onload = function() {
      retrieveStoredInputs();
    };

    window.onbeforeunload = function() {
      storeInputs();
    };


</script>
</body>
</html>








================================================================================================================
HTML Web Workers API
A web worker is a JavaScript running in the background, without affecting the performance of the page.

What is a Web Worker?
When executing scripts in an HTML page, the page becomes unresponsive until the script is finished.

A web worker is a JavaScript that runs in the background, independently of other scripts, without affecting the performance of the page. You can continue to do whatever you want: clicking, selecting things, etc., while the web worker runs in the background.

HTML Web Workers is a feature of modern web browsers that allows developers to run JavaScript code in the background of a web page, without blocking the main thread or user interface. This can improve the performance and responsiveness of web pages, particularly for computationally intensive tasks.

Web Workers work by creating a separate thread of execution in the browser, which can run JavaScript code independently of the main thread. This allows long-running or processor-intensive tasks to be run in the background, while the user continues to interact with the web page.

Web Workers can communicate with the main thread of the web page using a messaging system, allowing them to exchange data or pass messages back and forth. This makes it possible to build more complex and interactive web applications that can perform complex operations without slowing down the user interface.

Web Workers are supported in most modern web browsers, including Chrome, Firefox, Safari, and Edge. They are implemented using the HTML5 Web Workers API, which provides a simple interface for creating and managing worker threads in JavaScript code.

Check Web Worker Support
Before creating a web worker, check whether the user's browser supports it:

if (typeof(Worker) !== "undefined") {
  // Yes! Web worker support!
  // Some code.....
} else {
  // Sorry! No Web Worker support..
}


Create a Web Worker File
Now, let's create our web worker in an external JavaScript.

Here, we create a script that counts. The script is stored in the "demo_workers.js" file:

var i = 0;

function timedCount() {
  i = i + 1;
  postMessage(i);
  setTimeout("timedCount()",500);
}
timedCount();



The important part of the code above is the postMessage() method - which is used to post a message back to the HTML page.

Note: Normally web workers are not used for such simple scripts, but for more CPU intensive tasks.

Create a Web Worker Object
Now that we have the web worker file, we need to call it from an HTML page.

The following lines checks if the worker already exists, if not - it creates a new web worker object and runs the code in "demo_workers.js":

if (typeof(w) == "undefined") {
  w = new Worker("demo_workers.js");
}
Then we can send and receive messages from the web worker.

Add an "onmessage" event listener to the web worker.

w.onmessage = function(event){
  document.getElementById("result").innerHTML = event.data;
};
When the web worker posts a message, the code within the event listener is executed. The data from the web worker is stored in event.data.

Terminate a Web Worker
When a web worker object is created, it will continue to listen for messages (even after the external script is finished) until it is terminated.

To terminate a web worker, and free browser/computer resources, use the terminate() method:

w.terminate();
Reuse the Web Worker
If you set the worker variable to undefined, after it has been terminated, you can reuse the code:

w = undefined;



HTML Web Workers Example
The example below creates a simple web worker that count numbers in the background:

<!DOCTYPE html>
<html>
<body>

<p>Count numbers: <output id="result"></output></p>
<button onclick="startWorker()">Start Worker</button> 
<button onclick="stopWorker()">Stop Worker</button>

<p><strong>Note:</strong> Internet Explorer 9 and earlier versions do not support Web Workers.</p>

<script>
let w;

function startWorker() {
  if(typeof(Worker) !== "undefined") {
    if(typeof(w) == "undefined") {
      w = new Worker("demo_workers.js");
    }
    w.onmessage = function(event) {
      document.getElementById("result").innerHTML = event.data;
    };
  } else {
    document.getElementById("result").innerHTML = "Sorry, your browser does not support Web Workers...";
  }
}

function stopWorker() { 
  w.terminate();
  w = undefined;
}
</script>

</body>
</html>

also, you can do:
1. create index.html

<!DOCTYPE html>
<html>
  <head>
    <title>Web Worker Example</title>
  </head>
  <body>
    <h1>Web Worker Example</h1>
    <button onclick="startWorker()">Start Worker</button>
    <button onclick="stopWorker()">Stop Worker</button>
    <p id="result"></p>

    <script>
      let worker;

      function startWorker() {
        if (typeof(Worker) !== "undefined") {
          if (typeof(worker) == "undefined") {
            worker = new Worker("myworker.js");
          }
          worker.onmessage = function(event) {
            document.getElementById("result").innerHTML = event.data;
          };
        } else {
          document.getElementById("result").innerHTML = "Web Workers are not supported in this browser.";
        }
      }

      function stopWorker() {
        worker.terminate();
        worker = undefined;
      }
    </script>
  </body>
</html>


2. create myWorker.js

let i = 0;

function timedCount() {
  i = i + 1;
  postMessage(i);
  setTimeout("timedCount()",500);
}

timedCount();



This code defines an HTML page with two buttons: "Start Worker" and "Stop Worker". When the "Start Worker" button is clicked, it creates a new web worker using the "myworker.js" script. The worker script increments a counter and sends the current value back to the main thread using the "postMessage" function. The main thread receives this message and updates the "result" paragraph with the new value.

When the "Stop Worker" button is clicked, it terminates the worker thread using the "terminate" function.

Note that this is a simple example, and web workers can be used for much more complex tasks. However, the basic structure of creating a worker, sending messages, and terminating the worker is the same.






Should i create the myScript.js or it craetes automatically?
In the example code I provided, you will need to create a separate file called myworker.js that contains the code for the web worker. This file is referenced in the main HTML file using the line:


When the startWorker() function is called, it creates a new instance of the Worker object and passes the filename of the worker script to the constructor.

So you will need to create the myworker.js file separately and add your worker code to it.

Web Workers and the DOM
Since web workers are in external files, they do not have access to the following JavaScript objects:

The window object
The document object
The parent object
















----------------------------------------------------------

JavaScript typeof
In JavaScript, there are 5 different data types that can contain values:

string
number
boolean
object
function

There are 6 types of objects:

Object
Date
Array
String
Number
Boolean

And 2 data types that cannot contain values:

null
undefined



The typeof Operator
You can use the typeof operator to find the data type of a JavaScript variable.

Example
<script>
document.getElementById("demo").innerHTML = 
"'John' is " + typeof "John" + "<br>" +
"3.14 is " + typeof 3.14 + "<br>" +
"NaN is " + typeof NaN + "<br>" +
"false is " + typeof false + "<br>" +
"true is " + typeof true + "<br>" +
"[1, 2, 3, 4] is " + typeof [1, 2, 3, 4] + "<br>" +
"{name:'John', age:34} is " + typeof {name:'John', age:34} + "<br>" +
"new Date() is " + typeof new Date() + "<br>" +
"function () {} is " + typeof function () {} + "<br>" +
"myCar is " + typeof myCar + "<br>" +
"null is " + typeof null;
</script>

You cannot use typeof to determine if a JavaScript object is an array (or a date).



typeof "John"                 // Returns "string"
typeof 3.14                   // Returns "number"
typeof NaN                    // Returns "number"
typeof false                  // Returns "boolean"
typeof [1,2,3,4]              // Returns "object"
typeof {name:'John', age:34}  // Returns "object"
typeof new Date()             // Returns "object"
typeof function () {}         // Returns "function"
typeof myCar                  // Returns "undefined" *
typeof null                   // Returns "object"

Primitive Data
A primitive data value is a single simple data value with no additional properties and methods.

The typeof operator can return one of these primitive types:

string
number
boolean
undefined
Example
typeof "John"              // Returns "string"
typeof 3.14                // Returns "number"
typeof true                // Returns "boolean"
typeof false               // Returns "boolean"
typeof x     



Complex Data
The typeof operator can return one of two complex types:

function
object
The typeof operator returns "object" for objects, arrays, and null.

The typeof operator does not return "object" for functions.

Example
typeof {name:'John', age:34} // Returns "object"
typeof [1,2,3,4]             // Returns "object" (not "array", see note below)
typeof null                  // Returns "object"
typeof function myFunc(){}   // Returns "function"
The typeof operator returns "object" for arrays because in JavaScript arrays are objects.


===========================================================
The constructor Property
The constructor property returns the constructor function for all JavaScript variables.

Example
"John".constructor                // Returns function String()  {[native code]}
or
let myName = "Jedy";
console.log(myName.constructor);

(3.14).constructor                // Returns function Number()  {[native code]}
false.constructor                 // Returns function Boolean() {[native code]}
[1,2,3,4].constructor             // Returns function Array()   {[native code]}
{name:'John',age:34}.constructor  // Returns function Object()  {[native code]}
new Date().constructor            // Returns function Date()    {[native code]}
function () {}.constructor        // Returns function Function(){[native code]}
You can check the constructor property to find out if an object is an Array (contains the word "Array"):


<script>
const fruits = ["Banana", "Orange", "Apple"];
document.getElementById("demo").innerHTML = isArray(fruits);

function isArray(myArray) {
  return myArray.constructor.toString().indexOf("Array") > -1;
}
</script>

const fruits = ["Banana", "Orange", "Apple"];
This creates an array of strings with three elements: "Banana", "Orange", and "Apple". The const keyword declares a constant variable, which means that its value cannot be changed once it is assigned.

document.getElementById("demo").innerHTML = isArray(fruits);
This line uses the document.getElementById() method to get the HTML element with the ID "demo" and sets its innerHTML property to the result of the isArray() function called with the fruits array as its argument.

function isArray(myArray) {
This line defines a function called isArray that takes one argument, myArray.

return myArray.constructor.toString().indexOf("Array") > -1;
This line checks if the constructor property of the myArray argument is a string containing the word "Array". The toString() method is used to get the string representation of the constructor, and the indexOf() method checks if the string contains the word "Array". The function returns true if the constructor is an array, and false otherwise.

So, overall, this code defines an array of fruits, checks if it is an array using the isArray() function, and displays the result on an HTML element with the ID "demo". The displayed result will be true, since fruits is an array.




Or even simpler, you can check if the object is an Array function:

<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = isArray(fruits);

function isArray(myArray) {
  return myArray.constructor === Array;
}
</script>

ans: true

You can check the constructor property to find out if an object is a Date (contains the word "Date"):

Example
function isDate(myDate) {
  return myDate.constructor.toString().indexOf("Date") > -1;
}

Or even simpler, you can check if the object is a Date function:

Example
function isDate(myDate) {
  return myDate.constructor === Date;
}

=======================================
Undefined
In JavaScript, a variable without a value, has the value undefined. The type is also undefined.

Example
<script>
let car;
document.getElementById("demo").innerHTML =
car + "<br>" + typeof car;
</script>
// Value is undefined, type is undefined

Any variable can be emptied, by setting the value to undefined. The type will also be undefined.

 let myName = undefined;
 console.log(myName);//undefined
 ================
 Empty Values
An empty value has nothing to do with undefined.

An empty string has both a legal value and a type.

Example
let car = "";    // The value is "", the typeof is "string"

===========================
Null
In JavaScript null is "nothing". It is supposed to be something that doesn't exist.

Unfortunately, in JavaScript, the data type of null is an object.

You can consider it a bug in JavaScript that typeof null is an object. It should be null.

You can empty an object by setting it to null:

Example
let person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
person = null;    // Now value is null, but type is still an object

e.g
<script>
let person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
person = null;
document.getElementById("demo").innerHTML = typeof person;
</script>

also

<script>
   let person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
   person = null;
  document.getElementById("demo").innerHTML = typeof person + 
  "<br>" +
   person.firstName;

   ans:
    Uncaught TypeError: Cannot read properties of null (reading 'firstName')
    at Tester_js.html:17:11

 
  </script>

  You can also empty an object by setting it to undefined:

Example
let person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
person = undefined;   // Now both value and type is undefined

Difference Between Undefined and Null
undefined and null are equal in value but different in type:

typeof undefined           // undefined
typeof null                // object

null === undefined         // false
null == undefined          // true


-----------------------------------------------------
The instanceof Operator
The instanceof operator returns true if an object is an instance of the specified object:

Example
const cars = ["Saab", "Volvo", "BMW"];

(cars instanceof Array);
(cars instanceof Object);
(cars instanceof String);
(cars instanceof Number);

ans
true
true
false
false

---------------------------------
The void Operator
The void operator evaluates an expression and returns undefined. This operator is often used to obtain the undefined primitive value, using "void(0)" (useful when evaluating an expression without using the return value).

Example
<a href="javascript:void(0);">
  Useless link
</a>

<a href="javascript:void(document.body.style.backgroundColor='red');">
  Click me to change the background color of body to red
</a>

In JavaScript, the void operator is a unary operator that takes one argument and returns the value undefined. It is often used to prevent the browser from following a hyperlink when a user clicks on it. Here are some examples of how the void operator can be used in JavaScript:

1. Preventing a hyperlink from following:
<a href="http://example.com" onclick="void(0);">Click me</a>
In this example, the onclick event handler is set to void(0) which will prevent the browser from following the hyperlink when the user clicks on the link.
NOTE:
USE
<a href="http://www.facebook.com" onclick="void(0);">Facebook-1</a>
<a href="http://www.facebook.com" onclick="return false;">Facebook-2</a>

2. Creating a JavaScript bookmarklet:

javascript:void(alert("Hello, World!"));

e.g 
void(alert("Hello, World!"));


In this example, the void operator is used to ensure that the script is executed in the current page context and not redirected to a new page. The code will display an alert box with the message "Hello, World!" when executed.

3. Specifying an expression as having no value:

const result = void (1 + 2);
console.log(result); // outputs: undefined


In this example, the void operator is used to evaluate an expression (1 + 2) and return undefined. The value of undefined is then assigned to the result variable.

Overall, the void operator is a simple but useful tool in JavaScript for preventing unwanted behavior and returning a value of undefined.






i clicked this and it went why <a href="http://www.facebook.com" onclick="void(0);">Click me</a>
When you click on the hyperlink <a href="http://www.facebook.com" onclick="void(0);">Click me</a>, the onclick event handler is triggered. In this case, the void operator with the argument 0 is used to prevent the default behavior of the hyperlink, which is to open the Facebook website in a new tab or window.

The void operator with the argument 0 evaluates to undefined, which means that nothing will happen when you click on the hyperlink. Therefore, the browser won't follow the link to Facebook, and the current page will stay open.






It's possible that the onclick event handler was not properly implemented in your HTML code or that there was an error in your JavaScript code that prevented it from executing.

You can try the following code instead:

css
Copy code
<a href="http://www.facebook.com" onclick="return false;">Click me</a>
This code uses the return statement with the value false in the onclick event handler to prevent the default behavior of the hyperlink. When you click on the hyperlink, the onclick event handler will return false, and the browser won't follow the link to Facebook.

If this code still doesn't work, make sure that your browser is configured to allow JavaScript to run and that there are no errors in your code.


<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Operators</h1>
<h2>The void Operator</h2>

<p>
<a href="javascript:void(0);">Useless link</a>
</p>

<p>
<a href="javascript:void(document.body.style.backgroundColor='red');">
Click me to change the background color of body to red.</a>
</p>
The code uses the void operator to ensure that the browser does not navigate away from the current page when the hyperlink is clicked. The code inside the void() function is then executed as a JavaScript statement.

</body>
</html>


==========================================================================================

JavaScript Type Conversion


Converting Strings to Numbers
Converting Numbers to Strings
Converting Dates to Numbers
Converting Numbers to Dates
Converting Booleans to Numbers
Converting Numbers to Booleans

JavaScript Type Conversion
JavaScript variables can be converted to a new variable and another data type:

By the use of a JavaScript function
Automatically by JavaScript itself
Converting Strings to Numbers
The global method Number() converts a variable (or a value) into a number.

A numeric string (like "3.14") converts to a number (like 3.14).

An empty string (like "") converts to 0.

A non numeric string (like "John") converts to NaN (Not a Number).

Examples
These will convert:

1. Number("3.14")
let Num = Number("3.142");
console.log(Num);//3.142
console.log(typeof Num);//Number

2.Number(Math.PI)
let Num = Number(Math.PI);
console.log(Num);//3.141592653589793
console.log(typeof Num);//Number

note:
let Num = Math.PI;
console.log(Num);//3.141592653589793
console.log(typeof Num);//Number


3. Number(" ")
let Num = Number(" ");
console.log(Num);//0
console.log(typeof Num);//Number

4. Number("")
let Num = Number("");
console.log(Num);//0
console.log(typeof Num);//Number


These will not convert:
5. Number("99 88")
let Num = Number("99 88");
console.log(Num);//NaN
console.log(typeof Num);//Number

6. Number("John")
let Num = Number("John");
console.log(Num);//NaN
console.log(typeof Num);//Number

Number Methods

Method  Description
Number()  Returns a number, converted from its argument
parseFloat()  Parses a string and returns a floating point number
parseInt()  Parses a string and returns an integer

let Num = parseFloat("25.67");
console.log(Num);//25.67
console.log(typeof Num);//Number

let Num = parseInt("25.67");
console.log(Num);//25
console.log(typeof Num);//Number

//Using + sign
let Num = +("25.7");
console.log(Num);//25.7
console.log(typeof Num);//Number

===========================
The Unary + Operator
The unary + operator can be used to convert a variable to a number:

Example
let y = "5";      // y is a string
let x = + y;      // x is a number

If the variable cannot be converted, it will still become a number, but with the value NaN (Not a Number):

Example
let y = "John";   // y is a string
let x = + y;      // x is a number (NaN)

Converting Numbers to Strings
The global method String() can convert numbers to strings.

It can be used on any type of numbers, literals, variables, or expressions:

Example
String(x)         // returns a string from a number variable x
String(123)       // returns a string from a number literal 123
String(100 + 23)  // returns a string from a number from an expression

let myString = String(25.375555);
console.log(myString);//25.375555
console.log(typeof myString);// String


The Number method toString() does the same.

Example
x.toString()
(123).toString()
(100 + 23).toString()

e.g 
let ourString = (25.375555);
  myString = ourString.toString();
  console.log(myString);//25.375555
  console.log(typeof myString);// String

  let ourString = (25.375555);
  //Add a base system
  myString = ourString.toString(16);
  console.log(myString);//19.60245f5ad96a
  console.log(typeof myString);// String


More Methods

Method  Description
1. toExponential() Returns a string, with a number rounded and written using exponential notation. e.g

let ourString = (25.3719);
  myString = ourString.toExponential();
  console.log(myString);//2.53719e+1
  console.log(typeof myString);// String

  let ourString = (25.3719);
  myString = ourString.toExponential(3);
  //The number of arguments shows your ans
  console.log(myString);//2.537e+1
  console.log(typeof myString);// String

2. toFixed() Returns a string, with a number rounded and written with a specified number of decimals.

let ourString = (25.3789);
  myString = ourString.toFixed(2);
  //The number of arguments shows your number of deccimal place
  console.log(myString);//25.38
  console.log(typeof myString);// String


3. toPrecision() Returns a string, with a number written with a specified length

let ourString = (25.3789);
  myString = ourString.toPrecision(3);
  //The number of arguments shows your number of significant  places
  console.log(myString);//25.4
  console.log(typeof myString);// Strings


  =================
  Converting Dates to Numbers
The global method Number() can be used to convert dates to numbers.

d = new Date();
Number(d)          // returns 1404568027739
The date method getTime() does the same.

d = new Date();
d.getTime()        // returns 1404568027739

Converting Dates to Strings
The global method String() can convert dates to strings.

String(Date())  // returns "Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)"
The Date method toString() does the same.

Example
Date().toString()  // returns "Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)"


Converting Booleans to Numbers
The global method Number() can also convert booleans to numbers.

Number(false)     // returns 0
Number(true)      // returns 1
Converting Booleans to Strings
The global method String() can convert booleans to strings.

String(false)      // returns "false"
String(true)       // returns "true"
The Boolean method toString() does the same.

false.toString()   // returns "false"
true.toString()    // returns "true"


=====================================================================
Automatic Type Conversion
When JavaScript tries to operate on a "wrong" data type, it will try to convert the value to a "right" type.

The result is not always what you expect:

5 + null    // returns 5         because null is converted to 0
"5" + null  // returns "5null"   because null is converted to "null"
"5" + 2     // returns "52"      because 2 is converted to "2"
"5" - 2     // returns 3         because "5" is converted to 5
"5" * "2"   // returns 10        because "5" and "2" are converted to 5 and 2



Automatic String Conversion
JavaScript automatically calls the variable's toString() function when you try to "output" an object or a variable:

document.getElementById("demo").innerHTML = myVar;

// if myVar = {name:"Fjohn"}  // toString converts to "[object Object]"
// if myVar = [1,2,3,4]       // toString converts to "1,2,3,4"
// if myVar = new Date()      // toString converts to "Fri Jul 18 2014 09:08:55 GMT+0200"
Numbers and booleans are also converted, but this is not very visible:

// if myVar = 123             // toString converts to "123"
// if myVar = true            // toString converts to "true"
// if myVar = false           // toString converts to "false"

===========================================================================================
type property and value property



In JavaScript, you can manipulate HTML input elements using the type property. The type property specifies the type of input control to be displayed. For example, the type="text" attribute displays a standard text input control, whereas type="password" displays a password input control.

To manipulate the type property of an input element in JavaScript, you can use the type property of the input element object. For example, 

1. to change the type of an input element with an ID of myInput to a password input control, you can use the following code:

document.getElementById("myInput").type = "password";

2. Similarly, to change the type of an input element with a name of myInput to a text input control, you can use the following code:

document.getElementsByName("myInput")[0].type = "text";

Note that when using getElementsByName, it returns an array-like object, so you need to specify the index to access the first element.

getElementsByName() and getElementsByTagName()  Methods

getElementsByTagName() is used to select elements based on their tag name. For example, to select all the p elements in a document, you can use the following code:


let elements = document.getElementsByTagName("p");

This will return an array of all the p elements in the document.

getElementsByName() is used to select elements based on their name attribute. This method returns a collection of all the elements with the specified name attribute. For example, to select all the input elements with a name attribute of email in a document, you can use the following code:

let elements = document.getElementsByName("email");

This will return a collection of all the input elements with a name attribute of email in the document.

The main difference between the two methods is that getElementsByTagName() selects elements based on their tag name, while getElementsByName() selects elements based on their name attribute. Additionally, getElementsByTagName() returns an array of elements, while getElementsByName() returns a collection of elements.

<!DOCTYPE html>
<html>
  <head>
    <title>Input Type Example</title>
  </head>
  <body>
    <form>
      <label for="username">Username:</label>
      <input type="text" id="username" name="username">

      <br>

      <label for="password">Password:</label>
      <input type="password" id="password" name="password">

      <br>

      <label for="remember-me">Remember Me:</label>
      <input type="checkbox" id="remember-me" name="remember-me">
    </form>

    <script>
      // Get the username input element
      const usernameInput = document.getElementById("username");

      // Get the type of the username input element
      const usernameInputType = usernameInput.type;
      console.log("Username input type:", usernameInputType);

      // Change the type of the username input element to "email"
      usernameInput.type = "email";
      console.log("New username input type:", usernameInput.type);
    </script>
  </body>
</html>


<!DOCTYPE html>
<html>
  <head>
    <title>Input Value Example</title>
  </head>
  <body>
    <form>
      <label for="username">Username:</label>
      <input type="text" id="username" name="username">

      <br>

      <label for="password">Password:</label>
      <input type="password" id="password" name="password">

      <br>

      <label for="remember-me">Remember Me:</label>
      <input type="checkbox" id="remember-me" name="remember-me">
    </form>

    <script>
      // Get the username input element
      const usernameInput = document.getElementById("username");

      // Get the value of the username input element
      const usernameInputValue = usernameInput.value;
      console.log("Username input value:", usernameInputValue);

      // Set the value of the username input element
      usernameInput.value = "john@example.com";
      console.log("New username input value:", usernameInput.value);
    </script>
  </body>
</html>



==================================================
In JavaScript, both arrays and collections are used to store a group of elements or objects. However, there are some differences between the two.

An array is an ordered list of elements. Each element in an array has a numeric index that starts from 0. You can access the elements in an array using their index. Arrays in JavaScript are mutable, which means you can add or remove elements from an array, change the order of elements, and modify the values of individual elements.

A collection is an unordered list of elements or objects. Unlike arrays, collections do not have a specific order. Elements in a collection can be accessed by their index, but the order is not guaranteed. Collections in JavaScript are usually returned by some DOM methods such as getElementsByName, getElementsByClassName, or querySelectorAll. Collections are read-only, which means you cannot add or remove elements from a collection, but you can modify the values of individual elements.

So, the main differences between a collection and an array are the order, mutability, and the methods used to access the elements. While arrays have a specific order, are mutable and can be accessed using numeric indices, collections have an arbitrary order, are read-only, and usually require specific methods to access the elements.




<!DOCTYPE html>
<html>
  <head>
    <title>Array Example</title>
  </head>
  <body>
    <script>
      var myArray = ["apple", "banana", "orange", "grape"];

      console.log(myArray[0]); // Output: "apple"

      myArray.push("mango");
      console.log(myArray); // Output: ["apple", "banana", "orange", "grape", "mango"]
    </script>
  </body>
</html>

<!DOCTYPE html>
<html>
  <head>
    <title>Array Example</title>
  </head>
  <body>
    <ul id="myList">
      <li>Apple</li>
      <li>Banana</li>
      <li>Orange</li>
      <li>Grape</li>
    </ul>

    <button onclick="addItem()">Add Item</button>

    <script>
      const myList = ["apple", "banana", "orange", "grape"];
      console.log(myList); //Array(4)

      // Get the unordered list element
      const listElement = document.getElementById("myList");
      console.log(listElement);//This will pick the ul:

      /*
      <ul id="myList">
      <li>Apple</li>
      <li>Banana</li>
      <li>Orange</li>
      <li>Grape</li>
    </ul>

    */

      // Create list items from the array
      for (let i = 0; i < myList.length; i++) {
        const listItem = document.createElement("li");
        listItem.textContent = myList[i];
        listElement.appendChild(listItem);
      }

      // Add a new item to the end of the array and the unordered list
      function addItem() {
        const newItem = "mango";
        myList.push(newItem);
        const listItem = document.createElement("li");
        listItem.textContent = newItem;
        listElement.appendChild(listItem);
      }
    </script>
  </body>
</html>

<!DOCTYPE html>
<html>
  <head>
    <title>Array Example</title>
  </head>
  <body>
    <p>Paragraph 1</p>
    <p>Paragraph 2</p>
    <p>Paragraph 3</p>

    <button onclick="logParagraphs()">Log Paragraphs</button>

    <script>
      // Get all p elements on the page and put them in an array
      const paragraphs = Array.from(document.getElementsByTagName("p"));

      // Log the text content of each paragraph in the array
      function logParagraphs() {
        for (let i = 0; i < paragraphs.length; i++) {
          console.log(paragraphs[i].textContent);
        }
      }
    </script>
  </body>
</html>

<!DOCTYPE html>
<html>
  <head>
    <title>Array Example</title>
  </head>
  <body>
    <p>Paragraph 1</p>
    <p>Paragraph 2</p>
    <p>Paragraph 3</p>
    <p>Paragraph nothing</p>



    <button onclick="logParagraphs()">Log Paragraphs</button>

    <script>
      //------------------------------------------For HTML COLLECTION----------------------------------------//
      
        // Get all p elements on the page
        const paragraphs = document.getElementsByTagName("p");

      // Log the text content of each paragraph in the array
      function logParagraphs() {
        for (let i = 0; i < paragraphs.length; i++) {
          console.log(paragraphs[i].textContent);
        }
      }
      console.log(paragraphs); //HTMLCollection(4) [p, p, p, p]


//------------------------------------------For ARRAY----------------------------------------//
      //If you want to convert the HTMLCollection to an array, you can use the Array.from() method

 
      // Get all p elements on the page and put them in an array
      const paragraphs = Array.from(document.getElementsByTagName("p"));

      // Log the text content of each paragraph in the array
      function logParagraphs() {
        for (let i = 0; i < paragraphs.length; i++) {
          console.log(paragraphs[i].textContent);
        }
      }
       console.log(paragraphs);

/*
ANSWER
                0
                : 
                p
                1
                : 
                p
                2
                : 
                p
                3
                : 
                p
                length
                : 
                4
                [[Prototype]]
                : 
                Array(0)

*/
      

    </script>
  </body>
</html>



<!DOCTYPE html>
<html>
  <head>
    <title>Collection Example</title>
  </head>
  <body>
    <p class="fruit">Apple</p>
    <p class="fruit">Banana</p>
    <p class="vegetable">Carrot</p>
    <script>
      // Using getElementsByClassName() to select elements
      var fruitCollection = document.getElementsByClassName("fruit");
      console.log(fruitCollection); // Output: HTMLCollection [p.fruit, p.fruit]

      // Using querySelectorAll() to select elements
      var vegetableCollection = document.querySelectorAll(".vegetable");
      console.log(vegetableCollection); // Output: NodeList [p.vegetable]

      // Using getElementsByTagName() to select elements
      var pCollection = document.getElementsByTagName("p");
      console.log(pCollection); // Output: HTMLCollection [p.fruit, p.fruit, p.vegetable]
    </script>
  </body>
</html>

Both NodeList and HTMLCollection are similar in that they represent ordered collections of DOM elements. However, there are a few differences between the two:

NodeList can contain any type of node (not just element nodes), while HTMLCollection can only contain element nodes.
NodeList is typically returned by methods like document.querySelectorAll(), while HTMLCollection is typically returned by methods like document.getElementsByClassName() and document.getElementsByTagName().
NodeList is a live collection, meaning that if elements are added or removed from the DOM, the collection will automatically update to reflect those changes. HTMLCollection, on the other hand, is not live, so changes to the DOM will not be reflected in the collection.
NodeList is not a standard JavaScript object, but rather an interface implemented by the browser. HTMLCollection is also implemented by the browser, but it inherits from the NodeList interface.
Here's an example of using NodeList and HTMLCollection:

<!DOCTYPE html>
<html>
  <head>
    <title>NodeList vs HTMLCollection</title>
  </head>
  <body>
    <div id="container">
      <p>Paragraph 1</p>
      <p>Paragraph 2</p>
      <p>Paragraph 3</p>
      <ul>
        <li>Item 1</li>
        <li>Item 2</li>
      </ul>
    </div>

    <script>
      // Get all p elements in the container div using NodeList
      const paragraphs = document.querySelectorAll("#container p");
       console.log(paragraphs);//NodeList(3)

      // Log the text content of each paragraph in the NodeList
      for (let i = 0; i < paragraphs.length; i++) {
        console.log(paragraphs[i].textContent);
      }

      // Get all li elements in the container div using HTMLCollection
      const listItems = document.getElementById("container").getElementsByTagName("li");
       console.log(listItems);//HTMLCollection(2)

      // Log the text content of each list item in the HTMLCollection
      for (let i = 0; i < listItems.length; i++) {
        console.log(listItems[i].textContent);
      }
    </script>
  </body>
</html>

==============================================================================================================
setAttribute and getAttribute methods

setAttribute and getAttribute are two methods in JavaScript that allow you to set and get attribute values of an HTML element.

setAttribute method takes two arguments - the name of the attribute and the value to set. It sets the value of the specified attribute on the element. Here is an example:



<!DOCTYPE html>
<html>
  <head>
    <title>Set Attribute Example</title>
  </head>
  <body>
    <button id="myButton">Click me!</button>

    <script>
      const button = document.getElementById("myButton");

      // Set the "class" attribute of the button element
      button.setAttribute("class", "primary");

      // Set the "data-custom" attribute of the button element
      button.setAttribute("data-custom", "custom value");
    </script>
  </body>
</html>


getAttribute method takes one argument - the name of the attribute to get. It retrieves the value of the specified attribute on the element. Here is an example:

<!DOCTYPE html>
<html>
  <head>
    <title>Get Attribute Example</title>
  </head>
  <body>
    <button id="myButton" class="primary" data-custom="custom value">Click me!</button>

    <script>
      const button = document.getElementById("myButton");

      // Get the "class" attribute of the button element
      const buttonClass = button.getAttribute("class");
      console.log("Button class:", buttonClass);

      // Get the "data-custom" attribute of the button element
      const buttonDataCustom = button.getAttribute("data-custom");
      console.log("Button data-custom:", buttonDataCustom);
    </script>
  </body>
</html>

<!DOCTYPE html>
<html>
  <head>
    <title>Toggle Image Example</title>
  </head>
  <body>
    <img class="old-image" src="team2.jpg" width="200" height="200">
    <button onclick="toggleImage();">Toggle Image</button>

    <script>
      // Get the image element
      const oldImage = document.querySelector(".old-image");

      // Define the function to toggle the image source
      function toggleImage() {
        // Check if the current source is team2.jpg
        if (oldImage.src.endsWith("team2.jpg")) {
          // Set the "src" attribute to team3.jpg
          oldImage.setAttribute("src", "team3.jpg");
        } 
        else {
          // Set the "src" attribute to team2.jpg
          oldImage.setAttribute("src", "team2.jpg");
        }
      }
    </script>
  </body>
</html>


const str = "Hello, world!";
console.log(str.endsWith("!")); // true
console.log(str.endsWith("world")); // false
console.log(str.endsWith("world!")); // true
console.log(str.endsWith("World!")); // false, case-sensitive



==============================
The endsWith() method is a JavaScript string method that checks whether a string ends with a specified character(s) or not. It returns true if the string ends with the specified character(s), and false otherwise. The endsWith() method takes the character(s) to check as an argument and is case-sensitive.

For example, "hello world".endsWith("world") returns true because the string "hello world" ends with the substring "world". On the other hand, "hello world".endsWith("WORLD") returns false because the comparison is case-sensitive and "world" is not the same as "WORLD".
========================================================================
Let's talk about API in JS


An API (Application Programming Interface) is a way for different software applications to communicate with each other. In JavaScript, we can use APIs to retrieve data from external sources, such as web servers, and then use that data to build dynamic web pages or perform other tasks.

There are many different types of APIs, but some of the most common ones used in JavaScript include:

1. RESTful APIs - These are web-based APIs that use HTTP requests to GET, POST, PUT, and DELETE data. They are often used to retrieve data from databases or other server-side resources.

2. JSON APIs - These APIs return data in the JSON (JavaScript Object Notation) format, which is a lightweight data interchange format that is easy to read and write.

3. Websocket APIs - These APIs enable real-time communication between a client and a server, allowing for bidirectional data exchange.

In JavaScript, we can use the fetch function to retrieve data from APIs. The fetch function sends an HTTP request to a specified URL and returns a promise that resolves with the response from the server. We can then use this response to extract the data we need and use it to update our web page.

Here's an example of how to use fetch to retrieve data from a JSON API:


fetch('https://jsonplaceholder.typicode.com/todos/1')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error(error));


In this example, we are using fetch to retrieve data from the JSONPlaceholder API, which returns a JSON object representing a to-do item. We use the response.json() method to convert the response to a JSON object, and then log the data to the console.








Example of restful api:

Let's say we have a web application that displays information about movies, and we want to retrieve a list of all the movies in our database. We could create a RESTful API endpoint with the following URL:

GET /api/movies

This URL specifies that we want to make a GET request to the /api/movies endpoint. The server would then return a list of all the movies in the database in response to this request.

If we wanted to retrieve information about a specific movie, we could add an ID parameter to the endpoint:

b
GET /api/movies/:id

Here, the :id parameter represents the ID of the movie we want to retrieve. So if we wanted to retrieve information about a movie with an ID of 123, we would make a GET request to the following URL:

GET /api/movies/123

The server would then return the movie with an ID of 123 in response to this request.

In addition to the GET method, we could also use other HTTP methods to modify the data in our database. For example, we could use the POST method to add a new movie to our database:


POST /api/movies


We would then include the details of the new movie in the request body, and the server would add it to the database.

Overall, RESTful APIs are a flexible and powerful way to expose data from a server to client applications, and are widely used in web development.






Can I also do fetch 

Yes, you can use the fetch() method to make requests to a RESTful API endpoint in JavaScript. Here's an example of how you can use fetch() to retrieve data from a RESTful API endpoint:


fetch('/api/movies')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error(error));


In this example, we're making a GET request to the /api/movies endpoint on the same server where the JavaScript code is hosted. The fetch() method returns a Promise, which we're using to handle the response from the server.

The response object that we get from the Promise has a json() method that we can use to convert the response to a JavaScript object. We then log the resulting data object to the console.

You can also use fetch() to make requests to other HTTP methods like POST, PUT, and DELETE, depending on the RESTful API you're using. To make a POST request, for example, you would pass an additional options object to the fetch() method with the method property set to 'POST', and the data you want to send in the request body:


fetch('/api/movies', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    title: 'New Movie',
    director: 'John Doe',
    releaseDate: '2022-01-01'
  })
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error(error));


In this example, we're making a POST request to the /api/movies endpoint with a JSON object containing the details of a new movie. We're also setting the Content-Type header to application/json to let the server know that we're sending JSON data in the request body.








Put vs get vs post vs delete 

GET, POST, PUT, and DELETE are four common HTTP methods used in RESTful APIs. Here's a brief explanation of each method:

GET: retrieves a resource or a collection of resources from the server. It should only retrieve data and not modify it. For example, when you visit a website in your browser, your browser sends a GET request to the server to retrieve the HTML, CSS, and JavaScript files that make up the website.

POST: creates a new resource on the server. It is typically used to submit a form or to send data to the server to be processed. For example, when you submit a form on a website, your browser sends a POST request to the server with the data from the form.

PUT: updates an existing resource on the server. It is typically used to update the properties of an existing resource. For example, when you edit your profile on a website, your browser might send a PUT request to the server to update your profile with the new information.

DELETE: deletes a resource from the server. It is typically used to delete an existing resource. For example, when you delete a message in your email inbox, your browser might send a DELETE request to the server to delete the message from the server.

It's important to note that these HTTP methods have specific meanings and are used to ensure that RESTful APIs follow a standard convention for handling requests and responses. Using the appropriate HTTP method for each operation can help make your API more intuitive and easier to use.









===============================================================================================================

JavaScript Bitwise Operations

JavaScript Bitwise Operators
Operator  Name  Description
& AND Sets each bit to 1 if both bits are 1
| OR  Sets each bit to 1 if one of two bits is 1
^ XOR Sets each bit to 1 if only one of two bits is 1
~ NOT Inverts all the bits
<<  Zero fill left shift  Shifts left by pushing zeros in from the right and let the leftmost bits fall off
>>  Signed right shift  Shifts right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off
>>> Zero fill right shift Shifts right by pushing zeros in from the left, and let the rightmost bits fall off

Examples
Operation Result  Same as Result
5 & 1 1 0101 & 0001  0001
5 | 1 5 0101 | 0001  0101
~ 5 10   ~0101   1010
5 << 1  10  0101 << 1  1010
5 ^ 1 4 0101 ^ 0001  0100
5 >> 1  2 0101 >> 1  0010
5 >>> 1 2 0101 >>> 1   0010


JavaScript bitwise operators are used to perform operations on the binary representation of numbers. There are six bitwise operators in JavaScript:

& (Bitwise AND): performs a bitwise AND operation on two numbers. Each bit in the result is set to 1 if both corresponding bits in the two input numbers are 1.

| (Bitwise OR): performs a bitwise OR operation on two numbers. Each bit in the result is set to 1 if either corresponding bit in the two input numbers is 1.

^ (Bitwise XOR): performs a bitwise XOR (exclusive OR) operation on two numbers. Each bit in the result is set to 1 if only one corresponding bit in the two input numbers is 1.

~ (Bitwise NOT): performs a bitwise NOT operation on a single number. Each bit in the result is inverted (i.e., 0 becomes 1 and 1 becomes 0).

<< (Left shift): shifts the bits of a number to the left by a specified number of positions. This is equivalent to multiplying the number by 2 to the power of the specified shift amount.

>> (Signed right shift): shifts the bits of a number to the right by a specified number of positions. This is equivalent to dividing the number by 2 to the power of the specified shift amount, and rounding down to the nearest integer.

Bitwise operators are used primarily in low-level programming and hardware manipulation, and are less commonly used in web development. Some common use cases for bitwise operators include optimizing memory usage, encoding and decoding data, and performing bitwise flags and permissions checks.


Example: 
let a = 5; // Binary representation: 101
let b = 3; // Binary representation: 011
let result = a & b; // Binary representation: 001 (decimal: 1)
console.log(result); // Output: 1
console.log(result.toString(2)); // Output: 001
console.log(result.toString(2).padStart(3, '0')); // Output: 001


In this example, we have two variables a and b with decimal values of 5 and 3, respectively. We then use the & operator to perform a bitwise AND operation on the binary representation of a and b. The binary representation of a is 101, and the binary representation of b is 011. The bitwise AND operation returns 001, which is the binary representation of the decimal value 1. We then output the value of result, which is 1.
we use the toString() method with a radix of 2 to output the binary representation of the result variable. 

You can use the padStart() method to add leading zeros to the binary representation of the result

In this example, we use the padStart() method to add leading zeros to the binary representation of the result variable. The first argument of padStart() specifies the minimum length of the resulting string, and the second argument specifies the character to use for padding (in this case, the 0 character). Since the binary representation of result has a length of 3, which is already greater than or equal to the minimum length of 3, no padding is added, and the output is 001.


padStart() is a built-in method in JavaScript that pads the beginning of a string with a specified character until the resulting string reaches a given length. Here's the syntax for using padStart():


string.padStart(targetLength [, padString])
The string parameter is the original string that you want to pad. The targetLength parameter is the length of the resulting string, after padding. The padString parameter is the character to use for padding. If you omit padString, the default value is a single space.

Here's an example of using padStart() to pad a string with leading zeros:


let number = '7';
let paddedNumber = number.padStart(3, '0');
console.log(paddedNumber); // Output: "007"
In this example, we use padStart() to add leading zeros to the string "7" until it reaches a length of 3. The resulting string is "007".

ALSO,
let number = '08039647504';
let paddedNumber = number.padStart(14, '+234');
console.log(paddedNumber); // Output: "+2308039647504"


let number = '08039647504';
let countryCode = '+234';
let paddedNumber = countryCode + number.padStart(11, '0').substr(1);
console.log(paddedNumber); // Output: "+2348039647504"


====
      let number = '08039647504';
      let countryCode = '+234';
      let x = number.padStart(11, '0');
      console.log(x);//08039647504
      let y = number.padStart(11, '0').substr(1);
      console.log(y);//8039647504
      let z = number.substr(1);
      console.log(z);////8039647504
      


      let paddedNumber = countryCode + number.substr(1);
      console.log(paddedNumber); // Output: "+2348039647504"
      let paddedNumber = countryCode + number.padStart(11, '0').substr(1);
      console.log(paddedNumber); // Output: "+2348039647504"

      /*
          The difference between the two approaches is that padStart() is used in the second statement to ensure that the resulting string has a length of 11 characters, whereas the first statement assumes that the original number string has a length of 11 characters.
      */


padEnd() method 

Yes, there is also a padEnd() method in JavaScript which works in a similar way to padStart(), but instead of padding the beginning of a string, it pads the end of a string.

The padEnd() method takes two arguments:

targetLength - the desired length of the resulting string
padString - the string to use for padding (optional; if omitted, the default value is a space character)
Here's an example of how to use padEnd() to pad the end of a string with a specified character:


let str = 'Hello';
let paddedStr = str.padEnd(10, '!');
console.log(paddedStr); // Output: "Hello!!!!"

In this example, the str variable is padded with exclamation marks (!) using the padEnd() method to create a resulting string with a length of 10 characters.













The substr() method is a JavaScript string method that returns a portion of a string, starting at the specified index and continuing for a specified number of characters.

The syntax for using the substr() method is as follows:


string.substr(startIndex, length)

Here's a brief explanation of the two arguments:

startIndex: The starting index at which to begin extracting characters from the string. If startIndex is negative, it is treated as counting from the end of the string. For example, -1 refers to the last character in the string, -2 refers to the second-to-last character, and so on.
length: Optional. The number of characters to extract from the string. If omitted, the substr() method will extract all characters from startIndex to the end of the string.
Here's an example that demonstrates the use of the substr() method:


let str = "Hello, world!";
let substr1 = str.substr(7, 5);
console.log(substr1); // Output: "world"

let substr2 = str.substr(-6);
console.log(substr2); // Output: "world!"

In the first example, we use the substr() method to extract a substring of length 5 starting from index 7 in the str string, which gives us the string "world". In the second example, we use a negative startIndex value to count from the end of the string, and omit the length argument to extract all characters from index -6 to the end of the string, which gives us the string "world!".
so w = -6, o = -5 and ! = -1



The slice() method is a JavaScript string method that extracts a section of a string and returns it as a new string, without modifying the original string.

The syntax for using the slice() method is as follows:


string.slice(startIndex, endIndex)

Here's a brief explanation of the two arguments:

startIndex: The index at which to begin the extraction. If startIndex is negative, it is treated as counting from the end of the string. For example, -1 refers to the last character in the string, -2 refers to the second-to-last character, and so on.
endIndex: Optional. The index at which to stop the extraction (but not include the character at this index). If omitted, the slice() method will extract all characters from startIndex to the end of the string.
Here's an example that demonstrates the use of the slice() method:


let str = "Hello, world!";
let sliced1 = str.slice(7, 12);
console.log(sliced1); // Output: "world"

let sliced2 = str.slice(-6);
console.log(sliced2); // Output: "world!"


In the first example, we use the slice() method to extract a substring starting from index 7 to index 12 (excluding the character at index 12) in the str string, which gives us the string "world". In the second example, we use a negative startIndex value to count from the end of the string, and omit the endIndex argument to extract all characters from index -6 to the end of the string, which gives us the string "world!".


JavaScript Uses 32 bits Bitwise Operands
JavaScript stores numbers as 64 bits floating point numbers, but all bitwise operations are performed on 32 bits binary numbers.

Before a bitwise operation is performed, JavaScript converts numbers to 32 bits signed integers.

After the bitwise operation is performed, the result is converted back to 64 bits JavaScript numbers.

The examples above uses 4 bits unsigned binary numbers. Because of this ~ 5 returns 10.

Since JavaScript uses 32 bits signed integers, it will not return 10. It will return -6.

00000000000000000000000000000101 (5)

11111111111111111111111111111010 (~5 = -6)

A signed integer uses the leftmost bit as the minus sign.

JavaScript Bitwise AND
When a bitwise AND is performed on a pair of bits, it returns 1 if both bits are 1.

One bit example:
Operation Result
0 & 0 0
0 & 1 0
1 & 0 0
1 & 1 1
4 bits example:
Operation Result
1111 & 0000 0000
1111 & 0001 0001
1111 & 0010 0010
1111 & 0100 0100
JavaScript Bitwise OR
When a bitwise OR is performed on a pair of bits, it returns 1 if one of the bits is 1:

One bit example:
Operation Result
0 | 0 0
0 | 1 1 
1 | 0 1
1 | 1 1
4 bits example:
Operation Result
1111 | 0000 1111
1111 | 0001 1111
1111 | 0010 1111
1111 | 0100 1111
JavaScript Bitwise XOR
When a bitwise XOR is performed on a pair of bits, it returns 1 if the bits are different:

One bit example:
Operation Result
0 ^ 0 0
0 ^ 1 1 
1 ^ 0 1
1 ^ 1 0 
4 bits example:
Operation Result
1111 ^ 0000 1111
1111 ^ 0001 1110
1111 ^ 0010 1101
1111 ^ 0100 1011
JavaScript Bitwise AND (&)
Bitwise AND returns 1 only if both bits are 1:

Decimal Binary
5 00000000000000000000000000000101
1 00000000000000000000000000000001
5 & 1 00000000000000000000000000000001 (1)

=====================================================================================================
JavaScript Regular Expressions
A regular expression is a sequence of characters that forms a search pattern.

The search pattern can be used for text search and text replace operations.

What Is a Regular Expression?
A regular expression is a sequence of characters that forms a search pattern.

When you search for data in a text, you can use this search pattern to describe what you are searching for.

A regular expression can be a single character, or a more complicated pattern.

Regular expressions can be used to perform all types of text search and text replace operations.

Syntax
/pattern/modifiers;
Example
/w3schools/i;
Example explained:

/w3schools/i  is a regular expression.

w3schools  is a pattern (to be used in a search).

i  is a modifier (modifies the search to be case-insensitive).

Using String Methods
In JavaScript, regular expressions are often used with the two string methods: search() and replace().

The search() method uses an expression to search for a match, and returns the position of the match.

The replace() method returns a modified string where the pattern is replaced.

Using String search() With a String
The search() method searches a string for a specified value and returns the position of the match:

Example
Use a string to do a search for "W3schools" in a string:

let text = "Visit W3Schools!";
let n = text.search("W3Schools");
console.log(n);//6

The result in n will be:
6
 but if we remove capital letter W for small letter w:
 let n = text.search("w3Schools");
 then
 console.log(n);//-1  meaning no answer

NOTE:
The search() method in JavaScript is used to search for a specified pattern in a string, and returns the position of the first occurrence of the pattern within the string.

The search() method takes a regular expression as an argument, and searches for the pattern in the string. If the pattern is found, the method returns the position of the first character of the first match, otherwise it returns -1.

Here's an example of how to use the search() method:


let str = 'The quick brown fox jumps over the lazy dog.';
let pattern = /brown/;
let pos = str.search(pattern);
console.log(pos); // Output: 10
//or
pos = str.search("brown");
console.log(pos); // Output: 10
    
In this example, the search() method is used to search for the word "brown" in the str variable, using a regular expression pattern (/brown/). The method returns the position of the first character of the match, which is 10.

Note that the search() method is case-sensitive, so if you want to perform a case-insensitive search, you can use a regular expression with the /i flag. For example:

let str = 'The quick brown fox jumps over the lazy dog.';
let pattern = /BROWN/i;
let pos = str.search(pattern);
console.log(pos); // Output: 10

let str = 'The quick Brown fox jumps over the lazy dog.';
pos = str.search(/brown/i);
console.log(pos); // Output: 10


Using String search() With a Regular Expression
Example
Use a regular expression to do a case-insensitive search for "w3schools" in a string:

let text = "Visit W3Schools";
let n = text.search(/w3schools/i);
The result in n will be:

6


The replace() method in JavaScript is used to search for a specified pattern in a string and replace it with a new substring. It accepts two arguments: the pattern to search for, and the replacement substring.

The replace() method can be called on a string object, and the first argument can be a string or a regular expression. If the first argument is a string, only the first occurrence of the pattern is replaced. If the first argument is a regular expression with the global (g) flag, all occurrences of the pattern are replaced.

Here's an example of how to use the replace() method to replace a substring in a string:

let str = 'The quick brown fox jumps over the lazy dog.';
let newStr = str.replace('lazy', 'sleepy');
console.log(newStr); // Output: "The quick brown fox jumps over the sleepy dog."


In this example, the replace() method is called on the str variable to replace the first occurrence of the substring "lazy" with "sleepy". The result is a new string with the replacement made.

Here's another example that uses a regular expression with the global (g) flag to replace all occurrences of a pattern:

let str = 'The quick brown fox jumps over the lazy dog.';
let newStr = str.replace(/o/g, 'e');
console.log(newStr); // Output: "The quick brewn fex jumps ever the lazy deg."

let text = "Visit Microsoft!";
let result = text.replace(/microsoft/i, "W3Schools");
The result in res will be:

Visit W3Schools!


Modifier  Description   
i         Perform case-insensitive matching 
g         Perform a global match (find all matches rather than stopping after the first match)  
m         Perform multiline matching


The match() method is a built-in JavaScript method that allows you to search a string for a specified pattern and return an array of all matches found. It takes a regular expression or a string as a parameter.

The match() method can be used in two ways:

1. With a regular expression as the parameter:

let str = "The quick brown fox jumps over the lazy dog.";
let regex = /fox/gi;
let matches = str.match(regex);
console.log(matches); // Output: ["fox"]

or

let str = "The quick brown fox jumps over the lazy dog. Fox is good.";
let regex = /fox/gi;
let matches = str.match(regex);
console.log(matches); // Output: (2)['fox', 'Fox']

or

let str = "The quick brown fox jumps over the lazy dog. Fox is good. \nFox is a bad man.";
console.log(str);
let regex = /fox/gi;
let matches = str.match(regex);
console.log(matches); // Output: (3)['fox', 'Fox', 'Fox']


In this example, the regular expression /fox/gi is used to search the string for the word "fox", regardless of case (the i flag) and globally (the g flag). The method returns an array containing all matches found.

2. With a String as parameter

let str = "The quick brown fox jumps over the lazy dog.";
let match = str.match("fox");
console.log(match); // Output: "fox"


In this example, the string "fox" is used as the parameter. Since it is not a regular expression, the method will only return the first match found, which in this case is the string "fox".

also:

let text = "\nIs th\nis it?";
console.log(text);
/*
Is th
is it?
*/
let result = text.match(/^is/m);
console.log("Result is: " + result);//Result is: is

The match() method in JavaScript is used to search for a pattern within a string and returns an array of matches, or null if no match is found. In the given example, text is a string that contains the value "\nIs th\nis it?". The regular expression passed to the match() method is /^is/m, which matches any occurrence of the string "is" at the beginning of a line (due to the ^ anchor) with the multiline flag m specified.

The match() method will return an array containing the first match found, or null if no match is found. In this case, the regex /^is/m matches the first occurrence of "is" at the beginning of the second line in text. So the result variable will be an array containing the string "is".

The output of console.log("Result is: " + result); will be "Result is: is".


In regular expressions, the caret (^) and dollar sign ($) characters have special meanings. The caret (^) matches the start of a string, and the dollar sign ($) matches the end of a string. In the example you provided, /^is/m is a regular expression that matches the string "is" only if it appears at the beginning of a line, due to the ^ character. The m flag at the end of the regular expression specifies that the ^ and $ characters should match the start and end of each line within the string, rather than just the start and end of the entire string.

So in your example, let result = text.match(/^is/m) will match the "is" at the beginning of the first line in the string, and return it as the result.

Sure! Here are some examples of using the caret ^ and dollar sign $ in regular expressions:

Start of string anchor ^:

The caret ^ is used as an anchor to match the beginning of a string.

Example: let regex = /^hello/;

This will match any string that starts with "hello", such as "hello world", but not "world hello".

End of string anchor $:

The dollar sign $ is used as an anchor to match the end of a string.

Example: let regex = /world$/;

This will match any string that ends with "world", such as "hello world", but not "world hello".

Start and end of string anchors ^$:

You can use both the ^ and $ together to match the entire string.

Example: let regex = /^hello$/;

This will only match the exact string "hello" and nothing else.

Negated character class [^]:

The caret ^ has a different meaning when used inside square brackets []. It is used to negate a character class, meaning it will match any character that is not in the square brackets.

Example: let regex = /[^aeiou]/;

This will match any character that is not a vowel.

Anchors with multiline flag /m:

The m flag is used to enable multiline mode, meaning the ^ and $ anchors will match the start and end of a line instead of just the start and end of the string.

Example:

let text = "This is a\nmultiline\nstring.";
let regex = /^multi/gim;
let result = text.match(regex);
console.log(result); // Output: ["multi"]


This will match the word "multi" that appears at the start of the second line.


Multiline matching is a technique used in regular expressions to search for a pattern that spans across multiple lines of text. Normally, the . metacharacter in a regular expression matches any character except newline (\n), which means that it only matches text within a single line. However, if you want to match text across multiple lines, you can use the m flag in combination with the ^ and $ anchors.

Here's an example to illustrate this:


let text = "Hello\nworld";
let pattern = /^H.*d$/m;
console.log(text.match(pattern)); // Output: ["Hello\nworld"]


In this example, we have a multi-line string text that contains the words "Hello" and "world" on separate lines. We want to match the entire string, so we define a regular expression pattern that starts with ^H (matches the first line starting with "H") and ends with d$ (matches the last line ending with "d"). The m flag at the end of the regular expression enables multiline matching, which allows the ^ and $ anchors to match the start and end of each line, respectively.

When we call the match() method on the text string with the pattern, it returns an array containing the entire string, since it matches the pattern that spans across multiple lines.

explain * in /^H.*d$/m;
ChatGPT
In the regular expression /^H.*d$/m, the * is a quantifier that matches zero or more of the preceding character or group. In this case, the .* matches any character (except for a newline character) zero or more times, which means it can match any string of characters, including an empty string.

The ^ at the beginning and $ at the end of the regular expression indicate the start and end of a line, respectively. The m flag at the end of the regular expression enables multiline matching, which means that ^ and $ will also match the start and end of a line, in addition to the start and end of the string.

So, the regular expression /^H.*d$/m will match any string that starts with an "H" and ends with a "d", and where the characters between the "H" and "d" may span multiple lines.





Regular Expression Patterns
Brackets are used to find a range of characters:

Expression  Description Try it
[abc] Find any of the characters between the brackets 
[0-9] Find any of the digits between the brackets 
(x|y) Find any of the alternatives separated with |

let text = "Is this all there is?";
let result = text.match(/[h]/g);
document.getElementById("demo").innerHTML = result;//h,h


let text = "123456789";
let result = text.match(/[1-4]/g);
document.getElementById("demo").innerHTML = result;//1,2,3,4

let text = "re, green, red, green, gren, gr, blue, yellow";
let result = text.match(/(red|green)/g);
document.getElementById("demo").innerHTML = result;//green,red,green


Metacharacters are characters with a special meaning:

Metacharacter Description 
\d  Find a digit  
\s  Find a whitespace character 
\b  Find a match at the beginning of a word like this: \bWORD, or at the end of a word like this: WORD\b  
\uxxxx  Find the Unicode character specified by the hexadecimal number xxxx

let text = "Give 100%!"; 
let result = text.match(/\d/g);
document.getElementById("demo").innerHTML = result;//1,0,0

let text = "Is this all there is?";
let result = text.match(/\s/g);
document.getElementById("demo").innerHTML = result;//, , ,

let text = "HELLO, LOOK AT YOU!"; 
let result = text.search(/\bLO/);
document.getElementById("demo").innerHTML = result;//7

let text = "HELLO, LOOK AT YOU!"; 
let result = text.search(/LO\b/);
document.getElementById("demo").innerHTML = result;//3

//Do a global search for the hexadecimal number 0057 (W) in a string
let text = "Visit W3Schools. Hello World!"; 
let result = text.match(/\u0057/g);
document.getElementById("demo").innerHTML = result;//W,W

Quantifiers define quantities:

Quantifier  Description 
n+  Matches any string that contains at least one n
n*  Matches any string that contains zero or more occurrences of n
n?  Matches any string that contains zero or one occurrences of n


//Do a global search for at least one "o" in a string
let text = "Hellooo World! Hello W3Schools!"; 
let result = text.match(/o+/g);
document.getElementById("demo").innerHTML = result;//ooo,o,o,oo

//Do a global search for an "l", followed by zero or more "o" characters
let text = "Hellooo World! Hello W3Schools!"; 
let result = text.match(/lo*/g);
document.getElementById("demo").innerHTML = result;//l,looo,l,l,lo,l

//Do a global search for a "1", followed by zero or one "0" characters
let text = "1, 100 or 1000?";
let result = text.match(/10?/g);
document.getElementById("demo").innerHTML = result;//1,10,10


Using the RegExp Object
In JavaScript, the RegExp object is a regular expression object with predefined properties and methods.

Using test()
The test() method is a RegExp expression method.

It searches a string for a pattern, and returns true or false, depending on the result.

The following example searches a string for the character "e":

Example
const pattern = /e/;
pattern.test("The best things in life are free!");
Since there is an "e" in the string, the output of the code above will be:

true


<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Regular Expressions</h2>

<p>Search for an "e" in the next paragraph:</p>

<p id="p01">The best things in life are free!</p>

<p id="demo"></p>

<script>
let text = document.getElementById("p01").innerHTML;
const pattern = /e/;
document.getElementById("demo").innerHTML = pattern.test(text);
</script>

</body>
</html>


Note: You don't have to put the regular expression in a variable first. The two lines above can be shortened to one:

/e/.test("The best things in life are free!");

Using exec()
The exec() method is a RegExp expression method.

It searches a string for a specified pattern, and returns the found text as an object.

If no match is found, it returns an empty (null) object.

The following example searches a string for the character "e":

Example
/e/.exec("The best things in life are free!");

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Regular Expressions</h2>

<p id="demo"></p>

<script>
const obj = /e/.exec("The best things in life are free!");
document.getElementById("demo").innerHTML =
"Found " + obj[0] + " in position " + obj.index + " in the text: " + obj.input;//Found e in position 2 in the text: The best things in life are free!
</script>

</body>
</html>


==================================================================================================
        PRECEDENCE

        1. Exponent > Multiplication and Division > Plus and Minus. 
        2. Bracket greater than all

        3. Increment and decrement

        // Postfix Increment
      let x =   5;
      let y = x++
      console.log(x);//6
      console.log(y);//5

      //Prefix Increment
      let a =   5;
      let b = ++a;
      console.log(a);//6
      console.log(b);//6

      // Postfix decrement
      let m =   5;
      let n = m--
      console.log(m);//4
      console.log(n);//5

      //Prefix decrement
      let c =   5;
      let d = --c;
      console.log(a);//6
      console.log(b);//6

      let t = 9;
      t = t++;
      console.log(t);//9
      t += t;// t = t + t
      console.log(t);//18

============================================================================================
          JavaScript Errors

Throw,  Try...Catch...Finally

1. The try statement defines a code block to run (to try).

2. The catch statement defines a code block to handle any error.

3. The finally statement defines a code block to run regardless of the result.

Syntax

try {
  Block of code to try
}
catch(err) {
  Block of code to handle errors
}
finally {
  Block of code to be executed regardless of the try / catch result
}

4. The throw statement defines a custom error.
  throw is used to throw an exception when an error occurs. It can be used in any part of the code, including functions and loops. When an exception is thrown, it interrupts the normal flow of the program and transfers control to the nearest enclosing try...catch block or to the browser's default error handling mechanism.

Here's an example of how throw can be used to handle an error:

<script>
    function divide(x, y) {
      if (y === 0) {
        throw new Error("Cannot divide by zero");//This crates an object using new keyword
      }
      return x / y;
    }

    try {
      console.log(divide(6, 2));
      console.log(divide(6, 0)); // This will throw an exception......"Cannot divide by zero"
    } 
    catch (error) {
      console.log(error.message);
    }
  </script>

  In JavaScript, new Error is used to create a new instance of the Error object, which is a built-in object in the language. The Error object is used to represent any kind of runtime error that can occur in JavaScript.



  SO, without this catch block:  
  catch (error) {
      console.log(error.message);
    }

    the code will produce unnecessary error

    try...catch is used to handle exceptions that are thrown during the execution of a block of code. It allows you to specify a block of code to try, and if an exception is thrown, it allows you to specify a block of code to handle the exception.

    Here's an example of how try...catch can be used:


    <script>
    try {
      // Code that may throw an exception
      console.log("Hello, world!");
    } 
    catch (error) {
      // Code to handle the exception
      console.log("An error occurred:", error);
    } 
    finally {
      // Code that will always execute, regardless of whether an exception was thrown or not
      console.log("This will always execute");
    }

  </script>

  <!DOCTYPE html>
<html>
  <head>
    <title>JavaScript Practice -202</title>
  </head>
  <body>
    <h1>Javascript Practice</h1>
    <p id="demo"></p>
    <p id="message"></p>
    <input type="number" id="age" name="age">
    <button id="myButton">Click Me</button>
    
    

  <script>
    let key = document.getElementById('myButton');
    console.log(key);//The button tag

    key.addEventListener("click", nigeriaVoter);


   function nigeriaVoter() {
      let studentAge = document.getElementById("age").value;
       console.log("User inputs (inside): " + studentAge);//
      try {
        if (studentAge <= 17) {
          throw new Error("You are a child, can't vote!");
        }
        else {
          document.getElementById("demo").innerHTML = "You are eligible to vote!";
          console.log("You are eligible!");
        }
      } 
      catch (error) {
        document.getElementById("demo").innerHTML = error.message;
        console.log("An error occurred:", error);
      } 
      finally {
        document.getElementById("message").innerHTML = "Welcome to our site user!";
        console.log("This will always execute");
      }
    }



    console.log("User inputs (outside): " + studentAge);//Nothing happens cos of scope
  </script>
  </body>
</html>

<!DOCTYPE html>
<html>
<head>
  <title>Division Example</title>
  <style>
    #result {
      border: 1px solid black;
      padding: 10px;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <form>
    <label for="numerator">Numerator:</label>
    <input type="text" id="numerator"><br>

    <label for="denominator">Denominator:</label>
    <input type="text" id="denominator"><br>

    <button type="button" onclick="divide()">Divide</button>
  </form>

  <div id="result"></div>

  <script>
    function divide() {
      let numerator = document.getElementById("numerator").value;
      let denominator = document.getElementById("denominator").value;
      let resultDiv = document.getElementById("result");

      try {
        let result = numerator / denominator;
        resultDiv.innerHTML = "Result is: " + result;
      } 
      catch (error) {
        resultDiv.innerHTML = "An error occurred: " + error.message;//The error message can be NaN, Infinity 
      } 
      finally {
        resultDiv.innerHTML += "<br>Division complete";
      }
    }
  </script>
</body>
</html>




Errors Will Happen!
When executing JavaScript code, different errors can occur.

Errors can be coding errors made by the programmer, errors due to wrong input, and other unforeseeable things.

Example
In this example we misspelled "alert" as "adddlert" to deliberately produce an error:

<p id="demo"></p>

<script>
try {
  adddlert("Welcome guest!");
}
catch(err) {
  document.getElementById("demo").innerHTML = err.message;
}
</script>
JavaScript catches adddlert as an error, and executes the catch code to handle it.

JavaScript Throws Errors
When an error occurs, JavaScript will normally stop and generate an error message.

The technical term for this is: JavaScript will throw an exception (throw an error).

JavaScript will actually create an Error object with two properties: name and message.


The throw Statement
The throw statement allows you to create a custom error.

Technically you can throw an exception (throw an error).

The exception can be a JavaScript String, a Number, a Boolean or an Object:

throw "Too big";    // throw a text
throw 500;          // throw a number
If you use throw together with try and catch, you can control program flow and generate custom error messages.

Input Validation Example
This example examines input. If the value is wrong, an exception (err) is thrown.

The exception (err) is caught by the catch statement and a custom error message is displayed:

<!DOCTYPE html>
<html>
<body>

<p>Please input a number between 5 and 10:</p>

<input id="demo" type="text">
<button type="button" onclick="myFunction()">Test Input</button>
<p id="p01"></p>
<p id="result"></p>

<script>
function myFunction() {
  const message = document.getElementById("p01");
  const result = document.getElementById("result");
  message.innerHTML = "";
  let x = document.getElementById("demo").value;
  try {
    if(x.trim() == "") throw "empty";
    if(isNaN(x)) throw "not a number";
    x = Number(x);
    if(x < 5) throw "too low";
    if(x > 10) throw "too high";
    result.innerHTML = `You typed in ${x}`;
  }
  catch(err) {
    message.innerHTML = "Input is " + err;
    result.innerHTML = "";
  }
}
</script>

</body>
</html>

we can use variable like:
let myMessage = "too low";
if(x < 5) throw myMessage;

HTML Validation
The code above is just an example.

Modern browsers will often use a combination of JavaScript and built-in HTML validation, using predefined validation rules defined in HTML attributes:

<input id="demo" type="number" min="5" max="10" step="1">

The Error Object
JavaScript has a built in error object that provides error information when an error occurs.

The error object provides two useful properties: name and message.

Error Object Properties
Property  Description
name  Sets or returns an error name
message Sets or returns an error message (a string)
Error Name Values
Six different values can be returned by the error name property:

Error Name  Description
EvalError An error has occurred in the eval() function
RangeError  A number "out of range" has occurred
ReferenceError  An illegal reference has occurred
SyntaxError A syntax error has occurred
TypeError A type error has occurred
URIError  An error in encodeURI() has occurred
The six different values are described below.

Eval Error
An EvalError indicates an error in the eval() function.

Newer versions of JavaScript do not throw EvalError. Use SyntaxError instead.

Range Error
A RangeError is thrown if you use a number that is outside the range of legal values.

For example: You cannot set the number of significant digits of a number to 500.

Example
<script>
let num = 1;
try {
  num.toPrecision(500);
}
catch(err) {
  document.getElementById("demo").innerHTML = err.name;// it must be 1 - 100 //because You cannot set the number of significant digits of a number to 500
  //err.name = RangeError
  //err.message = toPrecision() argument must be between 1 and 100
}
</script>

Reference Error
A ReferenceError is thrown if you use (reference) a variable that has not been declared:

Example
let x = 5;
try {
  x = y + 1;   // y cannot be used (referenced)
}
catch(err) {
  document.getElementById("demo").innerHTML = err.name;
}

//err.message = y is not defined

Syntax Error
A SyntaxError is thrown if you try to evaluate code with a syntax error.

Example
try {
  eval("alert('Hello)");   // Missing ' will produce an error
}
catch(err) {
  document.getElementById("demo").innerHTML = err.name;
}

err.message =  Invalid or unexpected token

Type Error
A TypeError is thrown if you use a value that is outside the range of expected types:

Example
let num = 1;
try {
  num.toUpperCase();   // You cannot convert a number to upper case
}
catch(err) {
  document.getElementById("demo").innerHTML = err.name;
}

<script>
let num = 1;
try {
  num.toUpperCase();
}
catch(err) {
  document.getElementById("demo").innerHTML = err.name;
  //You cannot convert a number to upper case
}
</script>

URI (Uniform Resource Identifier) Error
A URIError is thrown if you use illegal characters in a URI function:

Example
try {
  decodeURI("%%%");   // You cannot URI decode percent signs
}
catch(err) {
  document.getElementById("demo").innerHTML = err.name;
}

Non-Standard Error Object Properties
Mozilla and Microsoft define some non-standard error object properties:

fileName (Mozilla)
lineNumber (Mozilla)
columnNumber (Mozilla)
stack (Mozilla)
description (Microsoft)
number (Microsoft)

Do not use these properties in public web sites. They will not work in all browsers.



===========================

JavaScript Scope
Scope determines the accessibility (visibility) of variables.

JavaScript has 3 types of scope:

Block scope
Function scope
Global scope
Block Scope
Before ES6 (2015), JavaScript had only Global Scope and Function Scope.

ES6 introduced two important new JavaScript keywords: let and const.

These two keywords provide Block Scope in JavaScript.

Variables declared inside a { } block cannot be accessed from outside the block:

Example
{
  let x = 2;
}
// x can NOT be used here


Variables declared with the var keyword can NOT have block scope.

Variables declared inside a { } block can be accessed from outside the block.

Example
{
  var x = 2;
}
// x CAN be used here


Local Scope
Variables declared within a JavaScript function, become LOCAL to the function.

Example
// code here can NOT use carName

function myFunction() {
  let carName = "Volvo";
  // code here CAN use carName
}

// code here can NOT use carName

Local variables have Function Scope:

They can only be accessed from within the function.

Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.

Local variables are created when a function starts, and deleted when the function is completed.

Function Scope
JavaScript has function scope: Each function creates a new scope.

Variables defined inside a function are not accessible (visible) from outside the function.

Variables declared with var, let and const are quite similar when declared inside a function.

They all have Function Scope:

function myFunction() {
  var carName = "Volvo";   // Function Scope
}
function myFunction() {
  let carName = "Volvo";   // Function Scope
}
function myFunction() {
  const carName = "Volvo";   // Function Scope
}
Global JavaScript Variables
A variable declared outside a function, becomes GLOBAL.

Example
let carName = "Volvo";
// code here can use carName

function myFunction() {
// code here can also use carName
}
A global variable has Global Scope:

All scripts and functions on a web page can access it. 

Global Scope
Variables declared Globally (outside any function) have Global Scope.

Global variables can be accessed from anywhere in a JavaScript program.

Variables declared with var, let and const are quite similar when declared outside a block.

They all have Global Scope:

var x = 2;       // Global scope
let x = 2;       // Global scope
const x = 2;       // Global scope
JavaScript Variables
In JavaScript, objects and functions are also variables.

Scope determines the accessibility of variables, objects, and functions from different parts of the code.


Automatically Global
If you assign a value to a variable that has not been declared, it will automatically become a GLOBAL variable.

This code example will declare a global variable carName, even if the value is assigned inside a function.

Example
myFunction();

// code here can use carName

function myFunction() {
  carName = "Volvo";
}

<script>
myFunction();
// code here can use carName as a global variable
document.getElementById("demo").innerHTML = "I can display " + carName;//Output:  I can display Volvo

function myFunction() {
  carName = "Volvo";
}
</script>

unlike this

<script>
myFunction();
// code here can use carName as a global variable
document.getElementById("demo").innerHTML = "I can display " + carName;//No output here

function myFunction() {
 let carName = "Volvo";
}
</script>

Strict Mode
All modern browsers support running JavaScript in "Strict Mode".


In "Strict Mode", undeclared variables are not automatically global.

Global Variables in HTML
With JavaScript, the global scope is the JavaScript environment.

In HTML, the global scope is the window object.

Global variables defined with the var keyword belong to the window object:

Example
var carName = "Volvo";
// code here can use window.carName

<script>
var carName = "Volvo";

// code here can use window.carName
document.getElementById("demo").innerHTML = "I can display " + window.carName;
</script>

While using let or const will be undefined

Warning
Do NOT create global variables unless you intend to.

Your global variables (or functions) can overwrite window variables (or functions).
Any function, including the window object, can overwrite your global variables and functions.

The Lifetime of JavaScript Variables
The lifetime of a JavaScript variable starts when it is declared.

Function (local) variables are deleted when the function is completed.

In a web browser, global variables are deleted when you close the browser window (or tab).

Function Arguments
Function arguments (parameters) work as local variables inside functions.

============================================================================================================
JAVASCRIPT HOISTING

JavaScript hoisting is a mechanism that allows variables and function declarations to be moved to the top of their containing scope during the compilation phase, even before they are actually declared in the code. This means you can use variables and functions before they are declared in your code.

Let's take a concise example to illustrate hoisting:

console.log(x); // Output: undefined
var x = 5;

In this code snippet, even though the variable x is declared and assigned the value of 5 later in the code, the console.log statement does not throw an error. Instead, it outputs undefined. This is because during the compilation phase, the declaration var x; is moved to the top of its containing scope, making the code effectively behave like this:

var x;
console.log(x); // Output: undefined
x = 5;


Similarly, function declarations are also hoisted. Consider the following example:

foo(); // Output: "Hello"

function foo() {
  console.log("Hello");
}


Here, the function foo is called before its actual declaration in the code. However, due to hoisting, the code is interpreted as if it were written like this:

function foo() {
  console.log("Hello");
}

foo(); // Output: "Hello"


In both cases, the declarations are moved to the top, allowing them to be used before their actual placement in the code.

It's important to note that only the declarations are hoisted, not the initializations or assignments. So, while the variable and function declarations are moved to the top, their values or function definitions are not.

Hoisting is JavaScript's default behavior of moving declarations to the top.

JavaScript Declarations are Hoisted
In JavaScript, a variable can be declared after it has been used.

In other words; a variable can be used before it has been declared.

Example 1 gives the same result as Example 2:

Example 1
x = 5; // Assign 5 to x

elem = document.getElementById("demo"); // Find an element
elem.innerHTML = x;                     // Display x in the element

var x; // Declare x


Example 2
var x; // Declare x
x = 5; // Assign 5 to x

elem = document.getElementById("demo"); // Find an element
elem.innerHTML = x;                     // Display x in the element

To understand this, you have to understand the term "hoisting".

Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function).

The let and const Keywords
Variables defined with let and const are hoisted to the top of the block, but not initialized.

Meaning: The block of code is aware of the variable, but it cannot be used until it has been declared.

Using a let variable before it is declared will result in a ReferenceError.

The variable is in a "temporal dead zone" from the start of the block until it is declared:

Example

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Hoisting</h2>
<p>With <b>let</b>, you cannot use a variable before it is declared.</p>
<p id="demo"></p>

<script>
try {
  carName = "Saab";
  let carName = "Volvo";
}
catch(err) {
  document.getElementById("demo").innerHTML = err;
}
</script>

</body>
</html>


Using a const variable before it is declared, is a syntax error, so the code will simply not run.

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Hoisting</h2>

<p>With <b>const</b>, you cannot use a variable before it is declared.</p>
<p>Try to remove the //.</p>

<p id="demo"></p>

<script>
carName = "Volvo";
//const carName;
document.getElementById("demo").innerHTML = carName;
</script>

</body>
</html>


JavaScript Initializations are Not Hoisted
JavaScript only hoists declarations, not initializations.

Example 1 does not give the same result as Example 2:

Example 1
var x = 5; // Initialize x
var y = 7; // Initialize y

elem = document.getElementById("demo"); // Find an element
elem.innerHTML = x + " " + y;           // Display x and y
Example 2
var x = 5; // Initialize x

elem = document.getElementById("demo"); // Find an element
elem.innerHTML = x + " " + y;           // Display x and y

var y = 7; // Initialize y
Does it make sense that y is undefined in the last example?

This is because only the declaration (var y), not the initialization (=7) is hoisted to the top.

Because of hoisting, y has been declared before it is used, but because initializations are not hoisted, the value of y is undefined.

Example 2 is the same as writing:

Example
var x = 5; // Initialize x
var y;     // Declare y

elem = document.getElementById("demo"); // Find an element
elem.innerHTML = x + " " + y;           // Display x and y

y = 7;    // Assign 7 to y
Declare Your Variables At the Top !
Hoisting is (to many developers) an unknown or overlooked behavior of JavaScript.

If a developer doesn't understand hoisting, programs may contain bugs (errors).

To avoid bugs, always declare all variables at the beginning of every scope.

Since this is how JavaScript interprets the code, it is always a good rule.

JavaScript in strict mode does not allow variables to be used if they are not declared.



                                                                                                                                    


 















































------------------
What is the difference between innerHTML, innerText and textContent:


innerHTML, innerText, and textContent are all properties that allow you to manipulate the text content of HTML elements, but they work in slightly different ways.

innerHTML: This property sets or returns the HTML content (including HTML tags) of an element. It can be used to both get and set the content of an element. For example, element.innerHTML = "<p>This is some text</p>"; would set the content of an element to the HTML string provided.

innerText: This property sets or returns the text content of an element, but it does not include any HTML tags. It is often used to get or set the visible text content of an element. For example, element.innerText = "This is some text"; would set the visible text content of an element.

textContent: This property sets or returns the text content of an element, including any HTML tags. It is often used to get or set the complete text content of an element, including any tags or entities. For example, element.textContent = "This is some <strong>bold text</strong>"; would set the complete text content of an element, including the <strong> tag.

Here's a quick summary of the differences between these three properties:

innerHTML: Includes all HTML content, but can cause security issues if the HTML is not properly sanitized.

innerText: Includes only visible text content, but doesn't preserve whitespace and line breaks.

textContent: Includes all text content, including whitespace and line breaks, but doesn't include any styling or HTML tags.

In general, textContent is the most reliable option if you just want to get or set the text content of an element, but innerHTML and innerText can be useful in certain situations.


<!-- HTML code -->
<div id="myDiv"></div>

// JavaScript code
const myDiv = document.getElementById("myDiv");
myDiv.innerHTML = "<p>This is some <strong>bold</strong> text.</p>";


In this example, the innerHTML property of the myDiv element is set to a string that includes HTML tags. As a result, the text "This is some bold text." is displayed inside the myDiv element with the word "bold" displayed in bold font.

Example using innerText:
<!-- HTML code -->
<div id="myDiv">This is some <strong>bold</strong> text.</div>

// JavaScript code
const myDiv = document.getElementById("myDiv");
const text = myDiv.innerText;
console.log(text);


In this example, the innerText property of the myDiv element is used to retrieve the visible text content of the element. The resulting text is then logged to the console, which would output "This is some bold text." without the <strong> tags.

Example using textContent:

<!-- HTML code -->
<div id="myDiv">This is some <strong>bold</strong> text.</div>

// JavaScript code
const myDiv = document.getElementById("myDiv");
myDiv.textContent = "This is some plain text.";


In this example, the textContent property of the myDiv element is used to set the complete text content of the element, including any HTML tags. As a result, the text "This is some plain text." is displayed inside the myDiv element, without any HTML formatting.


==================================================================================


Window addEventListener()
Examples
Add a click event handler to the window:

window.addEventListener("click", myFunction);

function myFunction() {
  document.getElementById("demo").innerHTML = "Hello World";
}
Simpler syntax:

window.addEventListener("click", function(){
  document.getElementById("demo").innerHTML = "Hello World";
});

The addEventListener() method attaches an event handler to a window.

Syntax
document.addEventListener(event, function, Capture)
Parameters
Parameter Description
event Required.
The event name.
Do not use the "on" prefix.
Use "click" instead of "onclick".

All HTML DOM events are listed in the:
HTML DOM Event Object Reference.
function  Required.
The function to run when the event occurs.

When the event occurs, an event object is passed to the function as the first parameter. The type of the event object depends on the specified event. For example, the "click" event belongs to the MouseEvent object.
capture Optional (default = false).
true - The handler is executed in the capturing phase.
false - The handler is executed in the bubbling phase.
Return Value
NONE

More Examples
You can add many event listeners to the document:

document.addEventListener("click", myFunction1);
document.addEventListener("click", myFunction2);
You can add different types of events:

document.addEventListener("mouseover", myFunction);
document.addEventListener("click", someOtherFunction);
document.addEventListener("mouseout", someOtherFunction);


e.g
<!DOCTYPE html>
<html>
<body>

<h1>The Document Object</h1>
<h2>The addEventListener() Method</h2>

<p>This example adds two click events to the document.</p>

<p>Click anywhere in the document.</p>

<p id="demo"></p>

<script>
document.addEventListener("click", myFunction1);
document.addEventListener("click", myFunction2);

function myFunction1() {
  document.getElementById("demo").innerHTML += "First function was executed! "
}

function myFunction2() {
  document.getElementById("demo").innerHTML += "Second function was executed! "
}
</script>

</body>
</html>


When passing parameters, use an "anonymous function" to call a function with the parameters:
<!DOCTYPE html>
<html>
<body>

<h1>The Document Object</h1>
<h2>The addEventListener() Method</h2>

<p>How to pass parameter values with the 
addEventListener() method.</p>

<p>Click anywhere in the document to perform a calculation.</p>

<p id="demo"></p>

<script>
let p1 = 5;
let p2 = 7;

document.addEventListener("click", function() {
  myFunction(p1, p2);
});

function myFunction(a, b) {
  let result = a * b;
  document.getElementById("demo").innerHTML = result;
}
</script>

</body>
</html>


Change body color
<script>
document.addEventListener("click", function(){
  document.body.style.backgroundColor = "red";
});
</script>

<!DOCTYPE html>
<html>
<body>

<h1>The Document Object</h1>
<h2>The removeEventListener() Method</h2>

<p>A mousemove event handler displays a random number every time you move your mouse in this document.</p>

<p>Click "Remove" to remove the event handler.</p>

<button onclick="removeHandler()">Remove</button>

<p id="demo"></p>

<script>
// Add an event listener
document.addEventListener("mousemove", myFunction);

function myFunction() {
  document.getElementById("demo").innerHTML = Math.random();
}


// Remove event listener
function removeHandler() {
  document.removeEventListener("mousemove", myFunction);
}
</script>

</body>
</html>


--------------------------
HTML DOM Document adoptNode()
Example
Adopt the first <h1> element that appears in an iframe (from another document):
<!DOCTYPE html>
<html>
<body>

<h1>The Document Object</h1>
<h2>The adoptNode() Method</h2>

<iframe id="myFrame" src="/default.asp" style="height:380px;width:520px;"></iframe>

<p>Click "Try it" to adopt the first H1 element in the iframe.</p>

<button onclick="myFunction()">Try it</button>

<script>
function myFunction() {
  const frame = document.getElementById("myFrame");
  const h1 = frame.contentWindow.document.getElementsByTagName("h1")[0];
  const node = document.adoptNode(h1);
  document.body.appendChild(node);
}
</script>

</body>
</html>


Note
The adopted node can be of all types.

Any child nodes (descendants) of the adopted node, are also adopted.

The original node (with child nodes) is removed from the other document.


-----------------------------------------------------------------------------------------------
JavaScript encodeURI()

Definition and Usage
The encodeURI() method encodes a URI.

Note
Use the decodeURI() method to decode a URI.

Special Characters
The encodeURI() method does not encode characters like:
, / ? : @ & = + $ * #

Use the encodeURIComponent() method instead.

Syntax
encodeURI(uri)
Parameters
Parameter Description
uri Required.
The URI to encode.
Return Value
Type  Description
A string. The encoded URI.


<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Global Methods</h1>
<h2>The encodeURI() Method</h2>

<p id="demo"></p>

<script>
let uri = "my test.asp?name=ståle&car=saab";
let encoded = encodeURI(uri);

document.getElementById("demo").innerHTML = encoded;
</script>
ANS: my%20test.asp?name=st%C3%A5le&car=saab
</body>
</html>


The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to encodeURIComponent(), this function encodes fewer characters, preserving those that are part of the URI syntax.

const uri = 'https://mozilla.org/?x=шеллы';
const encoded = encodeURI(uri);
console.log(encoded);
// Expected output: "https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B"

try {
  console.log(decodeURI(encoded));
  // Expected output: "https://mozilla.org/?x=шеллы"
} catch (e) { // Catches a malformed URI
  console.error(e);
}

ANS:
https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B"
"https://mozilla.org/?x=шеллы"


<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Global Methods</h1>
<h2>The encodeURIComponent() Method</h2>

<p id="demo"></p>

<script>
let uri = "https://w3schools.com/my test.asp?name=ståle&car=saab";
let encoded = encodeURI(uri);

document.getElementById("demo").innerHTML = encoded;
</script>
ANS: https://w3schools.com/my%20test.asp?name=st%C3%A5le&car=saab
</body>
</html>




JavaScript encodeURIComponent()

Definition and Usage
The encodeURIComponent() method encodes a URI component.

The encodeURIComponent() method encodes special characters including: , / ? : @ & = + $ #

Syntax
encodeURIComponent(uri)
Parameters
Parameter Description
uri Required.
The URI to be encoded.
Return Value
Type  Description
A string  The encoded URI.


<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Global Methods</h1>
<h2>The encodeURIComponent() Method</h2>

<p id="demo"></p>

<script>
let uri = "https://w3schools.com/my test.asp?name=ståle&car=saab";
let encoded = encodeURIComponent(uri);

document.getElementById("demo").innerHTML = encoded;
</script>
ANS: https%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst%C3%A5le%26car%3Dsaab
</body>
</html>


JavaScript decodeURIComponent()
Definition and Usage
The decodeURIComponent() method decodes a URI component.

<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Global Methods</h1>
<h2>The decodeURIComponent() Method</h2>

<p id="demo"></p>

<script>
let uri = "https://w3schools.com/my test.asp?name=ståle&car=saab";
let encoded = encodeURIComponent(uri);
let decoded = decodeURIComponent(encoded);

document.getElementById("demo").innerHTML = "Encoded URI:<br>" + encoded + "<br><br>" + "Decoded URI:<br>" + decoded;
</script>

</body>
</html>


The decodeURIComponent() function is important in web development because it allows developers to work with URI-encoded strings, which are commonly used in query strings, cookie values, and other parts of web applications. By decoding these strings, developers can retrieve the original values of the data and use them as intended.

In the context of cookies, using decodeURIComponent() is important because cookies may contain special characters, such as commas, semicolons, and equal signs, that have special meanings in the cookie syntax. If these characters are not properly encoded before being stored in a cookie, the cookie may become invalid or malformed, and the browser may not be able to read or write the cookie correctly. By encoding and decoding cookie values using encodeURIComponent() and decodeURIComponent(), respectively, developers can ensure that the cookies are properly formatted and can be read and written by the browser.

Overall, the decodeURIComponent() function is a useful tool for handling URI-encoded strings in web development, and is an important part of working with cookies and other web application data.

GIVE ME A SAMPLE FOR COOKIE SO IT WILL NOT MALFUNCTION AS YOU SAID
Sure! Here is an example of how to set a cookie with a properly encoded value using encodeURIComponent():

const cookieName = 'myCookie';
const cookieValue = 'Hello, World!; my name is John Doe.';
const cookieExpires = 30; // expires in 30 days

// encode the cookie value before setting it
const encodedValue = encodeURIComponent(cookieValue);

// set the cookie with the encoded value
document.cookie = `${cookieName}=${encodedValue};expires=${new Date(Date.now() + cookieExpires * 24 * 60 * 60 * 1000)};path=/`;

console.log(document.cookie);



This is using my function below:


//See setCookie Function on the console
   console.log(document.cookie);

  //Invoke setCookie Function (set for 2 cookies)
  setCookie("email", "onwubikojedybrown@gmail.com", 365);
  setCookie("Job", "Engineer", 31);

  //Use function to create a cookie
  function setCookie(name, value, daysToLive) {
    const date = new Date();
    date.setTime(date.getTime() + daysToLive * 24 * 60 * 60 * 1000);
    let expires = "expires=" + date.toUTCString();
    document.cookie = `${name}= ${value}; ${expires}; path=/`;
  
  }




=============================================================================================================
                                  location.reload() 

 This is a method in JavaScript that is used to reload the current page. When this method is called, the browser will reload the page by making a new request to the server and then displaying the updated content.

Here's an example of how you can use location.reload() in JavaScript:

javascript

// Reload the current page
location.reload();

You can also pass a boolean value to the reload() method to force the browser to reload the page from the server, rather than using a cached version. For example:

javascript

// Reload the current page and force a server refresh
location.reload(true);

It's important to note that using location.reload() can have unintended consequences for users, such as losing unsaved data. Therefore, it's important to use this method with caution and only when necessary.






When can I use this in my website?

You can use location.reload() in your website when you need to reload the current page with new content or to reflect changes made by the user or server-side updates. Here are some examples:

Updating dynamic content: If you have dynamic content on your webpage that changes frequently, you can use location.reload() to refresh the page and display the updated content.

Submitting a form: After a user submits a form, you can use location.reload() to refresh the page and display a confirmation message or updated data.

Implementing a "Refresh" button: You can add a "Refresh" button to your webpage that calls location.reload() when clicked, allowing users to manually refresh the page.

Dealing with authentication or session expiration: If your website requires user authentication, you can use location.reload() to refresh the page when a user's session expires or they log out.

However, it's important to note that using location.reload() excessively or unnecessarily can negatively impact user experience and performance. Always consider whether reloading the page is the best solution for the problem you're trying to solve.






Submitting a form: After a user submits a form, you can use location.reload() to refresh the page and display a confirmation message or updated data. Give me a sample code with htlm and css
Sure, here's an example of how you can use location.reload() to refresh the page and display a confirmation message after a user submits a form using HTML, CSS, and JavaScript:

HTML:


<form id="myForm">
  <label for="name">Name:</label>
  <input type="text" id="name" name="name"><br><br>
  
  <label for="email">Email:</label>
  <input type="email" id="email" name="email"><br><br>
  
  <button type="submit">Submit</button>
</form>

<div id="confirmation" class="hidden">
  <p>Thank you for submitting the form!</p>
</div>
CSS:

css

.hidden {
  display: none;
}



javascript

const form = document.getElementById('myForm');
const confirmation = document.getElementById('confirmation');

form.addEventListener('submit', (event) => {
  // Prevent the form from submitting normally
  event.preventDefault();

  // Display the confirmation message
  confirmation.classList.remove('hidden');

  // Reload the page after a short delay
  setTimeout(() => {
    location.reload();
  }, 3000);
});

In this example, the form has an ID of "myForm" and includes two input fields for the user's name and email address, as well as a submit button. When the form is submitted, the JavaScript code adds an event listener to the form that prevents it from submitting normally, displays a confirmation message that was previously hidden using the "hidden" CSS class, and then calls location.reload() after a short delay of 3 seconds (3000 milliseconds) using setTimeout().

The confirmation message will be displayed for 3 seconds before the page is reloaded, giving the user enough time to see the message before the page refreshes. You can adjust the delay time to suit your needs.





So after reloading the form data will now be submitted 
No, reloading the page with location.reload() alone does not submit the form data.

If you want to submit the form data to a server after reloading the page, you'll need to modify the JavaScript code to include an AJAX request or a form submission action.

For example, if you want to submit the form data using an AJAX request after the page is reloaded, you can modify the code as follows:

javascript

const form = document.getElementById('myForm');
const confirmation = document.getElementById('confirmation');

form.addEventListener('submit', (event) => {
  // Prevent the form from submitting normally
  event.preventDefault();

  // Display the confirmation message
  confirmation.classList.remove('hidden');

  // Reload the page after a short delay
  setTimeout(() => {
    // Create an XMLHttpRequest object
    const xhr = new XMLHttpRequest();

    // Set up the request
    xhr.open('POST', 'submit-form.php');
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

    // Send the request with the form data
    xhr.send(new FormData(form));

    // Reload the page
    location.reload();
  }, 3000);
});
In this modified code, the XMLHttpRequest object is used to send a POST request to the server with the form data using the FormData constructor. After sending the request, the page is reloaded using location.reload(). Note that you'll need to modify the server-side code (e.g. submit-form.php) to handle the form data and perform any necessary actions, such as saving the data to a database or sending an email.





Please use action=config.php in the form and use php then
Sure, here's an example of how you can use location.reload() to refresh the page and display a confirmation message after a user submits a form using HTML, CSS, and PHP:

HTML:

html
Copy code
<form id="myForm" action="config.php" method="POST">
  <label for="name">Name:</label>
  <input type="text" id="name" name="name"><br><br>
  
  <label for="email">Email:</label>
  <input type="email" id="email" name="email"><br><br>
  
  <button type="submit">Submit</button>
</form>

<div id="confirmation" class="hidden">
  <p>Thank you for submitting the form!</p>
</div>
CSS:

css
Copy code
.hidden {
  display: none;
}
PHP (config.php):

php
Copy code
<?php
// Check if form was submitted
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  // Retrieve form data
  $name = $_POST['name'];
  $email = $_POST['email'];

  // Perform any necessary actions with the form data
  // ...

  // Redirect back to the original page after processing the form data
  header('Location: ' . $_SERVER['HTTP_REFERER']);
  exit;
}
?>
JavaScript:

javascript
Copy code
const form = document.getElementById('myForm');
const confirmation = document.getElementById('confirmation');

form.addEventListener('submit', (event) => {
  // Prevent the form from submitting normally
  event.preventDefault();

  // Display the confirmation message
  confirmation.classList.remove('hidden');

  // Reload the page after a short delay
  setTimeout(() => {
    location.reload();
  }, 3000);

  // Submit the form data using AJAX (optional)
  const xhr = new XMLHttpRequest();
  xhr.open('POST', form.action);
  xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
  xhr.send(new FormData(form));
});

In this example, the form has an ID of "myForm" and includes two input fields for the user's name and email address, as well as a submit button. The form's action attribute is set to "config.php", which is the PHP file that handles the form submission.

When the form is submitted, the PHP code in "config.php" retrieves the form data and performs any necessary actions, such as saving the data to a database or sending an email. After processing the form data, the PHP code redirects the user back to the original page using header('Location: ' . $_SERVER['HTTP_REFERER']).

The JavaScript code adds an event listener to the form that prevents it from submitting normally, displays a confirmation message that was previously hidden using the "hidden" CSS class, and then calls location.reload() after a short delay of 3 seconds (3000 milliseconds) using setTimeout(). The form data is also submitted to the server using an AJAX request.

Note that the XMLHttpRequest object is used to send the form data to the server. You can modify the PHP code in "config.php" to handle the form data and perform any necessary actions based on your requirements.






Use action=config.php in the form and modify js , don't use xml please 
Sure, here's an example of how you can use location.reload() to refresh the page and display a confirmation message after a user submits a form using HTML, CSS, and PHP without using AJAX:

HTML:


<form id="myForm" action="config.php" method="POST">
  <label for="name">Name:</label>
  <input type="text" id="name" name="name"><br><br>
  
  <label for="email">Email:</label>
  <input type="email" id="email" name="email"><br><br>
  
  <button type="submit">Submit</button>
</form>

<div id="confirmation" class="hidden">
  <p>Thank you for submitting the form!</p>
</div>
CSS:

css
Copy code
.hidden {
  display: none;
}
PHP (config.php):

php
Copy code
<?php
// Check if form was submitted
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  // Retrieve form data
  $name = $_POST['name'];
  $email = $_POST['email'];

  // Perform any necessary actions with the form data
  // ...

  // Redirect back to the original page after processing the form data
  header('Location: ' . $_SERVER['HTTP_REFERER']);
  exit;
}
?>
JavaScript:


const form = document.getElementById('myForm');
const confirmation = document.getElementById('confirmation');

form.addEventListener('submit', (event) => {
  // Prevent the form from submitting normally
  event.preventDefault();

  // Display the confirmation message
  confirmation.classList.remove('hidden');

  // Reload the page after a short delay
  setTimeout(() => {
    location.reload();
  }, 3000);

  // Submit the form data using the form's "action" attribute
  form.submit();
});
In this modified example, the form has an ID of "myForm" and includes two input fields for the user's name and email address, as well as a submit button. The form's action attribute is set to "config.php", which is the PHP file that handles the form submission.

When the form is submitted, the PHP code in "config.php" retrieves the form data and performs any necessary actions, such as saving the data to a database or sending an email. After processing the form data, the PHP code redirects the user back to the original page using header('Location: ' . $_SERVER['HTTP_REFERER']).

The JavaScript code adds an event listener to the form that prevents it from submitting normally, displays a confirmation message that was previously hidden using the "hidden" CSS class, and then calls location.reload() after a short delay of 3 seconds (3000 milliseconds) using setTimeout(). The form data is also submitted to the server using the form's submit() method, which uses the action attribute to determine where to send the form data.

Note that the PHP code in "config.php" can be modified to handle the form data and perform any necessary actions based on your requirements.





But I want to add green color and font 18px to the confirmation. Why are you removing the css class
Apologies for the confusion. You can modify the CSS class and adjust the styles as per your requirements. Here's the modified HTML, CSS, and JavaScript code:

HTML:


<form id="myForm" action="config.php" method="POST">
  <label for="name">Name:</label>
  <input type="text" id="name" name="name"><br><br>
  
  <label for="email">Email:</label>
  <input type="email" id="email" name="email"><br><br>
  
  <button type="submit">Submit</button>
</form>

<div id="confirmation" class="hidden">
  <p>Thank you for submitting the form!</p>
</div>
CSS:

css
Copy code
.hidden {
  display: none;
}

#confirmation {
  color: green;
  font-size: 18px;
}
JavaScript:


const form = document.getElementById('myForm');
const confirmation = document.getElementById('confirmation');

form.addEventListener('submit', (event) => {
  // Prevent the form from submitting normally
  event.preventDefault();

  // Display the confirmation message
  confirmation.classList.remove('hidden');

  // Reload the page after a short delay
  setTimeout(() => {
    location.reload();
  }, 3000);

  // Submit the form data using the form's "action" attribute
  form.submit();
});
In this modified example, the #confirmation CSS selector targets the div element with the confirmation ID and sets the color property to green and the font-size property to 18px.

The JavaScript code adds an event listener to the form that prevents it from submitting normally, displays the confirmation message by removing the hidden class from the confirmation element, and then calls location.reload() after a short delay of 3 seconds (3000 milliseconds) using setTimeout(). The form data is also submitted to the server using the form's submit() method, which uses the action attribute to determine where to send the form data.


So the div is hidden first by .hidden and then display by #confirmation
Yes, that's correct. The hidden class initially hides the #confirmation element by setting its display property to none. When the form is submitted, the hidden class is removed from the #confirmation element, which makes it visible again by removing the display: none style. This displays the confirmation message to the user.



==============================================================================================================///---------------------------------------SESSION IDS ----------------------------

Explain session ids instead of login details for returning users


Sure, I can explain how session IDs are used instead of login details for returning users.

When a user logs in to a website, the website typically generates a unique session ID for that user. This session ID is then stored in the user's browser as a cookie, which is a small text file that is saved on the user's computer. The website's server also stores the session ID, usually in a database or cache.

When the user navigates to other pages on the website, their browser sends the session ID along with the request for each page. The website's server checks the session ID to verify that the user is authenticated and has permission to access the requested page. If the session ID is valid, the server grants access to the page.

Using session IDs instead of login details can provide a more convenient and seamless user experience, as the user does not need to enter their login details each time they visit the website. However, it is important to note that session IDs can also pose security risks, as they can potentially be intercepted or stolen by attackers. To mitigate these risks, websites typically use various security measures, such as encryption and session timeouts, to protect user data and prevent unauthorized access.



Can I create session ids in JavaScript 
Yes, it is possible to create session IDs in JavaScript.

To generate a unique session ID in JavaScript, you can use the Math.random() function to generate a random number, and then convert it to a hexadecimal string. Here is an example code snippet that generates a random session ID:

function generateSessionId() {
  let randomNum = Math.random();
  let hexString = randomNum.toString(16);
  let sessionId = hexString.slice(2); // remove "0." from the start
  return sessionId;
}

<!DOCTYPE html>
<html>
<head>
  <title>SESSION IDS</title>
</head>
<body>
    <h1>Session Ids</h1>



  <script>
  function generateSessionId() {
    let randomNum = Math.random();
    //console.log(randomNum);//e.g 0.6446295500923296, 0.3304302747439538
    //console.log(typeof randomNum);//number
    let hexString = randomNum.toString(16);
    //console.log(hexString);//e.g 5ff371932fba3, cfd7e3c216e6e, 0.579ca519c7fc
    //console.log(typeof hexString);//string (this is in base 16)
    let sessionId = hexString.slice(2); // remove "0." from the start
    console.log(sessionId);//e.g 579ca519c7fc, 
    console.log(typeof sessionId);//string
    return sessionId;
    //console.log(sessionId);// e.g 579ca519c7fc 
  }

  console.log(generateSessionId()); //e.g 8e4529657b8b6, 4e6c47b241bac
</script>

</body>
</html>

This function generates a random number between 0 and 1 using Math.random(), converts it to a hexadecimal string using the toString() method with a base of 16, and then slices off the "0." from the start of the string using the slice() method. This results in a unique hexadecimal string that can be used as a session ID.

However, it is important to note that creating a session ID alone does not provide sufficient security for user authentication. You would also need to implement other security measures, such as encryption, to protect user data and prevent unauthorized access. Additionally, it is recommended to use server-side technologies, such as PHP or Node.js, to manage session IDs, as these technologies offer more robust security features and can prevent common security vulnerabilities.





You mean compared to JavaScript 
Yes, that's correct. When it comes to creating and managing session IDs, server-side technologies like PHP or Node.js are generally more secure and reliable than client-side technologies like JavaScript.

The reason for this is that server-side technologies allow you to store session data securely on the server, rather than relying on potentially vulnerable client-side storage mechanisms like cookies or local storage. Additionally, server-side technologies typically have more advanced security features, such as encryption and hashing algorithms, that can help protect sensitive user data and prevent attacks like session hijacking or cross-site scripting.

That being said, JavaScript can still be used in conjunction with server-side technologies to manage session IDs and provide a seamless user experience. For example, you could use JavaScript to generate a unique session ID on the client-side and then send it to the server for validation and storage. However, it is important to ensure that the session ID is securely transmitted to the server, and that appropriate security measures are in place to prevent unauthorized access to user data.





explain toString method
Sure, I can explain the toString() method in JavaScript.

The toString() method is a built-in method in JavaScript that can be used to convert a value to a string. The toString() method is typically used to convert numbers, booleans, and objects to string values.

Here are some examples of how to use the toString() method:

Converting a number to a string:

let num = 42;
let str = num.toString();
console.log(str); // "42"

Converting a boolean to a string:

let bool = true;
let str = bool.toString();
console.log(str); // "true"

Converting an object to a string:

let obj = {name: "John", age: 30};
let str = obj.toString();
console.log(str); // "[object Object]"


In the first example, the toString() method is used to convert the number 42 to a string value of "42". In the second example, the toString() method is used to convert the boolean value true to a string value of "true". In the third example, the toString() method is used to convert the object {name: "John", age: 30} to a string value of "[object Object]".

It is important to note that the toString() method may behave differently depending on the type of value being converted. For example, when converting an array to a string using the toString() method, the array elements are concatenated with commas to create a comma-separated string. It is also possible to pass a parameter to the toString() method to specify the base of a number when converting it to a string, such as num.toString(16) to convert a number to a hexadecimal string.


<script>
    let Num = 56;
    let myString = Num.toString();
    console.log(Num);
    console.log(myString);
    console.log(typeof Num);
    console.log(typeof myString);

    ANS:
    56
    56
   number
   string
  </script>

  <script>
    let myArray = ["Aba", 12, "Mandela"];
    let myString = myArray.toString();
    console.log(myArray);
    console.log(myString);
    console.log(typeof myArray);
    console.log(typeof myString);

  
    ANS:
    (3) ['Aba', 12, 'Mandela']
    Aba,12,Mandela
    object
    string



  </script>

    <script>
    let myObject = {Name: "Jedy", Age: 27, Address: "Mandela"};
    let myString = myObject.toString();
    console.log(myObject);
    console.log(myString);
    console.log(typeof myObject);
    console.log(typeof myString);

  ans
  {Name: 'Jedy', Age: 27, Address: 'Mandela'}
  [object Object]
  Object
  string
  </script>


Do we have decimal string if we have hexadecimal string 
Yes, you can convert a hexadecimal string to a decimal string in JavaScript.

To convert a hexadecimal string to a decimal string, you can use the parseInt() function with a base of 16 to convert the hexadecimal string to a decimal number, and then use the toString() method with a base of 10 to convert the decimal number to a decimal string.

Here is an example code snippet that demonstrates how to convert a hexadecimal string to a decimal string in JavaScript:

javascript

let hexString = "4f2a";
let decimalNum = parseInt(hexString, 16);
let decimalString = decimalNum.toString(10);
console.log(decimalString); // "20202"
In this example, the hexadecimal string "4f2a" is first converted to a decimal number using the parseInt() function with a base of 16. The resulting decimal number is 20202. Then, the toString() method is used with a base of 10 to convert the decimal number to a decimal string. The resulting decimal string is "20202".

<script>
  let hexString = "4f2a";
  console.log(hexString);//4f2a
  console.log(typeof hexString);//string

  
  let decimalNum = parseInt(hexString, 16);
  console.log(decimalNum);//20266
  console.log(typeof decimalNum);//number

  let decimalString = decimalNum.toString(10);
  console.log(decimalString); //20266
  console.log(typeof decimalString);//string
 
  </script>
It is worth noting that JavaScript also provides a built-in method Number.parseInt() which can also be used to convert a hexadecimal string to a decimal number, similar to parseInt().






Why is 16 here          let decimalNum = parseInt(hexString, 16);
     converting to base 10. 
When you use the parseInt() function to convert a string to a number in JavaScript, you can specify the base of the number you are converting from.

In this case, the second parameter of the parseInt() function is the base of the number you are converting from, which is 16 for hexadecimal numbers. This tells JavaScript to interpret the input string as a hexadecimal number.

When you pass the input string "4f2a" and a base of 16 to parseInt(), it will interpret the input string as a hexadecimal number and convert it to a decimal number.

Once you have the decimal number, you can use the toString() method to convert it to a decimal string using a base of 10. This is because the default base for toString() is 10, which means that it will convert the decimal number to a decimal string.

So to summarize, the reason we use a base of 16 with parseInt() is to tell JavaScript to interpret the input string as a hexadecimal number, and then we convert the resulting decimal number to a decimal string using a base of 10 with toString().





















